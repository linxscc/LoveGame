// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_clock.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_clock.proto</summary>
  public static partial class ControllerClockReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_clock.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerClockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZjb250cm9sbGVyX2Nsb2NrLnByb3RvEgljb20ucHJvdG8aCmJhc2UucHJv",
            "dG8aFWJlYW5fdXNlcl9jbG9jay5wcm90bxoSYmVhbl9lbGVtZW50LnByb3Rv",
            "IkcKC015Q2xvY2tzUmVzEgsKA3JldBgBIAEoERIrCgt1c2VyX2Nsb2NrcxgC",
            "IAMoCzIWLmNvbS5wcm90by5Vc2VyQ2xvY2tQQiJaCgtTZXRDbG9ja1JlcRIQ",
            "CghjbG9ja19pZBgBIAEoERIMCgRvcGVuGAIgASgREgwKBGhvdXIYAyABKBES",
            "CwoDbWluGAQgASgREhAKCGxhYmVsX2lkGAUgASgRIkYKC1NldENsb2NrUmVz",
            "EgsKA3JldBgBIAEoERIqCgp1c2VyX2Nsb2NrGAIgASgLMhYuY29tLnByb3Rv",
            "LlVzZXJDbG9ja1BCIh8KC1RpcENsb2NrUmVxEhAKCGNsb2NrX2lkGAEgASgR",
            "IkYKC1RpcENsb2NrUmVzEgsKA3JldBgBIAEoERIqCgp1c2VyX2Nsb2NrGAIg",
            "ASgLMhYuY29tLnByb3RvLlVzZXJDbG9ja1BCIhsKB1BsYXlSZXESEAoIY2xv",
            "Y2tfaWQYASABKBEiFgoHUGxheVJlcxILCgNyZXQYASABKBFCOAofbmV0Lmdh",
            "bGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIVQ2xvY2tDb250cm9sbGVyUHJv",
            "dG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanUserClockReflection.Descriptor, global::Com.Proto.BeanElementReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyClocksRes), global::Com.Proto.MyClocksRes.Parser, new[]{ "Ret", "UserClocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SetClockReq), global::Com.Proto.SetClockReq.Parser, new[]{ "ClockId", "Open", "Hour", "Min", "LabelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SetClockRes), global::Com.Proto.SetClockRes.Parser, new[]{ "Ret", "UserClock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.TipClockReq), global::Com.Proto.TipClockReq.Parser, new[]{ "ClockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.TipClockRes), global::Com.Proto.TipClockRes.Parser, new[]{ "Ret", "UserClock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PlayReq), global::Com.Proto.PlayReq.Parser, new[]{ "ClockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PlayRes), global::Com.Proto.PlayRes.Parser, new[]{ "Ret" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///用户闹钟信息 clockC/clocks
  /// </summary>
  public sealed partial class MyClocksRes : pb::IMessage<MyClocksRes> {
    private static readonly pb::MessageParser<MyClocksRes> _parser = new pb::MessageParser<MyClocksRes>(() => new MyClocksRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyClocksRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyClocksRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyClocksRes(MyClocksRes other) : this() {
      ret_ = other.ret_;
      userClocks_ = other.userClocks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyClocksRes Clone() {
      return new MyClocksRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_clocks" field.</summary>
    public const int UserClocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserClockPB> _repeated_userClocks_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserClockPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserClockPB> userClocks_ = new pbc::RepeatedField<global::Com.Proto.UserClockPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserClockPB> UserClocks {
      get { return userClocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyClocksRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyClocksRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userClocks_.Equals(other.userClocks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userClocks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userClocks_.WriteTo(output, _repeated_userClocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userClocks_.CalculateSize(_repeated_userClocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyClocksRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userClocks_.Add(other.userClocks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userClocks_.AddEntriesFrom(input, _repeated_userClocks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置闹钟 clockC/set
  /// </summary>
  public sealed partial class SetClockReq : pb::IMessage<SetClockReq> {
    private static readonly pb::MessageParser<SetClockReq> _parser = new pb::MessageParser<SetClockReq>(() => new SetClockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetClockReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetClockReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetClockReq(SetClockReq other) : this() {
      clockId_ = other.clockId_;
      open_ = other.open_;
      hour_ = other.hour_;
      min_ = other.min_;
      labelId_ = other.labelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetClockReq Clone() {
      return new SetClockReq(this);
    }

    /// <summary>Field number for the "clock_id" field.</summary>
    public const int ClockIdFieldNumber = 1;
    private int clockId_;
    /// <summary>
    ///闹钟id，新设置闹钟传0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClockId {
      get { return clockId_; }
      set {
        clockId_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private int open_;
    /// <summary>
    ///0关闭1开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 3;
    private int hour_;
    /// <summary>
    ///小时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 4;
    private int min_;
    /// <summary>
    ///分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "label_id" field.</summary>
    public const int LabelIdFieldNumber = 5;
    private int labelId_;
    /// <summary>
    ///标签ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LabelId {
      get { return labelId_; }
      set {
        labelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetClockReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetClockReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClockId != other.ClockId) return false;
      if (Open != other.Open) return false;
      if (Hour != other.Hour) return false;
      if (Min != other.Min) return false;
      if (LabelId != other.LabelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClockId != 0) hash ^= ClockId.GetHashCode();
      if (Open != 0) hash ^= Open.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Min != 0) hash ^= Min.GetHashCode();
      if (LabelId != 0) hash ^= LabelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClockId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClockId);
      }
      if (Open != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Open);
      }
      if (Hour != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Hour);
      }
      if (Min != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Min);
      }
      if (LabelId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(LabelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClockId);
      }
      if (Open != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Open);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Hour);
      }
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Min);
      }
      if (LabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LabelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetClockReq other) {
      if (other == null) {
        return;
      }
      if (other.ClockId != 0) {
        ClockId = other.ClockId;
      }
      if (other.Open != 0) {
        Open = other.Open;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.LabelId != 0) {
        LabelId = other.LabelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClockId = input.ReadSInt32();
            break;
          }
          case 16: {
            Open = input.ReadSInt32();
            break;
          }
          case 24: {
            Hour = input.ReadSInt32();
            break;
          }
          case 32: {
            Min = input.ReadSInt32();
            break;
          }
          case 40: {
            LabelId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetClockRes : pb::IMessage<SetClockRes> {
    private static readonly pb::MessageParser<SetClockRes> _parser = new pb::MessageParser<SetClockRes>(() => new SetClockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetClockRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetClockRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetClockRes(SetClockRes other) : this() {
      ret_ = other.ret_;
      UserClock = other.userClock_ != null ? other.UserClock.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetClockRes Clone() {
      return new SetClockRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_clock" field.</summary>
    public const int UserClockFieldNumber = 2;
    private global::Com.Proto.UserClockPB userClock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserClockPB UserClock {
      get { return userClock_; }
      set {
        userClock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetClockRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetClockRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserClock, other.UserClock)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userClock_ != null) hash ^= UserClock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userClock_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserClock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userClock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserClock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetClockRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userClock_ != null) {
        if (userClock_ == null) {
          userClock_ = new global::Com.Proto.UserClockPB();
        }
        UserClock.MergeFrom(other.UserClock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userClock_ == null) {
              userClock_ = new global::Com.Proto.UserClockPB();
            }
            input.ReadMessage(userClock_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///弹出提醒 clockC/tip 
  /// </summary>
  public sealed partial class TipClockReq : pb::IMessage<TipClockReq> {
    private static readonly pb::MessageParser<TipClockReq> _parser = new pb::MessageParser<TipClockReq>(() => new TipClockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TipClockReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TipClockReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TipClockReq(TipClockReq other) : this() {
      clockId_ = other.clockId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TipClockReq Clone() {
      return new TipClockReq(this);
    }

    /// <summary>Field number for the "clock_id" field.</summary>
    public const int ClockIdFieldNumber = 1;
    private int clockId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClockId {
      get { return clockId_; }
      set {
        clockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TipClockReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TipClockReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClockId != other.ClockId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClockId != 0) hash ^= ClockId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClockId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClockId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClockId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TipClockReq other) {
      if (other == null) {
        return;
      }
      if (other.ClockId != 0) {
        ClockId = other.ClockId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClockId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TipClockRes : pb::IMessage<TipClockRes> {
    private static readonly pb::MessageParser<TipClockRes> _parser = new pb::MessageParser<TipClockRes>(() => new TipClockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TipClockRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TipClockRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TipClockRes(TipClockRes other) : this() {
      ret_ = other.ret_;
      UserClock = other.userClock_ != null ? other.UserClock.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TipClockRes Clone() {
      return new TipClockRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_clock" field.</summary>
    public const int UserClockFieldNumber = 2;
    private global::Com.Proto.UserClockPB userClock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserClockPB UserClock {
      get { return userClock_; }
      set {
        userClock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TipClockRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TipClockRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserClock, other.UserClock)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userClock_ != null) hash ^= UserClock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userClock_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserClock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userClock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserClock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TipClockRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userClock_ != null) {
        if (userClock_ == null) {
          userClock_ = new global::Com.Proto.UserClockPB();
        }
        UserClock.MergeFrom(other.UserClock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userClock_ == null) {
              userClock_ = new global::Com.Proto.UserClockPB();
            }
            input.ReadMessage(userClock_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///播放语音 clockC/play 
  /// </summary>
  public sealed partial class PlayReq : pb::IMessage<PlayReq> {
    private static readonly pb::MessageParser<PlayReq> _parser = new pb::MessageParser<PlayReq>(() => new PlayReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayReq(PlayReq other) : this() {
      clockId_ = other.clockId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayReq Clone() {
      return new PlayReq(this);
    }

    /// <summary>Field number for the "clock_id" field.</summary>
    public const int ClockIdFieldNumber = 1;
    private int clockId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClockId {
      get { return clockId_; }
      set {
        clockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClockId != other.ClockId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClockId != 0) hash ^= ClockId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClockId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ClockId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClockId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayReq other) {
      if (other == null) {
        return;
      }
      if (other.ClockId != 0) {
        ClockId = other.ClockId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClockId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayRes : pb::IMessage<PlayRes> {
    private static readonly pb::MessageParser<PlayRes> _parser = new pb::MessageParser<PlayRes>(() => new PlayRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerClockReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRes(PlayRes other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRes Clone() {
      return new PlayRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
