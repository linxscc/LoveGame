// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_department_award_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_department_award_rule.proto</summary>
  public static partial class BeanDepartmentAwardRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_department_award_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanDepartmentAwardRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBiZWFuX2RlcGFydG1lbnRfYXdhcmRfcnVsZS5wcm90bxIJY29tLnByb3Rv",
            "GgpiYXNlLnByb3RvGhBiZWFuX2F3YXJkLnByb3RvIlIKFURlcGFydG1lbnRB",
            "d2FyZFJ1bGVQQhIWCg5pdGVtX3RvdGFsX251bRgBIAEoERIhCgVhd2FyZBgC",
            "IAMoCzISLmNvbS5wcm90by5Bd2FyZFBCQjwKH25ldC5nYWxhc3BvcnRzLmJp",
            "Z3N0YXIucHJvdG9jb2xCGURlcGFydG1lbnRBd2FyZFJ1bGVQcm90b3NiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DepartmentAwardRulePB), global::Com.Proto.DepartmentAwardRulePB.Parser, new[]{ "ItemTotalNum", "Award" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///DepartmentAwardRulePB DepartmentAwardRule
  /// </summary>
  public sealed partial class DepartmentAwardRulePB : pb::IMessage<DepartmentAwardRulePB> {
    private static readonly pb::MessageParser<DepartmentAwardRulePB> _parser = new pb::MessageParser<DepartmentAwardRulePB>(() => new DepartmentAwardRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartmentAwardRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanDepartmentAwardRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentAwardRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentAwardRulePB(DepartmentAwardRulePB other) : this() {
      itemTotalNum_ = other.itemTotalNum_;
      award_ = other.award_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartmentAwardRulePB Clone() {
      return new DepartmentAwardRulePB(this);
    }

    /// <summary>Field number for the "item_total_num" field.</summary>
    public const int ItemTotalNumFieldNumber = 1;
    private int itemTotalNum_;
    /// <summary>
    ///累计消耗道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemTotalNum {
      get { return itemTotalNum_; }
      set {
        itemTotalNum_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_award_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> award_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Award {
      get { return award_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartmentAwardRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartmentAwardRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemTotalNum != other.ItemTotalNum) return false;
      if(!award_.Equals(other.award_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemTotalNum != 0) hash ^= ItemTotalNum.GetHashCode();
      hash ^= award_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemTotalNum != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ItemTotalNum);
      }
      award_.WriteTo(output, _repeated_award_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemTotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemTotalNum);
      }
      size += award_.CalculateSize(_repeated_award_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartmentAwardRulePB other) {
      if (other == null) {
        return;
      }
      if (other.ItemTotalNum != 0) {
        ItemTotalNum = other.ItemTotalNum;
      }
      award_.Add(other.award_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemTotalNum = input.ReadSInt32();
            break;
          }
          case 18: {
            award_.AddEntriesFrom(input, _repeated_award_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
