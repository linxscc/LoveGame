// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_diary.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_diary.proto</summary>
  public static partial class ControllerDiaryReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_diary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerDiaryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZjb250cm9sbGVyX2RpYXJ5LnByb3RvEgljb20ucHJvdG8aCmJhc2UucHJv",
            "dG8aFGJlYW5fdXNlcl9pdGVtLnByb3RvGhViZWFuX3VzZXJfbW9uZXkucHJv",
            "dG8aEmJlYW5fZWxlbWVudC5wcm90bxoVYmVhbl91c2VyX2RpYXJ5LnByb3Rv",
            "GhxiZWFuX3VzZXJfZmF2b3JhYmlsaXR5LnByb3RvIkMKD015RGlhcnlTdGF0",
            "ZVJlcRIwCgxkaWFyeV9zdGF0ZXMYASADKAsyGi5jb20ucHJvdG8uVXNlckRp",
            "YXJ5RGF0ZVBCImkKD015RGlhcnlTdGF0ZVJlcxILCgNyZXQYASABKBESNAoQ",
            "dXNlcl9kaWFyeV9kYXRlcxgCIAMoCzIaLmNvbS5wcm90by5Vc2VyRGlhcnlE",
            "YXRlUEISEwoLdW5sb2NrX3RpbWUYAyABKBIiPQoQTXlEaWFyeURldGFpbFJl",
            "cRIMCgR5ZWFyGAEgASgREg0KBW1vbnRoGAIgASgREgwKBGRhdGUYAyABKBEi",
            "SwoQTXlEaWFyeURldGFpbFJlcxILCgNyZXQYASABKBESKgoKdXNlcl9kaWFy",
            "eRgCIAEoCzIWLmNvbS5wcm90by5Vc2VyRGlhcnlQQiJsCgxTYXZlRGlhcnlS",
            "ZXESDAoEeWVhchgBIAEoERINCgVtb250aBgCIAEoERIMCgRkYXRlGAMgASgR",
            "EjEKDmRpYXJ5X2VsZW1lbnRzGAQgAygLMhkuY29tLnByb3RvLkRpYXJ5RWxl",
            "bWVudFBCIoEBCgxTYXZlRGlhcnlSZXMSCwoDcmV0GAEgASgREioKCnVzZXJf",
            "ZGlhcnkYAiABKAsyFi5jb20ucHJvdG8uVXNlckRpYXJ5UEISOAoRdXNlcl9m",
            "YXZvcmFiaWxpdHkYAyABKAsyHS5jb20ucHJvdG8uVXNlckZhdm9yYWJpbGl0",
            "eVBCQjgKH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9jb2xCFURpYXJ5",
            "Q29udHJvbGxlclByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, global::Com.Proto.BeanElementReflection.Descriptor, global::Com.Proto.BeanUserDiaryReflection.Descriptor, global::Com.Proto.BeanUserFavorabilityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyDiaryStateReq), global::Com.Proto.MyDiaryStateReq.Parser, new[]{ "DiaryStates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyDiaryStateRes), global::Com.Proto.MyDiaryStateRes.Parser, new[]{ "Ret", "UserDiaryDates", "UnlockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyDiaryDetailReq), global::Com.Proto.MyDiaryDetailReq.Parser, new[]{ "Year", "Month", "Date" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyDiaryDetailRes), global::Com.Proto.MyDiaryDetailRes.Parser, new[]{ "Ret", "UserDiary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SaveDiaryReq), global::Com.Proto.SaveDiaryReq.Parser, new[]{ "Year", "Month", "Date", "DiaryElements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SaveDiaryRes), global::Com.Proto.SaveDiaryRes.Parser, new[]{ "Ret", "UserDiary", "UserFavorability" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///用户日记状态列表（按月拉取） diaryC/userDiaryState
  /// </summary>
  public sealed partial class MyDiaryStateReq : pb::IMessage<MyDiaryStateReq> {
    private static readonly pb::MessageParser<MyDiaryStateReq> _parser = new pb::MessageParser<MyDiaryStateReq>(() => new MyDiaryStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyDiaryStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDiaryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryStateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryStateReq(MyDiaryStateReq other) : this() {
      diaryStates_ = other.diaryStates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryStateReq Clone() {
      return new MyDiaryStateReq(this);
    }

    /// <summary>Field number for the "diary_states" field.</summary>
    public const int DiaryStatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Proto.UserDiaryDatePB> _repeated_diaryStates_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Proto.UserDiaryDatePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserDiaryDatePB> diaryStates_ = new pbc::RepeatedField<global::Com.Proto.UserDiaryDatePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserDiaryDatePB> DiaryStates {
      get { return diaryStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyDiaryStateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyDiaryStateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diaryStates_.Equals(other.diaryStates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diaryStates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diaryStates_.WriteTo(output, _repeated_diaryStates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diaryStates_.CalculateSize(_repeated_diaryStates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyDiaryStateReq other) {
      if (other == null) {
        return;
      }
      diaryStates_.Add(other.diaryStates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            diaryStates_.AddEntriesFrom(input, _repeated_diaryStates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyDiaryStateRes : pb::IMessage<MyDiaryStateRes> {
    private static readonly pb::MessageParser<MyDiaryStateRes> _parser = new pb::MessageParser<MyDiaryStateRes>(() => new MyDiaryStateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyDiaryStateRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDiaryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryStateRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryStateRes(MyDiaryStateRes other) : this() {
      ret_ = other.ret_;
      userDiaryDates_ = other.userDiaryDates_.Clone();
      unlockTime_ = other.unlockTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryStateRes Clone() {
      return new MyDiaryStateRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_diary_dates" field.</summary>
    public const int UserDiaryDatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserDiaryDatePB> _repeated_userDiaryDates_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserDiaryDatePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserDiaryDatePB> userDiaryDates_ = new pbc::RepeatedField<global::Com.Proto.UserDiaryDatePB>();
    /// <summary>
    ///记录日记的日期列表，没有记录的不在列表里
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserDiaryDatePB> UserDiaryDates {
      get { return userDiaryDates_; }
    }

    /// <summary>Field number for the "unlock_time" field.</summary>
    public const int UnlockTimeFieldNumber = 3;
    private long unlockTime_;
    /// <summary>
    ///日记功能开启时间，未开启时返回0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnlockTime {
      get { return unlockTime_; }
      set {
        unlockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyDiaryStateRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyDiaryStateRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userDiaryDates_.Equals(other.userDiaryDates_)) return false;
      if (UnlockTime != other.UnlockTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userDiaryDates_.GetHashCode();
      if (UnlockTime != 0L) hash ^= UnlockTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userDiaryDates_.WriteTo(output, _repeated_userDiaryDates_codec);
      if (UnlockTime != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(UnlockTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userDiaryDates_.CalculateSize(_repeated_userDiaryDates_codec);
      if (UnlockTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(UnlockTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyDiaryStateRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userDiaryDates_.Add(other.userDiaryDates_);
      if (other.UnlockTime != 0L) {
        UnlockTime = other.UnlockTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userDiaryDates_.AddEntriesFrom(input, _repeated_userDiaryDates_codec);
            break;
          }
          case 24: {
            UnlockTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户日记具体信息 diaryC/userDiaryDetail
  /// </summary>
  public sealed partial class MyDiaryDetailReq : pb::IMessage<MyDiaryDetailReq> {
    private static readonly pb::MessageParser<MyDiaryDetailReq> _parser = new pb::MessageParser<MyDiaryDetailReq>(() => new MyDiaryDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyDiaryDetailReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDiaryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryDetailReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryDetailReq(MyDiaryDetailReq other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      date_ = other.date_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryDetailReq Clone() {
      return new MyDiaryDetailReq(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    /// <summary>
    ///年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    /// <summary>
    ///月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 3;
    private int date_;
    /// <summary>
    ///日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyDiaryDetailReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyDiaryDetailReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Date != other.Date) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Date != 0) hash ^= Date.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Month);
      }
      if (Date != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Date);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Month);
      }
      if (Date != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Date);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyDiaryDetailReq other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Date != 0) {
        Date = other.Date;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadSInt32();
            break;
          }
          case 16: {
            Month = input.ReadSInt32();
            break;
          }
          case 24: {
            Date = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyDiaryDetailRes : pb::IMessage<MyDiaryDetailRes> {
    private static readonly pb::MessageParser<MyDiaryDetailRes> _parser = new pb::MessageParser<MyDiaryDetailRes>(() => new MyDiaryDetailRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyDiaryDetailRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDiaryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryDetailRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryDetailRes(MyDiaryDetailRes other) : this() {
      ret_ = other.ret_;
      UserDiary = other.userDiary_ != null ? other.UserDiary.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyDiaryDetailRes Clone() {
      return new MyDiaryDetailRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_diary" field.</summary>
    public const int UserDiaryFieldNumber = 2;
    private global::Com.Proto.UserDiaryPB userDiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserDiaryPB UserDiary {
      get { return userDiary_; }
      set {
        userDiary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyDiaryDetailRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyDiaryDetailRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserDiary, other.UserDiary)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userDiary_ != null) hash ^= UserDiary.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userDiary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserDiary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userDiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDiary);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyDiaryDetailRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userDiary_ != null) {
        if (userDiary_ == null) {
          userDiary_ = new global::Com.Proto.UserDiaryPB();
        }
        UserDiary.MergeFrom(other.UserDiary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userDiary_ == null) {
              userDiary_ = new global::Com.Proto.UserDiaryPB();
            }
            input.ReadMessage(userDiary_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存日记 diaryC/saveDiary
  /// </summary>
  public sealed partial class SaveDiaryReq : pb::IMessage<SaveDiaryReq> {
    private static readonly pb::MessageParser<SaveDiaryReq> _parser = new pb::MessageParser<SaveDiaryReq>(() => new SaveDiaryReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveDiaryReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDiaryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveDiaryReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveDiaryReq(SaveDiaryReq other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      date_ = other.date_;
      diaryElements_ = other.diaryElements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveDiaryReq Clone() {
      return new SaveDiaryReq(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    /// <summary>
    ///年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    /// <summary>
    ///月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 3;
    private int date_;
    /// <summary>
    ///日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "diary_elements" field.</summary>
    public const int DiaryElementsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.DiaryElementPB> _repeated_diaryElements_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.DiaryElementPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.DiaryElementPB> diaryElements_ = new pbc::RepeatedField<global::Com.Proto.DiaryElementPB>();
    /// <summary>
    ///具体内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.DiaryElementPB> DiaryElements {
      get { return diaryElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveDiaryReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveDiaryReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Date != other.Date) return false;
      if(!diaryElements_.Equals(other.diaryElements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Date != 0) hash ^= Date.GetHashCode();
      hash ^= diaryElements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Month);
      }
      if (Date != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Date);
      }
      diaryElements_.WriteTo(output, _repeated_diaryElements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Month);
      }
      if (Date != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Date);
      }
      size += diaryElements_.CalculateSize(_repeated_diaryElements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveDiaryReq other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Date != 0) {
        Date = other.Date;
      }
      diaryElements_.Add(other.diaryElements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadSInt32();
            break;
          }
          case 16: {
            Month = input.ReadSInt32();
            break;
          }
          case 24: {
            Date = input.ReadSInt32();
            break;
          }
          case 34: {
            diaryElements_.AddEntriesFrom(input, _repeated_diaryElements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveDiaryRes : pb::IMessage<SaveDiaryRes> {
    private static readonly pb::MessageParser<SaveDiaryRes> _parser = new pb::MessageParser<SaveDiaryRes>(() => new SaveDiaryRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveDiaryRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDiaryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveDiaryRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveDiaryRes(SaveDiaryRes other) : this() {
      ret_ = other.ret_;
      UserDiary = other.userDiary_ != null ? other.UserDiary.Clone() : null;
      UserFavorability = other.userFavorability_ != null ? other.UserFavorability.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveDiaryRes Clone() {
      return new SaveDiaryRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_diary" field.</summary>
    public const int UserDiaryFieldNumber = 2;
    private global::Com.Proto.UserDiaryPB userDiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserDiaryPB UserDiary {
      get { return userDiary_; }
      set {
        userDiary_ = value;
      }
    }

    /// <summary>Field number for the "user_favorability" field.</summary>
    public const int UserFavorabilityFieldNumber = 3;
    private global::Com.Proto.UserFavorabilityPB userFavorability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserFavorabilityPB UserFavorability {
      get { return userFavorability_; }
      set {
        userFavorability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveDiaryRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveDiaryRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserDiary, other.UserDiary)) return false;
      if (!object.Equals(UserFavorability, other.UserFavorability)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userDiary_ != null) hash ^= UserDiary.GetHashCode();
      if (userFavorability_ != null) hash ^= UserFavorability.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userDiary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserDiary);
      }
      if (userFavorability_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserFavorability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userDiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDiary);
      }
      if (userFavorability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserFavorability);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveDiaryRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userDiary_ != null) {
        if (userDiary_ == null) {
          userDiary_ = new global::Com.Proto.UserDiaryPB();
        }
        UserDiary.MergeFrom(other.UserDiary);
      }
      if (other.userFavorability_ != null) {
        if (userFavorability_ == null) {
          userFavorability_ = new global::Com.Proto.UserFavorabilityPB();
        }
        UserFavorability.MergeFrom(other.UserFavorability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userDiary_ == null) {
              userDiary_ = new global::Com.Proto.UserDiaryPB();
            }
            input.ReadMessage(userDiary_);
            break;
          }
          case 26: {
            if (userFavorability_ == null) {
              userFavorability_ = new global::Com.Proto.UserFavorabilityPB();
            }
            input.ReadMessage(userFavorability_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
