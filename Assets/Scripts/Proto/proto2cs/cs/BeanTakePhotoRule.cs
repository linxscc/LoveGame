// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_take_photo_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_take_photo_rule.proto</summary>
  public static partial class BeanTakePhotoRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_take_photo_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanTakePhotoRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpiZWFuX3Rha2VfcGhvdG9fcnVsZS5wcm90bxIJY29tLnByb3RvGgpiYXNl",
            "LnByb3RvIpABCg9UYWtlUGhvdG9SdWxlUEISCgoCaWQYASABKBESGQoGcGxh",
            "eWVyGAIgASgOMgkuUGxheWVyUEISEgoKcGljdHVyZV9pZBgDIAEoERISCgpj",
            "b29yZGluYXRlGAQgASgJEgwKBGdhaW4YBSABKAESDQoFaXNFdm8YBiABKBES",
            "EQoJc2hhcnBuZXNzGAcgASgBIjYKF1Rha2VQaG90b0J1eUNvdW50UnVsZVBC",
            "Eg0KBXRpbWVzGAEgASgREgwKBGdlbXMYAiABKBFCNgofbmV0LmdhbGFzcG9y",
            "dHMuYmlnc3Rhci5wcm90b2NvbEITVGFrZVBob3RvUnVsZVByb3Rvc2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.TakePhotoRulePB), global::Com.Proto.TakePhotoRulePB.Parser, new[]{ "Id", "Player", "PictureId", "Coordinate", "Gain", "IsEvo", "Sharpness" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.TakePhotoBuyCountRulePB), global::Com.Proto.TakePhotoBuyCountRulePB.Parser, new[]{ "Times", "Gems" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TakePhotoRulePB : pb::IMessage<TakePhotoRulePB> {
    private static readonly pb::MessageParser<TakePhotoRulePB> _parser = new pb::MessageParser<TakePhotoRulePB>(() => new TakePhotoRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakePhotoRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanTakePhotoRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoRulePB(TakePhotoRulePB other) : this() {
      id_ = other.id_;
      player_ = other.player_;
      pictureId_ = other.pictureId_;
      coordinate_ = other.coordinate_;
      gain_ = other.gain_;
      isEvo_ = other.isEvo_;
      sharpness_ = other.sharpness_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoRulePB Clone() {
      return new TakePhotoRulePB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///数据主键ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::PlayerPB player_ = 0;
    /// <summary>
    ///男主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "picture_id" field.</summary>
    public const int PictureIdFieldNumber = 3;
    private int pictureId_;
    /// <summary>
    ///照片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PictureId {
      get { return pictureId_; }
      set {
        pictureId_ = value;
      }
    }

    /// <summary>Field number for the "coordinate" field.</summary>
    public const int CoordinateFieldNumber = 4;
    private string coordinate_ = "";
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Coordinate {
      get { return coordinate_; }
      set {
        coordinate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gain" field.</summary>
    public const int GainFieldNumber = 5;
    private double gain_;
    /// <summary>
    ///放大倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gain {
      get { return gain_; }
      set {
        gain_ = value;
      }
    }

    /// <summary>Field number for the "isEvo" field.</summary>
    public const int IsEvoFieldNumber = 6;
    private int isEvo_;
    /// <summary>
    ///是否进化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsEvo {
      get { return isEvo_; }
      set {
        isEvo_ = value;
      }
    }

    /// <summary>Field number for the "sharpness" field.</summary>
    public const int SharpnessFieldNumber = 7;
    private double sharpness_;
    /// <summary>
    ///清晰度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sharpness {
      get { return sharpness_; }
      set {
        sharpness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakePhotoRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakePhotoRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Player != other.Player) return false;
      if (PictureId != other.PictureId) return false;
      if (Coordinate != other.Coordinate) return false;
      if (Gain != other.Gain) return false;
      if (IsEvo != other.IsEvo) return false;
      if (Sharpness != other.Sharpness) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (PictureId != 0) hash ^= PictureId.GetHashCode();
      if (Coordinate.Length != 0) hash ^= Coordinate.GetHashCode();
      if (Gain != 0D) hash ^= Gain.GetHashCode();
      if (IsEvo != 0) hash ^= IsEvo.GetHashCode();
      if (Sharpness != 0D) hash ^= Sharpness.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (PictureId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(PictureId);
      }
      if (Coordinate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Coordinate);
      }
      if (Gain != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Gain);
      }
      if (IsEvo != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(IsEvo);
      }
      if (Sharpness != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Sharpness);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (PictureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PictureId);
      }
      if (Coordinate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Coordinate);
      }
      if (Gain != 0D) {
        size += 1 + 8;
      }
      if (IsEvo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsEvo);
      }
      if (Sharpness != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakePhotoRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.PictureId != 0) {
        PictureId = other.PictureId;
      }
      if (other.Coordinate.Length != 0) {
        Coordinate = other.Coordinate;
      }
      if (other.Gain != 0D) {
        Gain = other.Gain;
      }
      if (other.IsEvo != 0) {
        IsEvo = other.IsEvo;
      }
      if (other.Sharpness != 0D) {
        Sharpness = other.Sharpness;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 16: {
            player_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
          case 24: {
            PictureId = input.ReadSInt32();
            break;
          }
          case 34: {
            Coordinate = input.ReadString();
            break;
          }
          case 41: {
            Gain = input.ReadDouble();
            break;
          }
          case 48: {
            IsEvo = input.ReadSInt32();
            break;
          }
          case 57: {
            Sharpness = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakePhotoBuyCountRulePB : pb::IMessage<TakePhotoBuyCountRulePB> {
    private static readonly pb::MessageParser<TakePhotoBuyCountRulePB> _parser = new pb::MessageParser<TakePhotoBuyCountRulePB>(() => new TakePhotoBuyCountRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakePhotoBuyCountRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanTakePhotoRuleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoBuyCountRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoBuyCountRulePB(TakePhotoBuyCountRulePB other) : this() {
      times_ = other.times_;
      gems_ = other.gems_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoBuyCountRulePB Clone() {
      return new TakePhotoBuyCountRulePB(this);
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 1;
    private int times_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "gems" field.</summary>
    public const int GemsFieldNumber = 2;
    private int gems_;
    /// <summary>
    ///购买钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gems {
      get { return gems_; }
      set {
        gems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakePhotoBuyCountRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakePhotoBuyCountRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Times != other.Times) return false;
      if (Gems != other.Gems) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Times != 0) hash ^= Times.GetHashCode();
      if (Gems != 0) hash ^= Gems.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Times != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Times);
      }
      if (Gems != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gems);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Times);
      }
      if (Gems != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gems);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakePhotoBuyCountRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.Gems != 0) {
        Gems = other.Gems;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Times = input.ReadSInt32();
            break;
          }
          case 16: {
            Gems = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
