// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_music_game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_music_game.proto</summary>
  public static partial class ControllerMusicGameReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_music_game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerMusicGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtjb250cm9sbGVyX211c2ljX2dhbWUucHJvdG8SCWNvbS5wcm90bxoaYmVh",
            "bl9tdXNpY19nYW1lX3J1bGUucHJvdG8aEGJlYW5fYXdhcmQucHJvdG8aFWJl",
            "YW5fdXNlcl9tb25leS5wcm90byLlAgoFUnVsZXMSCwoDcmV0GAEgASgREjsK",
            "EmNoYWxsZW5nZU11c2ljRGF0YRgCIAMoCzIfLmNvbS5wcm90by5DaGFsbGVu",
            "Z2VNdXNpY0RhdGFQQhInCghtYWxsSW5mbxgDIAMoCzIVLmNvbS5wcm90by5N",
            "YWxsSW5mb1BCEi0KC3JlZnJlc2hEYXRhGAQgAygLMhguY29tLnByb3RvLlJl",
            "ZnJlc2hEYXRhUEISNQoQbXVzaWNfZ2FtZV9zY29yZRgFIAMoCzIbLmNvbS5w",
            "cm90by5NdXNpY0dhbWVTY29yZVBCEikKCW11c2ljSW5mbxgGIAMoCzIWLmNv",
            "bS5wcm90by5NdXNpY0luZm9QQhI1ChBqdWRnZV9tdXNpY19kYXRhGAcgAygL",
            "MhsuY29tLnByb3RvLkp1ZGdlTXVzaWNEYXRhUEISIQoFY29tYm8YCCADKAsy",
            "Ei5jb20ucHJvdG8uQ29tYm9QQiJACg1PcGVuTXVzaWNHYW1lEgsKA3JldBgB",
            "IAEoERIQCghwcm9ncmVzcxgCIAEoERIQCghpbnRlZ3JhbBgDIAEoEiKBAQoH",
            "Q29uY2VydBILCgNyZXQYASABKBESMwoPdXNlcl9tdXNpY19nYW1lGAIgAygL",
            "MhouY29tLnByb3RvLlVzZXJNdXNpY0dhbWVQQhIZChFyZWZyZXNoTXVzaWND",
            "b3VudBgDIAEoERIZChFtdXNpY0RpZmZQcm9ncmVzcxgEIAEoESJiCg9Vc2Vy",
            "TXVzaWNHYW1lUEISEgoKYWN0aXZpdHlJZBgBIAEoERIWCg5tdXNpY0NoYXB0",
            "ZXJJZBgCIAEoERITCgtuZWVkQWJpbGl0eRgDIAEoERIOCgZmaW5pc2gYBCAB",
            "KBEiKQoTUmVmcmVzaE11c2ljR2FtZVJlcRISCgphY3Rpdml0eUlkGAEgASgR",
            "IpUBCg9SZWZyZXNoTXVzaWNSZXMSCwoDcmV0GAEgASgREjMKD3VzZXJfbXVz",
            "aWNfZ2FtZRgCIAMoCzIaLmNvbS5wcm90by5Vc2VyTXVzaWNHYW1lUEISGQoR",
            "cmVmcmVzaE11c2ljQ291bnQYAyABKBESJQoFbW9uZXkYBCABKAsyFi5jb20u",
            "cHJvdG8uVXNlck1vbmV5UEIiWQoPUGxheWluZ011c2ljUmVxEhIKCmFjdGl2",
            "aXR5SWQYASABKBESDwoHY2FyZElkcxgCIAMoERIQCghkaWZmVHlwZRgDIAEo",
            "ERIPCgdtdXNpY0lkGAQgASgRIh4KD1BsYXlpbmdNdXNpY1JlcxILCgNyZXQY",
            "ASABKBEiVQoNRW5kUGxheWluZ1JlcRINCgVzY29yZRgBIAEoEhIPCgdtdXNp",
            "Y0lkGAIgASgREhIKCmFjdGl2aXR5SWQYAyABKBESEAoIZGlmZlR5cGUYBCAB",
            "KBEiPgoNRW5kUGxheWluZ1JlcxILCgNyZXQYASABKBESEAoIaW50ZWdyYWwY",
            "AiABKBISDgoGcmF0aW5nGAMgASgRIgkKB01hbGxSZXEiUwoHTWFsbFJlcxIL",
            "CgNyZXQYASABKBESIQoEaW5mbxgCIAMoCzITLmNvbS5wcm90by5TaG9wSW5m",
            "bxIYChByZWZyZXNoTWFsbENvdW50GAMgASgRIjcKCFNob3BJbmZvEg4KBnNs",
            "b3RJZBgBIAEoERIOCgZzaG9wSWQYAiABKBESCwoDYnV5GAMgASgIIhAKDlJl",
            "ZnJlc2hNYWxsUmVxIoEBCg5SZWZyZXNoTWFsbFJlcxILCgNyZXQYASABKBES",
            "IQoEaW5mbxgCIAMoCzITLmNvbS5wcm90by5TaG9wSW5mbxIYChByZWZyZXNo",
            "TWFsbENvdW50GAMgASgREiUKBW1vbmV5GAQgASgLMhYuY29tLnByb3RvLlVz",
            "ZXJNb25leVBCIh0KC1Nob3BwaW5nUmVxEg4KBnNsb3RJZBgBIAEoESJQCgtT",
            "aG9wcGluZ1JlcxILCgNyZXQYASABKBESEAoIaW50ZWdyYWwYAiABKBISIgoG",
            "YXdhcmRzGAMgAygLMhIuY29tLnByb3RvLkF3YXJkUEIiHgoLU2VuZFJhbmtS",
            "ZXESDwoHbXVzaWNJZBgBIAEoESKEAQoLU2VuZFJhbmtSZXMSCwoDcmV0GAEg",
            "ASgREiQKBWluZm9zGAIgAygLMhUuY29tLnByb3RvLlJhbmtJbmZvUEISDgoG",
            "bXlSYW5rGAMgASgREhAKCG15UmF0aW5nGAQgASgREg8KB215U2NvcmUYBSAB",
            "KBISDwoHbXVzaWNJZBgGIAEoESJuCgpSYW5rSW5mb1BCEg4KBnVzZXJJZBgB",
            "IAEoERIPCgd1c2VJY29uGAIgASgJEg8KB3VzZU5hbWUYAyABKAkSDgoGcmF0",
            "aW5nGAQgASgREg0KBXNjb3JlGAUgASgSEg8KB3JhbmtpbmcYBiABKBFCMgof",
            "bmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIPTXVzaWNHYW1lUHJv",
            "dG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Proto.BeanMusicGameRuleReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Rules), global::Com.Proto.Rules.Parser, new[]{ "Ret", "ChallengeMusicData", "MallInfo", "RefreshData", "MusicGameScore", "MusicInfo", "JudgeMusicData", "Combo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.OpenMusicGame), global::Com.Proto.OpenMusicGame.Parser, new[]{ "Ret", "Progress", "Integral" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Concert), global::Com.Proto.Concert.Parser, new[]{ "Ret", "UserMusicGame", "RefreshMusicCount", "MusicDiffProgress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserMusicGamePB), global::Com.Proto.UserMusicGamePB.Parser, new[]{ "ActivityId", "MusicChapterId", "NeedAbility", "Finish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.RefreshMusicGameReq), global::Com.Proto.RefreshMusicGameReq.Parser, new[]{ "ActivityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.RefreshMusicRes), global::Com.Proto.RefreshMusicRes.Parser, new[]{ "Ret", "UserMusicGame", "RefreshMusicCount", "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PlayingMusicReq), global::Com.Proto.PlayingMusicReq.Parser, new[]{ "ActivityId", "CardIds", "DiffType", "MusicId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PlayingMusicRes), global::Com.Proto.PlayingMusicRes.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EndPlayingReq), global::Com.Proto.EndPlayingReq.Parser, new[]{ "Score", "MusicId", "ActivityId", "DiffType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EndPlayingRes), global::Com.Proto.EndPlayingRes.Parser, new[]{ "Ret", "Integral", "Rating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MallReq), global::Com.Proto.MallReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MallRes), global::Com.Proto.MallRes.Parser, new[]{ "Ret", "Info", "RefreshMallCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ShopInfo), global::Com.Proto.ShopInfo.Parser, new[]{ "SlotId", "ShopId", "Buy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.RefreshMallReq), global::Com.Proto.RefreshMallReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.RefreshMallRes), global::Com.Proto.RefreshMallRes.Parser, new[]{ "Ret", "Info", "RefreshMallCount", "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ShoppingReq), global::Com.Proto.ShoppingReq.Parser, new[]{ "SlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ShoppingRes), global::Com.Proto.ShoppingRes.Parser, new[]{ "Ret", "Integral", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SendRankReq), global::Com.Proto.SendRankReq.Parser, new[]{ "MusicId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SendRankRes), global::Com.Proto.SendRankRes.Parser, new[]{ "Ret", "Infos", "MyRank", "MyRating", "MyScore", "MusicId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.RankInfoPB), global::Com.Proto.RankInfoPB.Parser, new[]{ "UserId", "UseIcon", "UseName", "Rating", "Score", "Ranking" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///规则 /musicGameC/rules
  /// </summary>
  public sealed partial class Rules : pb::IMessage<Rules> {
    private static readonly pb::MessageParser<Rules> _parser = new pb::MessageParser<Rules>(() => new Rules());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rules(Rules other) : this() {
      ret_ = other.ret_;
      challengeMusicData_ = other.challengeMusicData_.Clone();
      mallInfo_ = other.mallInfo_.Clone();
      refreshData_ = other.refreshData_.Clone();
      musicGameScore_ = other.musicGameScore_.Clone();
      musicInfo_ = other.musicInfo_.Clone();
      judgeMusicData_ = other.judgeMusicData_.Clone();
      combo_ = other.combo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rules Clone() {
      return new Rules(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "challengeMusicData" field.</summary>
    public const int ChallengeMusicDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.ChallengeMusicDataPB> _repeated_challengeMusicData_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.ChallengeMusicDataPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ChallengeMusicDataPB> challengeMusicData_ = new pbc::RepeatedField<global::Com.Proto.ChallengeMusicDataPB>();
    /// <summary>
    ///音游活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ChallengeMusicDataPB> ChallengeMusicData {
      get { return challengeMusicData_; }
    }

    /// <summary>Field number for the "mallInfo" field.</summary>
    public const int MallInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.MallInfoPB> _repeated_mallInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.MallInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.MallInfoPB> mallInfo_ = new pbc::RepeatedField<global::Com.Proto.MallInfoPB>();
    /// <summary>
    ///商店信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.MallInfoPB> MallInfo {
      get { return mallInfo_; }
    }

    /// <summary>Field number for the "refreshData" field.</summary>
    public const int RefreshDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.RefreshDataPB> _repeated_refreshData_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.RefreshDataPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.RefreshDataPB> refreshData_ = new pbc::RepeatedField<global::Com.Proto.RefreshDataPB>();
    /// <summary>
    ///刷新信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.RefreshDataPB> RefreshData {
      get { return refreshData_; }
    }

    /// <summary>Field number for the "music_game_score" field.</summary>
    public const int MusicGameScoreFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.MusicGameScorePB> _repeated_musicGameScore_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.MusicGameScorePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.MusicGameScorePB> musicGameScore_ = new pbc::RepeatedField<global::Com.Proto.MusicGameScorePB>();
    /// <summary>
    ///评级信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.MusicGameScorePB> MusicGameScore {
      get { return musicGameScore_; }
    }

    /// <summary>Field number for the "musicInfo" field.</summary>
    public const int MusicInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Proto.MusicInfoPB> _repeated_musicInfo_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Proto.MusicInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.MusicInfoPB> musicInfo_ = new pbc::RepeatedField<global::Com.Proto.MusicInfoPB>();
    /// <summary>
    ///音乐信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.MusicInfoPB> MusicInfo {
      get { return musicInfo_; }
    }

    /// <summary>Field number for the "judge_music_data" field.</summary>
    public const int JudgeMusicDataFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Proto.JudgeMusicDataPB> _repeated_judgeMusicData_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Proto.JudgeMusicDataPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.JudgeMusicDataPB> judgeMusicData_ = new pbc::RepeatedField<global::Com.Proto.JudgeMusicDataPB>();
    /// <summary>
    ///音游操作信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.JudgeMusicDataPB> JudgeMusicData {
      get { return judgeMusicData_; }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Com.Proto.ComboPB> _repeated_combo_codec
        = pb::FieldCodec.ForMessage(66, global::Com.Proto.ComboPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ComboPB> combo_ = new pbc::RepeatedField<global::Com.Proto.ComboPB>();
    /// <summary>
    ///combo信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ComboPB> Combo {
      get { return combo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!challengeMusicData_.Equals(other.challengeMusicData_)) return false;
      if(!mallInfo_.Equals(other.mallInfo_)) return false;
      if(!refreshData_.Equals(other.refreshData_)) return false;
      if(!musicGameScore_.Equals(other.musicGameScore_)) return false;
      if(!musicInfo_.Equals(other.musicInfo_)) return false;
      if(!judgeMusicData_.Equals(other.judgeMusicData_)) return false;
      if(!combo_.Equals(other.combo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= challengeMusicData_.GetHashCode();
      hash ^= mallInfo_.GetHashCode();
      hash ^= refreshData_.GetHashCode();
      hash ^= musicGameScore_.GetHashCode();
      hash ^= musicInfo_.GetHashCode();
      hash ^= judgeMusicData_.GetHashCode();
      hash ^= combo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      challengeMusicData_.WriteTo(output, _repeated_challengeMusicData_codec);
      mallInfo_.WriteTo(output, _repeated_mallInfo_codec);
      refreshData_.WriteTo(output, _repeated_refreshData_codec);
      musicGameScore_.WriteTo(output, _repeated_musicGameScore_codec);
      musicInfo_.WriteTo(output, _repeated_musicInfo_codec);
      judgeMusicData_.WriteTo(output, _repeated_judgeMusicData_codec);
      combo_.WriteTo(output, _repeated_combo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += challengeMusicData_.CalculateSize(_repeated_challengeMusicData_codec);
      size += mallInfo_.CalculateSize(_repeated_mallInfo_codec);
      size += refreshData_.CalculateSize(_repeated_refreshData_codec);
      size += musicGameScore_.CalculateSize(_repeated_musicGameScore_codec);
      size += musicInfo_.CalculateSize(_repeated_musicInfo_codec);
      size += judgeMusicData_.CalculateSize(_repeated_judgeMusicData_codec);
      size += combo_.CalculateSize(_repeated_combo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rules other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      challengeMusicData_.Add(other.challengeMusicData_);
      mallInfo_.Add(other.mallInfo_);
      refreshData_.Add(other.refreshData_);
      musicGameScore_.Add(other.musicGameScore_);
      musicInfo_.Add(other.musicInfo_);
      judgeMusicData_.Add(other.judgeMusicData_);
      combo_.Add(other.combo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            challengeMusicData_.AddEntriesFrom(input, _repeated_challengeMusicData_codec);
            break;
          }
          case 26: {
            mallInfo_.AddEntriesFrom(input, _repeated_mallInfo_codec);
            break;
          }
          case 34: {
            refreshData_.AddEntriesFrom(input, _repeated_refreshData_codec);
            break;
          }
          case 42: {
            musicGameScore_.AddEntriesFrom(input, _repeated_musicGameScore_codec);
            break;
          }
          case 50: {
            musicInfo_.AddEntriesFrom(input, _repeated_musicInfo_codec);
            break;
          }
          case 58: {
            judgeMusicData_.AddEntriesFrom(input, _repeated_judgeMusicData_codec);
            break;
          }
          case 66: {
            combo_.AddEntriesFrom(input, _repeated_combo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打开音游 /musicGameC/openMusicGame
  /// </summary>
  public sealed partial class OpenMusicGame : pb::IMessage<OpenMusicGame> {
    private static readonly pb::MessageParser<OpenMusicGame> _parser = new pb::MessageParser<OpenMusicGame>(() => new OpenMusicGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenMusicGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenMusicGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenMusicGame(OpenMusicGame other) : this() {
      ret_ = other.ret_;
      progress_ = other.progress_;
      integral_ = other.integral_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenMusicGame Clone() {
      return new OpenMusicGame(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    ///当前歌曲下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 3;
    private long integral_;
    /// <summary>
    ///当前积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenMusicGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenMusicGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Progress != other.Progress) return false;
      if (Integral != other.Integral) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (Integral != 0L) hash ^= Integral.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Progress);
      }
      if (Integral != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Integral);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress);
      }
      if (Integral != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Integral);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenMusicGame other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.Integral != 0L) {
        Integral = other.Integral;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 16: {
            Progress = input.ReadSInt32();
            break;
          }
          case 24: {
            Integral = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打开音游活动信息    /musicGameC/concert
  /// </summary>
  public sealed partial class Concert : pb::IMessage<Concert> {
    private static readonly pb::MessageParser<Concert> _parser = new pb::MessageParser<Concert>(() => new Concert());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Concert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concert(Concert other) : this() {
      ret_ = other.ret_;
      userMusicGame_ = other.userMusicGame_.Clone();
      refreshMusicCount_ = other.refreshMusicCount_;
      musicDiffProgress_ = other.musicDiffProgress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concert Clone() {
      return new Concert(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_music_game" field.</summary>
    public const int UserMusicGameFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserMusicGamePB> _repeated_userMusicGame_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserMusicGamePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserMusicGamePB> userMusicGame_ = new pbc::RepeatedField<global::Com.Proto.UserMusicGamePB>();
    /// <summary>
    ///演奏活动list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserMusicGamePB> UserMusicGame {
      get { return userMusicGame_; }
    }

    /// <summary>Field number for the "refreshMusicCount" field.</summary>
    public const int RefreshMusicCountFieldNumber = 3;
    private int refreshMusicCount_;
    /// <summary>
    ///刷新歌曲活动次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshMusicCount {
      get { return refreshMusicCount_; }
      set {
        refreshMusicCount_ = value;
      }
    }

    /// <summary>Field number for the "musicDiffProgress" field.</summary>
    public const int MusicDiffProgressFieldNumber = 4;
    private int musicDiffProgress_;
    /// <summary>
    ///歌曲难度进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicDiffProgress {
      get { return musicDiffProgress_; }
      set {
        musicDiffProgress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Concert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Concert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userMusicGame_.Equals(other.userMusicGame_)) return false;
      if (RefreshMusicCount != other.RefreshMusicCount) return false;
      if (MusicDiffProgress != other.MusicDiffProgress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userMusicGame_.GetHashCode();
      if (RefreshMusicCount != 0) hash ^= RefreshMusicCount.GetHashCode();
      if (MusicDiffProgress != 0) hash ^= MusicDiffProgress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userMusicGame_.WriteTo(output, _repeated_userMusicGame_codec);
      if (RefreshMusicCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(RefreshMusicCount);
      }
      if (MusicDiffProgress != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(MusicDiffProgress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userMusicGame_.CalculateSize(_repeated_userMusicGame_codec);
      if (RefreshMusicCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefreshMusicCount);
      }
      if (MusicDiffProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicDiffProgress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Concert other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userMusicGame_.Add(other.userMusicGame_);
      if (other.RefreshMusicCount != 0) {
        RefreshMusicCount = other.RefreshMusicCount;
      }
      if (other.MusicDiffProgress != 0) {
        MusicDiffProgress = other.MusicDiffProgress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userMusicGame_.AddEntriesFrom(input, _repeated_userMusicGame_codec);
            break;
          }
          case 24: {
            RefreshMusicCount = input.ReadSInt32();
            break;
          }
          case 32: {
            MusicDiffProgress = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserMusicGamePB : pb::IMessage<UserMusicGamePB> {
    private static readonly pb::MessageParser<UserMusicGamePB> _parser = new pb::MessageParser<UserMusicGamePB>(() => new UserMusicGamePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserMusicGamePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMusicGamePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMusicGamePB(UserMusicGamePB other) : this() {
      activityId_ = other.activityId_;
      musicChapterId_ = other.musicChapterId_;
      needAbility_ = other.needAbility_;
      finish_ = other.finish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMusicGamePB Clone() {
      return new UserMusicGamePB(this);
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///音乐活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "musicChapterId" field.</summary>
    public const int MusicChapterIdFieldNumber = 2;
    private int musicChapterId_;
    /// <summary>
    ///音乐活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicChapterId {
      get { return musicChapterId_; }
      set {
        musicChapterId_ = value;
      }
    }

    /// <summary>Field number for the "needAbility" field.</summary>
    public const int NeedAbilityFieldNumber = 3;
    private int needAbility_;
    /// <summary>
    ///需要的能力类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedAbility {
      get { return needAbility_; }
      set {
        needAbility_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 4;
    private int finish_;
    /// <summary>
    ///是否已完成  0是未完成， 1是已完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserMusicGamePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserMusicGamePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (MusicChapterId != other.MusicChapterId) return false;
      if (NeedAbility != other.NeedAbility) return false;
      if (Finish != other.Finish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (MusicChapterId != 0) hash ^= MusicChapterId.GetHashCode();
      if (NeedAbility != 0) hash ^= NeedAbility.GetHashCode();
      if (Finish != 0) hash ^= Finish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (MusicChapterId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(MusicChapterId);
      }
      if (NeedAbility != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(NeedAbility);
      }
      if (Finish != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Finish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (MusicChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicChapterId);
      }
      if (NeedAbility != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NeedAbility);
      }
      if (Finish != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Finish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserMusicGamePB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.MusicChapterId != 0) {
        MusicChapterId = other.MusicChapterId;
      }
      if (other.NeedAbility != 0) {
        NeedAbility = other.NeedAbility;
      }
      if (other.Finish != 0) {
        Finish = other.Finish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            MusicChapterId = input.ReadSInt32();
            break;
          }
          case 24: {
            NeedAbility = input.ReadSInt32();
            break;
          }
          case 32: {
            Finish = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///刷新音游活动   /musicGameC/refreshMusic
  /// </summary>
  public sealed partial class RefreshMusicGameReq : pb::IMessage<RefreshMusicGameReq> {
    private static readonly pb::MessageParser<RefreshMusicGameReq> _parser = new pb::MessageParser<RefreshMusicGameReq>(() => new RefreshMusicGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshMusicGameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMusicGameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMusicGameReq(RefreshMusicGameReq other) : this() {
      activityId_ = other.activityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMusicGameReq Clone() {
      return new RefreshMusicGameReq(this);
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///刷哪个活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshMusicGameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshMusicGameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshMusicGameReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RefreshMusicRes : pb::IMessage<RefreshMusicRes> {
    private static readonly pb::MessageParser<RefreshMusicRes> _parser = new pb::MessageParser<RefreshMusicRes>(() => new RefreshMusicRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshMusicRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMusicRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMusicRes(RefreshMusicRes other) : this() {
      ret_ = other.ret_;
      userMusicGame_ = other.userMusicGame_.Clone();
      refreshMusicCount_ = other.refreshMusicCount_;
      Money = other.money_ != null ? other.Money.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMusicRes Clone() {
      return new RefreshMusicRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_music_game" field.</summary>
    public const int UserMusicGameFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserMusicGamePB> _repeated_userMusicGame_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserMusicGamePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserMusicGamePB> userMusicGame_ = new pbc::RepeatedField<global::Com.Proto.UserMusicGamePB>();
    /// <summary>
    ///演奏活动list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserMusicGamePB> UserMusicGame {
      get { return userMusicGame_; }
    }

    /// <summary>Field number for the "refreshMusicCount" field.</summary>
    public const int RefreshMusicCountFieldNumber = 3;
    private int refreshMusicCount_;
    /// <summary>
    ///刷新歌曲活动次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshMusicCount {
      get { return refreshMusicCount_; }
      set {
        refreshMusicCount_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 4;
    private global::Com.Proto.UserMoneyPB money_;
    /// <summary>
    ///同步砖石金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshMusicRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshMusicRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userMusicGame_.Equals(other.userMusicGame_)) return false;
      if (RefreshMusicCount != other.RefreshMusicCount) return false;
      if (!object.Equals(Money, other.Money)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userMusicGame_.GetHashCode();
      if (RefreshMusicCount != 0) hash ^= RefreshMusicCount.GetHashCode();
      if (money_ != null) hash ^= Money.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userMusicGame_.WriteTo(output, _repeated_userMusicGame_codec);
      if (RefreshMusicCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(RefreshMusicCount);
      }
      if (money_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userMusicGame_.CalculateSize(_repeated_userMusicGame_codec);
      if (RefreshMusicCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefreshMusicCount);
      }
      if (money_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Money);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshMusicRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userMusicGame_.Add(other.userMusicGame_);
      if (other.RefreshMusicCount != 0) {
        RefreshMusicCount = other.RefreshMusicCount;
      }
      if (other.money_ != null) {
        if (money_ == null) {
          money_ = new global::Com.Proto.UserMoneyPB();
        }
        Money.MergeFrom(other.Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userMusicGame_.AddEntriesFrom(input, _repeated_userMusicGame_codec);
            break;
          }
          case 24: {
            RefreshMusicCount = input.ReadSInt32();
            break;
          }
          case 34: {
            if (money_ == null) {
              money_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(money_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩音游游戏   /musicGameC/playing
  /// </summary>
  public sealed partial class PlayingMusicReq : pb::IMessage<PlayingMusicReq> {
    private static readonly pb::MessageParser<PlayingMusicReq> _parser = new pb::MessageParser<PlayingMusicReq>(() => new PlayingMusicReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayingMusicReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayingMusicReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayingMusicReq(PlayingMusicReq other) : this() {
      activityId_ = other.activityId_;
      cardIds_ = other.cardIds_.Clone();
      diffType_ = other.diffType_;
      musicId_ = other.musicId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayingMusicReq Clone() {
      return new PlayingMusicReq(this);
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///哪个活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///选择了哪些卡牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "diffType" field.</summary>
    public const int DiffTypeFieldNumber = 3;
    private int diffType_;
    /// <summary>
    ///难度选择  1:入门  2:基础 3:进阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiffType {
      get { return diffType_; }
      set {
        diffType_ = value;
      }
    }

    /// <summary>Field number for the "musicId" field.</summary>
    public const int MusicIdFieldNumber = 4;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayingMusicReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayingMusicReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (DiffType != other.DiffType) return false;
      if (MusicId != other.MusicId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      if (DiffType != 0) hash ^= DiffType.GetHashCode();
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (DiffType != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(DiffType);
      }
      if (MusicId != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(MusicId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (DiffType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DiffType);
      }
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayingMusicReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      cardIds_.Add(other.cardIds_);
      if (other.DiffType != 0) {
        DiffType = other.DiffType;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 18:
          case 16: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 24: {
            DiffType = input.ReadSInt32();
            break;
          }
          case 32: {
            MusicId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayingMusicRes : pb::IMessage<PlayingMusicRes> {
    private static readonly pb::MessageParser<PlayingMusicRes> _parser = new pb::MessageParser<PlayingMusicRes>(() => new PlayingMusicRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayingMusicRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayingMusicRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayingMusicRes(PlayingMusicRes other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayingMusicRes Clone() {
      return new PlayingMusicRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayingMusicRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayingMusicRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayingMusicRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///音游游戏结束请求          /musicGameC/endPlaying
  /// </summary>
  public sealed partial class EndPlayingReq : pb::IMessage<EndPlayingReq> {
    private static readonly pb::MessageParser<EndPlayingReq> _parser = new pb::MessageParser<EndPlayingReq>(() => new EndPlayingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndPlayingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndPlayingReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndPlayingReq(EndPlayingReq other) : this() {
      score_ = other.score_;
      musicId_ = other.musicId_;
      activityId_ = other.activityId_;
      diffType_ = other.diffType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndPlayingReq Clone() {
      return new EndPlayingReq(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private long score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "musicId" field.</summary>
    public const int MusicIdFieldNumber = 2;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 3;
    private int activityId_;
    /// <summary>
    ///音乐活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "diffType" field.</summary>
    public const int DiffTypeFieldNumber = 4;
    private int diffType_;
    /// <summary>
    ///难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiffType {
      get { return diffType_; }
      set {
        diffType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndPlayingReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndPlayingReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (MusicId != other.MusicId) return false;
      if (ActivityId != other.ActivityId) return false;
      if (DiffType != other.DiffType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (DiffType != 0) hash ^= DiffType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Score);
      }
      if (MusicId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(MusicId);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ActivityId);
      }
      if (DiffType != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(DiffType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Score);
      }
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (DiffType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DiffType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndPlayingReq other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.DiffType != 0) {
        DiffType = other.DiffType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadSInt64();
            break;
          }
          case 16: {
            MusicId = input.ReadSInt32();
            break;
          }
          case 24: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 32: {
            DiffType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EndPlayingRes : pb::IMessage<EndPlayingRes> {
    private static readonly pb::MessageParser<EndPlayingRes> _parser = new pb::MessageParser<EndPlayingRes>(() => new EndPlayingRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndPlayingRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndPlayingRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndPlayingRes(EndPlayingRes other) : this() {
      ret_ = other.ret_;
      integral_ = other.integral_;
      rating_ = other.rating_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndPlayingRes Clone() {
      return new EndPlayingRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 2;
    private long integral_;
    /// <summary>
    ///当前拥有积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 3;
    private int rating_;
    /// <summary>
    ///评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndPlayingRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndPlayingRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Integral != other.Integral) return false;
      if (Rating != other.Rating) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Integral != 0L) hash ^= Integral.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (Integral != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Integral);
      }
      if (Rating != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Rating);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (Integral != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Integral);
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Rating);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndPlayingRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Integral != 0L) {
        Integral = other.Integral;
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 16: {
            Integral = input.ReadSInt64();
            break;
          }
          case 24: {
            Rating = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打开商店 商店信息   /musicGameC/mall
  /// </summary>
  public sealed partial class MallReq : pb::IMessage<MallReq> {
    private static readonly pb::MessageParser<MallReq> _parser = new pb::MessageParser<MallReq>(() => new MallReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallReq(MallReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallReq Clone() {
      return new MallReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MallReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MallRes : pb::IMessage<MallRes> {
    private static readonly pb::MessageParser<MallRes> _parser = new pb::MessageParser<MallRes>(() => new MallRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MallRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallRes(MallRes other) : this() {
      ret_ = other.ret_;
      info_ = other.info_.Clone();
      refreshMallCount_ = other.refreshMallCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallRes Clone() {
      return new MallRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.ShopInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.ShopInfo.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ShopInfo> info_ = new pbc::RepeatedField<global::Com.Proto.ShopInfo>();
    /// <summary>
    ///商品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ShopInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "refreshMallCount" field.</summary>
    public const int RefreshMallCountFieldNumber = 3;
    private int refreshMallCount_;
    /// <summary>
    ///刷新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshMallCount {
      get { return refreshMallCount_; }
      set {
        refreshMallCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MallRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MallRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!info_.Equals(other.info_)) return false;
      if (RefreshMallCount != other.RefreshMallCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= info_.GetHashCode();
      if (RefreshMallCount != 0) hash ^= RefreshMallCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (RefreshMallCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(RefreshMallCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (RefreshMallCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefreshMallCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MallRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      info_.Add(other.info_);
      if (other.RefreshMallCount != 0) {
        RefreshMallCount = other.RefreshMallCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 24: {
            RefreshMallCount = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopInfo : pb::IMessage<ShopInfo> {
    private static readonly pb::MessageParser<ShopInfo> _parser = new pb::MessageParser<ShopInfo>(() => new ShopInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo(ShopInfo other) : this() {
      slotId_ = other.slotId_;
      shopId_ = other.shopId_;
      buy_ = other.buy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopInfo Clone() {
      return new ShopInfo(this);
    }

    /// <summary>Field number for the "slotId" field.</summary>
    public const int SlotIdFieldNumber = 1;
    private int slotId_;
    /// <summary>
    ///档位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 2;
    private int shopId_;
    /// <summary>
    ///商店商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "buy" field.</summary>
    public const int BuyFieldNumber = 3;
    private bool buy_;
    /// <summary>
    ///是否已购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Buy {
      get { return buy_; }
      set {
        buy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlotId != other.SlotId) return false;
      if (ShopId != other.ShopId) return false;
      if (Buy != other.Buy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SlotId != 0) hash ^= SlotId.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (Buy != false) hash ^= Buy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SlotId);
      }
      if (ShopId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ShopId);
      }
      if (Buy != false) {
        output.WriteRawTag(24);
        output.WriteBool(Buy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SlotId);
      }
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ShopId);
      }
      if (Buy != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopInfo other) {
      if (other == null) {
        return;
      }
      if (other.SlotId != 0) {
        SlotId = other.SlotId;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.Buy != false) {
        Buy = other.Buy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadSInt32();
            break;
          }
          case 16: {
            ShopId = input.ReadSInt32();
            break;
          }
          case 24: {
            Buy = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///刷新商店   /musicGameC/refreshMall
  /// </summary>
  public sealed partial class RefreshMallReq : pb::IMessage<RefreshMallReq> {
    private static readonly pb::MessageParser<RefreshMallReq> _parser = new pb::MessageParser<RefreshMallReq>(() => new RefreshMallReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshMallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMallReq(RefreshMallReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMallReq Clone() {
      return new RefreshMallReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshMallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshMallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshMallReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RefreshMallRes : pb::IMessage<RefreshMallRes> {
    private static readonly pb::MessageParser<RefreshMallRes> _parser = new pb::MessageParser<RefreshMallRes>(() => new RefreshMallRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshMallRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMallRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMallRes(RefreshMallRes other) : this() {
      ret_ = other.ret_;
      info_ = other.info_.Clone();
      refreshMallCount_ = other.refreshMallCount_;
      Money = other.money_ != null ? other.Money.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshMallRes Clone() {
      return new RefreshMallRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.ShopInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.ShopInfo.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ShopInfo> info_ = new pbc::RepeatedField<global::Com.Proto.ShopInfo>();
    /// <summary>
    ///商品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ShopInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "refreshMallCount" field.</summary>
    public const int RefreshMallCountFieldNumber = 3;
    private int refreshMallCount_;
    /// <summary>
    ///刷新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshMallCount {
      get { return refreshMallCount_; }
      set {
        refreshMallCount_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 4;
    private global::Com.Proto.UserMoneyPB money_;
    /// <summary>
    ///同步砖石金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshMallRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshMallRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!info_.Equals(other.info_)) return false;
      if (RefreshMallCount != other.RefreshMallCount) return false;
      if (!object.Equals(Money, other.Money)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= info_.GetHashCode();
      if (RefreshMallCount != 0) hash ^= RefreshMallCount.GetHashCode();
      if (money_ != null) hash ^= Money.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (RefreshMallCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(RefreshMallCount);
      }
      if (money_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (RefreshMallCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefreshMallCount);
      }
      if (money_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Money);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshMallRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      info_.Add(other.info_);
      if (other.RefreshMallCount != 0) {
        RefreshMallCount = other.RefreshMallCount;
      }
      if (other.money_ != null) {
        if (money_ == null) {
          money_ = new global::Com.Proto.UserMoneyPB();
        }
        Money.MergeFrom(other.Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 24: {
            RefreshMallCount = input.ReadSInt32();
            break;
          }
          case 34: {
            if (money_ == null) {
              money_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(money_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买商店物品  /musicGameC/shopping
  /// </summary>
  public sealed partial class ShoppingReq : pb::IMessage<ShoppingReq> {
    private static readonly pb::MessageParser<ShoppingReq> _parser = new pb::MessageParser<ShoppingReq>(() => new ShoppingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingReq(ShoppingReq other) : this() {
      slotId_ = other.slotId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingReq Clone() {
      return new ShoppingReq(this);
    }

    /// <summary>Field number for the "slotId" field.</summary>
    public const int SlotIdFieldNumber = 1;
    private int slotId_;
    /// <summary>
    ///档位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlotId != other.SlotId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SlotId != 0) hash ^= SlotId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SlotId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SlotId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingReq other) {
      if (other == null) {
        return;
      }
      if (other.SlotId != 0) {
        SlotId = other.SlotId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShoppingRes : pb::IMessage<ShoppingRes> {
    private static readonly pb::MessageParser<ShoppingRes> _parser = new pb::MessageParser<ShoppingRes>(() => new ShoppingRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShoppingRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingRes(ShoppingRes other) : this() {
      ret_ = other.ret_;
      integral_ = other.integral_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShoppingRes Clone() {
      return new ShoppingRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "integral" field.</summary>
    public const int IntegralFieldNumber = 2;
    private long integral_;
    /// <summary>
    ///积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Integral {
      get { return integral_; }
      set {
        integral_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///购买的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShoppingRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShoppingRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Integral != other.Integral) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Integral != 0L) hash ^= Integral.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (Integral != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Integral);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (Integral != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Integral);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShoppingRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Integral != 0L) {
        Integral = other.Integral;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 16: {
            Integral = input.ReadSInt64();
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送音游排行  /musicGameC/sendRank
  /// </summary>
  public sealed partial class SendRankReq : pb::IMessage<SendRankReq> {
    private static readonly pb::MessageParser<SendRankReq> _parser = new pb::MessageParser<SendRankReq>(() => new SendRankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRankReq(SendRankReq other) : this() {
      musicId_ = other.musicId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRankReq Clone() {
      return new SendRankReq(this);
    }

    /// <summary>Field number for the "musicId" field.</summary>
    public const int MusicIdFieldNumber = 1;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MusicId != other.MusicId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MusicId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MusicId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRankReq other) {
      if (other == null) {
        return;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MusicId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendRankRes : pb::IMessage<SendRankRes> {
    private static readonly pb::MessageParser<SendRankRes> _parser = new pb::MessageParser<SendRankRes>(() => new SendRankRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRankRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRankRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRankRes(SendRankRes other) : this() {
      ret_ = other.ret_;
      infos_ = other.infos_.Clone();
      myRank_ = other.myRank_;
      myRating_ = other.myRating_;
      myScore_ = other.myScore_;
      musicId_ = other.musicId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRankRes Clone() {
      return new SendRankRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.RankInfoPB> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.RankInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.RankInfoPB> infos_ = new pbc::RepeatedField<global::Com.Proto.RankInfoPB>();
    /// <summary>
    ///排行帮信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.RankInfoPB> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 3;
    private int myRank_;
    /// <summary>
    ///我的排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "myRating" field.</summary>
    public const int MyRatingFieldNumber = 4;
    private int myRating_;
    /// <summary>
    ///我的评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyRating {
      get { return myRating_; }
      set {
        myRating_ = value;
      }
    }

    /// <summary>Field number for the "myScore" field.</summary>
    public const int MyScoreFieldNumber = 5;
    private long myScore_;
    /// <summary>
    ///我的分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MyScore {
      get { return myScore_; }
      set {
        myScore_ = value;
      }
    }

    /// <summary>Field number for the "musicId" field.</summary>
    public const int MusicIdFieldNumber = 6;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRankRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRankRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if (MyRank != other.MyRank) return false;
      if (MyRating != other.MyRating) return false;
      if (MyScore != other.MyScore) return false;
      if (MusicId != other.MusicId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (MyRank != 0) hash ^= MyRank.GetHashCode();
      if (MyRating != 0) hash ^= MyRating.GetHashCode();
      if (MyScore != 0L) hash ^= MyScore.GetHashCode();
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (MyRank != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(MyRank);
      }
      if (MyRating != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(MyRating);
      }
      if (MyScore != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(MyScore);
      }
      if (MusicId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(MusicId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MyRank);
      }
      if (MyRating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MyRating);
      }
      if (MyScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MyScore);
      }
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRankRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      infos_.Add(other.infos_);
      if (other.MyRank != 0) {
        MyRank = other.MyRank;
      }
      if (other.MyRating != 0) {
        MyRating = other.MyRating;
      }
      if (other.MyScore != 0L) {
        MyScore = other.MyScore;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 24: {
            MyRank = input.ReadSInt32();
            break;
          }
          case 32: {
            MyRating = input.ReadSInt32();
            break;
          }
          case 40: {
            MyScore = input.ReadSInt64();
            break;
          }
          case 48: {
            MusicId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankInfoPB : pb::IMessage<RankInfoPB> {
    private static readonly pb::MessageParser<RankInfoPB> _parser = new pb::MessageParser<RankInfoPB>(() => new RankInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerMusicGameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoPB(RankInfoPB other) : this() {
      userId_ = other.userId_;
      useIcon_ = other.useIcon_;
      useName_ = other.useName_;
      rating_ = other.rating_;
      score_ = other.score_;
      ranking_ = other.ranking_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoPB Clone() {
      return new RankInfoPB(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "useIcon" field.</summary>
    public const int UseIconFieldNumber = 2;
    private string useIcon_ = "";
    /// <summary>
    ///玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseIcon {
      get { return useIcon_; }
      set {
        useIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "useName" field.</summary>
    public const int UseNameFieldNumber = 3;
    private string useName_ = "";
    /// <summary>
    ///玩家姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseName {
      get { return useName_; }
      set {
        useName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 4;
    private int rating_;
    /// <summary>
    ///玩家评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private long score_;
    /// <summary>
    ///玩家分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "ranking" field.</summary>
    public const int RankingFieldNumber = 6;
    private int ranking_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ranking {
      get { return ranking_; }
      set {
        ranking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UseIcon != other.UseIcon) return false;
      if (UseName != other.UseName) return false;
      if (Rating != other.Rating) return false;
      if (Score != other.Score) return false;
      if (Ranking != other.Ranking) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (UseIcon.Length != 0) hash ^= UseIcon.GetHashCode();
      if (UseName.Length != 0) hash ^= UseName.GetHashCode();
      if (Rating != 0) hash ^= Rating.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (Ranking != 0) hash ^= Ranking.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserId);
      }
      if (UseIcon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UseIcon);
      }
      if (UseName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UseName);
      }
      if (Rating != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Rating);
      }
      if (Score != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(Score);
      }
      if (Ranking != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Ranking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserId);
      }
      if (UseIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UseIcon);
      }
      if (UseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UseName);
      }
      if (Rating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Rating);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Score);
      }
      if (Ranking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ranking);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.UseIcon.Length != 0) {
        UseIcon = other.UseIcon;
      }
      if (other.UseName.Length != 0) {
        UseName = other.UseName;
      }
      if (other.Rating != 0) {
        Rating = other.Rating;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.Ranking != 0) {
        Ranking = other.Ranking;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt32();
            break;
          }
          case 18: {
            UseIcon = input.ReadString();
            break;
          }
          case 26: {
            UseName = input.ReadString();
            break;
          }
          case 32: {
            Rating = input.ReadSInt32();
            break;
          }
          case 40: {
            Score = input.ReadSInt64();
            break;
          }
          case 48: {
            Ranking = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
