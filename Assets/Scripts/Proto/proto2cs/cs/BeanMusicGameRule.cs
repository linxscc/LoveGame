// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_music_game_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_music_game_rule.proto</summary>
  public static partial class BeanMusicGameRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_music_game_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanMusicGameRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpiZWFuX211c2ljX2dhbWVfcnVsZS5wcm90bxIJY29tLnByb3RvGgpiYXNl",
            "LnByb3RvGhBiZWFuX2F3YXJkLnByb3RvIpcBChRDaGFsbGVuZ2VNdXNpY0Rh",
            "dGFQQhIYChBtdXNpY19jaGFwdGVyX2lkGAEgASgREhUKDWFjdGl2aXR5X3R5",
            "cGUYAiABKBESEgoKbXVzaWNfbmFtZRgDIAEoCRINCgVzY29yZRgEIAEoERIT",
            "CgtuZWVkU3Rhck51bRgFIAEoERIWCg5uZWVkQWJpbGl0eU51bRgGIAEoESKK",
            "AQoKTWFsbEluZm9QQhIPCgdzaG9wX2lkGAEgASgREhEKCXNob3BfbmFtZRgC",
            "IAEoCRINCgVwcmljZRgDIAEoERIiCgZhd2FyZHMYBCADKAsyEi5jb20ucHJv",
            "dG8uQXdhcmRQQhIPCgdzbG90X2lkGAUgASgREhQKDGdvb2RzX3N3aXRjaBgG",
            "IAEoCCJ6Cg1SZWZyZXNoRGF0YVBCEhQKDHJlZnJlc2hfdHlwZRgBIAEoERIV",
            "Cg1yZWZyZXNoX3RpbWVzGAIgASgREhUKDXJlc291cmNlX3R5cGUYAyABKBES",
            "FAoMcmVzb3VyY2VfbnVtGAQgASgREg8KB2NhcHBpbmcYBSABKAgirgEKEE11",
            "c2ljR2FtZVNjb3JlUEISEAoIbXVzaWNfaWQYASABKBESJwoJZGlmZl90eXBl",
            "GAIgASgOMhQuTXVzaWNHYW1lRGlmZlR5cGVQQhIPCgdTU19yYW5rGAMgASgR",
            "Eg4KBlNfcmFuaxgEIAEoERIOCgZBX3JhbmsYBSABKBESDgoGQl9yYW5rGAYg",
            "ASgREg4KBkNfcmFuaxgHIAEoERIOCgZEX3JhbmsYCCABKBEiMwoLTXVzaWNJ",
            "bmZvUEISEAoIbXVzaWNfaWQYASABKBESEgoKbXVzaWNfbmFtZRgCIAEoCSJh",
            "ChBKdWRnZU11c2ljRGF0YVBCEhEKCW9wZXJhdGlvbhgBIAEoCRIVCg1jbGlj",
            "a09uQmVmb3JlGAIgASgCEhQKDGNsaWNrT25BZnRlchgDIAEoAhINCgVzY29y",
            "ZRgEIAEoESIaCgdDb21ib1BCEg8KB2NsaWNrT24YASABKAVCNgofbmV0Lmdh",
            "bGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEITTXVzaWNHYW1lUnVsZVByb3Rv",
            "c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChallengeMusicDataPB), global::Com.Proto.ChallengeMusicDataPB.Parser, new[]{ "MusicChapterId", "ActivityType", "MusicName", "Score", "NeedStarNum", "NeedAbilityNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MallInfoPB), global::Com.Proto.MallInfoPB.Parser, new[]{ "ShopId", "ShopName", "Price", "Awards", "SlotId", "GoodsSwitch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.RefreshDataPB), global::Com.Proto.RefreshDataPB.Parser, new[]{ "RefreshType", "RefreshTimes", "ResourceType", "ResourceNum", "Capping" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MusicGameScorePB), global::Com.Proto.MusicGameScorePB.Parser, new[]{ "MusicId", "DiffType", "SSRank", "SRank", "ARank", "BRank", "CRank", "DRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MusicInfoPB), global::Com.Proto.MusicInfoPB.Parser, new[]{ "MusicId", "MusicName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.JudgeMusicDataPB), global::Com.Proto.JudgeMusicDataPB.Parser, new[]{ "Operation", "ClickOnBefore", "ClickOnAfter", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ComboPB), global::Com.Proto.ComboPB.Parser, new[]{ "ClickOn" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChallengeMusicDataPB : pb::IMessage<ChallengeMusicDataPB> {
    private static readonly pb::MessageParser<ChallengeMusicDataPB> _parser = new pb::MessageParser<ChallengeMusicDataPB>(() => new ChallengeMusicDataPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeMusicDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeMusicDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeMusicDataPB(ChallengeMusicDataPB other) : this() {
      musicChapterId_ = other.musicChapterId_;
      activityType_ = other.activityType_;
      musicName_ = other.musicName_;
      score_ = other.score_;
      needStarNum_ = other.needStarNum_;
      needAbilityNum_ = other.needAbilityNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeMusicDataPB Clone() {
      return new ChallengeMusicDataPB(this);
    }

    /// <summary>Field number for the "music_chapter_id" field.</summary>
    public const int MusicChapterIdFieldNumber = 1;
    private int musicChapterId_;
    /// <summary>
    ///歌曲活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicChapterId {
      get { return musicChapterId_; }
      set {
        musicChapterId_ = value;
      }
    }

    /// <summary>Field number for the "activity_type" field.</summary>
    public const int ActivityTypeFieldNumber = 2;
    private int activityType_;
    /// <summary>
    ///歌曲活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "music_name" field.</summary>
    public const int MusicNameFieldNumber = 3;
    private string musicName_ = "";
    /// <summary>
    ///歌曲活动名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicName {
      get { return musicName_; }
      set {
        musicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    /// <summary>
    ///奖励积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "needStarNum" field.</summary>
    public const int NeedStarNumFieldNumber = 5;
    private int needStarNum_;
    /// <summary>
    ///要求的星愿数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedStarNum {
      get { return needStarNum_; }
      set {
        needStarNum_ = value;
      }
    }

    /// <summary>Field number for the "needAbilityNum" field.</summary>
    public const int NeedAbilityNumFieldNumber = 6;
    private int needAbilityNum_;
    /// <summary>
    ///要求星愿能力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedAbilityNum {
      get { return needAbilityNum_; }
      set {
        needAbilityNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeMusicDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeMusicDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MusicChapterId != other.MusicChapterId) return false;
      if (ActivityType != other.ActivityType) return false;
      if (MusicName != other.MusicName) return false;
      if (Score != other.Score) return false;
      if (NeedStarNum != other.NeedStarNum) return false;
      if (NeedAbilityNum != other.NeedAbilityNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MusicChapterId != 0) hash ^= MusicChapterId.GetHashCode();
      if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
      if (MusicName.Length != 0) hash ^= MusicName.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (NeedStarNum != 0) hash ^= NeedStarNum.GetHashCode();
      if (NeedAbilityNum != 0) hash ^= NeedAbilityNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MusicChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MusicChapterId);
      }
      if (ActivityType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ActivityType);
      }
      if (MusicName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MusicName);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Score);
      }
      if (NeedStarNum != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(NeedStarNum);
      }
      if (NeedAbilityNum != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(NeedAbilityNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MusicChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicChapterId);
      }
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityType);
      }
      if (MusicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MusicName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Score);
      }
      if (NeedStarNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NeedStarNum);
      }
      if (NeedAbilityNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NeedAbilityNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeMusicDataPB other) {
      if (other == null) {
        return;
      }
      if (other.MusicChapterId != 0) {
        MusicChapterId = other.MusicChapterId;
      }
      if (other.ActivityType != 0) {
        ActivityType = other.ActivityType;
      }
      if (other.MusicName.Length != 0) {
        MusicName = other.MusicName;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.NeedStarNum != 0) {
        NeedStarNum = other.NeedStarNum;
      }
      if (other.NeedAbilityNum != 0) {
        NeedAbilityNum = other.NeedAbilityNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MusicChapterId = input.ReadSInt32();
            break;
          }
          case 16: {
            ActivityType = input.ReadSInt32();
            break;
          }
          case 26: {
            MusicName = input.ReadString();
            break;
          }
          case 32: {
            Score = input.ReadSInt32();
            break;
          }
          case 40: {
            NeedStarNum = input.ReadSInt32();
            break;
          }
          case 48: {
            NeedAbilityNum = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MallInfoPB : pb::IMessage<MallInfoPB> {
    private static readonly pb::MessageParser<MallInfoPB> _parser = new pb::MessageParser<MallInfoPB>(() => new MallInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MallInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallInfoPB(MallInfoPB other) : this() {
      shopId_ = other.shopId_;
      shopName_ = other.shopName_;
      price_ = other.price_;
      awards_ = other.awards_.Clone();
      slotId_ = other.slotId_;
      goodsSwitch_ = other.goodsSwitch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MallInfoPB Clone() {
      return new MallInfoPB(this);
    }

    /// <summary>Field number for the "shop_id" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    /// <summary>
    ///商城商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "shop_name" field.</summary>
    public const int ShopNameFieldNumber = 2;
    private string shopName_ = "";
    /// <summary>
    ///商品名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShopName {
      get { return shopName_; }
      set {
        shopName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private int price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 5;
    private int slotId_;
    /// <summary>
    ///排序id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "goods_switch" field.</summary>
    public const int GoodsSwitchFieldNumber = 6;
    private bool goodsSwitch_;
    /// <summary>
    ///商品开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GoodsSwitch {
      get { return goodsSwitch_; }
      set {
        goodsSwitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MallInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MallInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShopId != other.ShopId) return false;
      if (ShopName != other.ShopName) return false;
      if (Price != other.Price) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (SlotId != other.SlotId) return false;
      if (GoodsSwitch != other.GoodsSwitch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      if (ShopName.Length != 0) hash ^= ShopName.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (SlotId != 0) hash ^= SlotId.GetHashCode();
      if (GoodsSwitch != false) hash ^= GoodsSwitch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ShopId);
      }
      if (ShopName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShopName);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Price);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (SlotId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(SlotId);
      }
      if (GoodsSwitch != false) {
        output.WriteRawTag(48);
        output.WriteBool(GoodsSwitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ShopId);
      }
      if (ShopName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopName);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Price);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SlotId);
      }
      if (GoodsSwitch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MallInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      if (other.ShopName.Length != 0) {
        ShopName = other.ShopName;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      awards_.Add(other.awards_);
      if (other.SlotId != 0) {
        SlotId = other.SlotId;
      }
      if (other.GoodsSwitch != false) {
        GoodsSwitch = other.GoodsSwitch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadSInt32();
            break;
          }
          case 18: {
            ShopName = input.ReadString();
            break;
          }
          case 24: {
            Price = input.ReadSInt32();
            break;
          }
          case 34: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 40: {
            SlotId = input.ReadSInt32();
            break;
          }
          case 48: {
            GoodsSwitch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RefreshDataPB : pb::IMessage<RefreshDataPB> {
    private static readonly pb::MessageParser<RefreshDataPB> _parser = new pb::MessageParser<RefreshDataPB>(() => new RefreshDataPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDataPB(RefreshDataPB other) : this() {
      refreshType_ = other.refreshType_;
      refreshTimes_ = other.refreshTimes_;
      resourceType_ = other.resourceType_;
      resourceNum_ = other.resourceNum_;
      capping_ = other.capping_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDataPB Clone() {
      return new RefreshDataPB(this);
    }

    /// <summary>Field number for the "refresh_type" field.</summary>
    public const int RefreshTypeFieldNumber = 1;
    private int refreshType_;
    /// <summary>
    ///刷新类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshType {
      get { return refreshType_; }
      set {
        refreshType_ = value;
      }
    }

    /// <summary>Field number for the "refresh_times" field.</summary>
    public const int RefreshTimesFieldNumber = 2;
    private int refreshTimes_;
    /// <summary>
    ///刷新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTimes {
      get { return refreshTimes_; }
      set {
        refreshTimes_ = value;
      }
    }

    /// <summary>Field number for the "resource_type" field.</summary>
    public const int ResourceTypeFieldNumber = 3;
    private int resourceType_;
    /// <summary>
    ///消耗资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = value;
      }
    }

    /// <summary>Field number for the "resource_num" field.</summary>
    public const int ResourceNumFieldNumber = 4;
    private int resourceNum_;
    /// <summary>
    ///消耗资源数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceNum {
      get { return resourceNum_; }
      set {
        resourceNum_ = value;
      }
    }

    /// <summary>Field number for the "capping" field.</summary>
    public const int CappingFieldNumber = 5;
    private bool capping_;
    /// <summary>
    ///是否封顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Capping {
      get { return capping_; }
      set {
        capping_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshType != other.RefreshType) return false;
      if (RefreshTimes != other.RefreshTimes) return false;
      if (ResourceType != other.ResourceType) return false;
      if (ResourceNum != other.ResourceNum) return false;
      if (Capping != other.Capping) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefreshType != 0) hash ^= RefreshType.GetHashCode();
      if (RefreshTimes != 0) hash ^= RefreshTimes.GetHashCode();
      if (ResourceType != 0) hash ^= ResourceType.GetHashCode();
      if (ResourceNum != 0) hash ^= ResourceNum.GetHashCode();
      if (Capping != false) hash ^= Capping.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(RefreshType);
      }
      if (RefreshTimes != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(RefreshTimes);
      }
      if (ResourceType != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ResourceType);
      }
      if (ResourceNum != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(ResourceNum);
      }
      if (Capping != false) {
        output.WriteRawTag(40);
        output.WriteBool(Capping);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefreshType);
      }
      if (RefreshTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefreshTimes);
      }
      if (ResourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResourceType);
      }
      if (ResourceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResourceNum);
      }
      if (Capping != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshDataPB other) {
      if (other == null) {
        return;
      }
      if (other.RefreshType != 0) {
        RefreshType = other.RefreshType;
      }
      if (other.RefreshTimes != 0) {
        RefreshTimes = other.RefreshTimes;
      }
      if (other.ResourceType != 0) {
        ResourceType = other.ResourceType;
      }
      if (other.ResourceNum != 0) {
        ResourceNum = other.ResourceNum;
      }
      if (other.Capping != false) {
        Capping = other.Capping;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RefreshType = input.ReadSInt32();
            break;
          }
          case 16: {
            RefreshTimes = input.ReadSInt32();
            break;
          }
          case 24: {
            ResourceType = input.ReadSInt32();
            break;
          }
          case 32: {
            ResourceNum = input.ReadSInt32();
            break;
          }
          case 40: {
            Capping = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MusicGameScorePB : pb::IMessage<MusicGameScorePB> {
    private static readonly pb::MessageParser<MusicGameScorePB> _parser = new pb::MessageParser<MusicGameScorePB>(() => new MusicGameScorePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MusicGameScorePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicGameScorePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicGameScorePB(MusicGameScorePB other) : this() {
      musicId_ = other.musicId_;
      diffType_ = other.diffType_;
      sSRank_ = other.sSRank_;
      sRank_ = other.sRank_;
      aRank_ = other.aRank_;
      bRank_ = other.bRank_;
      cRank_ = other.cRank_;
      dRank_ = other.dRank_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicGameScorePB Clone() {
      return new MusicGameScorePB(this);
    }

    /// <summary>Field number for the "music_id" field.</summary>
    public const int MusicIdFieldNumber = 1;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    /// <summary>Field number for the "diff_type" field.</summary>
    public const int DiffTypeFieldNumber = 2;
    private global::MusicGameDiffTypePB diffType_ = 0;
    /// <summary>
    ///难度类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MusicGameDiffTypePB DiffType {
      get { return diffType_; }
      set {
        diffType_ = value;
      }
    }

    /// <summary>Field number for the "SS_rank" field.</summary>
    public const int SSRankFieldNumber = 3;
    private int sSRank_;
    /// <summary>
    ///ss  rank分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SSRank {
      get { return sSRank_; }
      set {
        sSRank_ = value;
      }
    }

    /// <summary>Field number for the "S_rank" field.</summary>
    public const int SRankFieldNumber = 4;
    private int sRank_;
    /// <summary>
    ///s rank分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SRank {
      get { return sRank_; }
      set {
        sRank_ = value;
      }
    }

    /// <summary>Field number for the "A_rank" field.</summary>
    public const int ARankFieldNumber = 5;
    private int aRank_;
    /// <summary>
    ///a rank分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ARank {
      get { return aRank_; }
      set {
        aRank_ = value;
      }
    }

    /// <summary>Field number for the "B_rank" field.</summary>
    public const int BRankFieldNumber = 6;
    private int bRank_;
    /// <summary>
    ///b rank分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BRank {
      get { return bRank_; }
      set {
        bRank_ = value;
      }
    }

    /// <summary>Field number for the "C_rank" field.</summary>
    public const int CRankFieldNumber = 7;
    private int cRank_;
    /// <summary>
    ///c rank分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CRank {
      get { return cRank_; }
      set {
        cRank_ = value;
      }
    }

    /// <summary>Field number for the "D_rank" field.</summary>
    public const int DRankFieldNumber = 8;
    private int dRank_;
    /// <summary>
    ///d rank分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DRank {
      get { return dRank_; }
      set {
        dRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MusicGameScorePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MusicGameScorePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MusicId != other.MusicId) return false;
      if (DiffType != other.DiffType) return false;
      if (SSRank != other.SSRank) return false;
      if (SRank != other.SRank) return false;
      if (ARank != other.ARank) return false;
      if (BRank != other.BRank) return false;
      if (CRank != other.CRank) return false;
      if (DRank != other.DRank) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      if (DiffType != 0) hash ^= DiffType.GetHashCode();
      if (SSRank != 0) hash ^= SSRank.GetHashCode();
      if (SRank != 0) hash ^= SRank.GetHashCode();
      if (ARank != 0) hash ^= ARank.GetHashCode();
      if (BRank != 0) hash ^= BRank.GetHashCode();
      if (CRank != 0) hash ^= CRank.GetHashCode();
      if (DRank != 0) hash ^= DRank.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MusicId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MusicId);
      }
      if (DiffType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DiffType);
      }
      if (SSRank != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(SSRank);
      }
      if (SRank != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(SRank);
      }
      if (ARank != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(ARank);
      }
      if (BRank != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(BRank);
      }
      if (CRank != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(CRank);
      }
      if (DRank != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(DRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      if (DiffType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiffType);
      }
      if (SSRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SSRank);
      }
      if (SRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SRank);
      }
      if (ARank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ARank);
      }
      if (BRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BRank);
      }
      if (CRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CRank);
      }
      if (DRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MusicGameScorePB other) {
      if (other == null) {
        return;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
      if (other.DiffType != 0) {
        DiffType = other.DiffType;
      }
      if (other.SSRank != 0) {
        SSRank = other.SSRank;
      }
      if (other.SRank != 0) {
        SRank = other.SRank;
      }
      if (other.ARank != 0) {
        ARank = other.ARank;
      }
      if (other.BRank != 0) {
        BRank = other.BRank;
      }
      if (other.CRank != 0) {
        CRank = other.CRank;
      }
      if (other.DRank != 0) {
        DRank = other.DRank;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MusicId = input.ReadSInt32();
            break;
          }
          case 16: {
            diffType_ = (global::MusicGameDiffTypePB) input.ReadEnum();
            break;
          }
          case 24: {
            SSRank = input.ReadSInt32();
            break;
          }
          case 32: {
            SRank = input.ReadSInt32();
            break;
          }
          case 40: {
            ARank = input.ReadSInt32();
            break;
          }
          case 48: {
            BRank = input.ReadSInt32();
            break;
          }
          case 56: {
            CRank = input.ReadSInt32();
            break;
          }
          case 64: {
            DRank = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MusicInfoPB : pb::IMessage<MusicInfoPB> {
    private static readonly pb::MessageParser<MusicInfoPB> _parser = new pb::MessageParser<MusicInfoPB>(() => new MusicInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MusicInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicInfoPB(MusicInfoPB other) : this() {
      musicId_ = other.musicId_;
      musicName_ = other.musicName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicInfoPB Clone() {
      return new MusicInfoPB(this);
    }

    /// <summary>Field number for the "music_id" field.</summary>
    public const int MusicIdFieldNumber = 1;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    /// <summary>Field number for the "music_name" field.</summary>
    public const int MusicNameFieldNumber = 2;
    private string musicName_ = "";
    /// <summary>
    ///音乐名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicName {
      get { return musicName_; }
      set {
        musicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MusicInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MusicInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MusicId != other.MusicId) return false;
      if (MusicName != other.MusicName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      if (MusicName.Length != 0) hash ^= MusicName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MusicId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MusicId);
      }
      if (MusicName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MusicName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      if (MusicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MusicName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MusicInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
      if (other.MusicName.Length != 0) {
        MusicName = other.MusicName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MusicId = input.ReadSInt32();
            break;
          }
          case 18: {
            MusicName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JudgeMusicDataPB : pb::IMessage<JudgeMusicDataPB> {
    private static readonly pb::MessageParser<JudgeMusicDataPB> _parser = new pb::MessageParser<JudgeMusicDataPB>(() => new JudgeMusicDataPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JudgeMusicDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeMusicDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeMusicDataPB(JudgeMusicDataPB other) : this() {
      operation_ = other.operation_;
      clickOnBefore_ = other.clickOnBefore_;
      clickOnAfter_ = other.clickOnAfter_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JudgeMusicDataPB Clone() {
      return new JudgeMusicDataPB(this);
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 1;
    private string operation_ = "";
    /// <summary>
    ///操作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Operation {
      get { return operation_; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clickOnBefore" field.</summary>
    public const int ClickOnBeforeFieldNumber = 2;
    private float clickOnBefore_;
    /// <summary>
    ///提前点击判定范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClickOnBefore {
      get { return clickOnBefore_; }
      set {
        clickOnBefore_ = value;
      }
    }

    /// <summary>Field number for the "clickOnAfter" field.</summary>
    public const int ClickOnAfterFieldNumber = 3;
    private float clickOnAfter_;
    /// <summary>
    ///滞后点击判定范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClickOnAfter {
      get { return clickOnAfter_; }
      set {
        clickOnAfter_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JudgeMusicDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JudgeMusicDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operation != other.Operation) return false;
      if (ClickOnBefore != other.ClickOnBefore) return false;
      if (ClickOnAfter != other.ClickOnAfter) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operation.Length != 0) hash ^= Operation.GetHashCode();
      if (ClickOnBefore != 0F) hash ^= ClickOnBefore.GetHashCode();
      if (ClickOnAfter != 0F) hash ^= ClickOnAfter.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Operation);
      }
      if (ClickOnBefore != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ClickOnBefore);
      }
      if (ClickOnAfter != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ClickOnAfter);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Operation);
      }
      if (ClickOnBefore != 0F) {
        size += 1 + 4;
      }
      if (ClickOnAfter != 0F) {
        size += 1 + 4;
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JudgeMusicDataPB other) {
      if (other == null) {
        return;
      }
      if (other.Operation.Length != 0) {
        Operation = other.Operation;
      }
      if (other.ClickOnBefore != 0F) {
        ClickOnBefore = other.ClickOnBefore;
      }
      if (other.ClickOnAfter != 0F) {
        ClickOnAfter = other.ClickOnAfter;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Operation = input.ReadString();
            break;
          }
          case 21: {
            ClickOnBefore = input.ReadFloat();
            break;
          }
          case 29: {
            ClickOnAfter = input.ReadFloat();
            break;
          }
          case 32: {
            Score = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComboPB : pb::IMessage<ComboPB> {
    private static readonly pb::MessageParser<ComboPB> _parser = new pb::MessageParser<ComboPB>(() => new ComboPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComboPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMusicGameRuleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComboPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComboPB(ComboPB other) : this() {
      clickOn_ = other.clickOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComboPB Clone() {
      return new ComboPB(this);
    }

    /// <summary>Field number for the "clickOn" field.</summary>
    public const int ClickOnFieldNumber = 1;
    private int clickOn_;
    /// <summary>
    ///连击数里程碑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClickOn {
      get { return clickOn_; }
      set {
        clickOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComboPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComboPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClickOn != other.ClickOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClickOn != 0) hash ^= ClickOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClickOn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClickOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClickOn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClickOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComboPB other) {
      if (other == null) {
        return;
      }
      if (other.ClickOn != 0) {
        ClickOn = other.ClickOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClickOn = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
