// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_user_activity_level_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_user_activity_level_info.proto</summary>
  public static partial class BeanUserActivityLevelInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_user_activity_level_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanUserActivityLevelInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNiZWFuX3VzZXJfYWN0aXZpdHlfbGV2ZWxfaW5mby5wcm90bxIJY29tLnBy",
            "b3RvGgpiYXNlLnByb3RvGhBiZWFuX2F3YXJkLnByb3RvIpcBChdVc2VyQWN0",
            "aXZpdHlMZXZlbEluZm9QQhIQCghsZXZlbF9pZBgBIAEoERIMCgRzdGFyGAIg",
            "ASgREhEKCWJ1eV9jb3VudBgDIAEoERINCgVjb3VudBgEIAEoERIRCgltYXhf",
            "c2NvcmUYBSABKBESEgoKcmVzZXRfdGltZRgGIAEoEhITCgthY3Rpdml0eV9p",
            "ZBgHIAEoEUI+Ch9uZXQuZ2FsYXNwb3J0cy5iaWdzdGFyLnByb3RvY29sQhtV",
            "c2VyQWN0aXZpdHlMZXZlbEluZm9Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserActivityLevelInfoPB), global::Com.Proto.UserActivityLevelInfoPB.Parser, new[]{ "LevelId", "Star", "BuyCount", "Count", "MaxScore", "ResetTime", "ActivityId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserActivityLevelInfoPB : pb::IMessage<UserActivityLevelInfoPB> {
    private static readonly pb::MessageParser<UserActivityLevelInfoPB> _parser = new pb::MessageParser<UserActivityLevelInfoPB>(() => new UserActivityLevelInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivityLevelInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserActivityLevelInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityLevelInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityLevelInfoPB(UserActivityLevelInfoPB other) : this() {
      levelId_ = other.levelId_;
      star_ = other.star_;
      buyCount_ = other.buyCount_;
      count_ = other.count_;
      maxScore_ = other.maxScore_;
      resetTime_ = other.resetTime_;
      activityId_ = other.activityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityLevelInfoPB Clone() {
      return new UserActivityLevelInfoPB(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    /// <summary>
    ///星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "buy_count" field.</summary>
    public const int BuyCountFieldNumber = 3;
    private int buyCount_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    /// <summary>
    ///挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 5;
    private int maxScore_;
    /// <summary>
    ///历史最高分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "reset_time" field.</summary>
    public const int ResetTimeFieldNumber = 6;
    private long resetTime_;
    /// <summary>
    ///当天刷的次数重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 7;
    private int activityId_;
    /// <summary>
    ///活动Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivityLevelInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivityLevelInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if (Star != other.Star) return false;
      if (BuyCount != other.BuyCount) return false;
      if (Count != other.Count) return false;
      if (MaxScore != other.MaxScore) return false;
      if (ResetTime != other.ResetTime) return false;
      if (ActivityId != other.ActivityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (BuyCount != 0) hash ^= BuyCount.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (MaxScore != 0) hash ^= MaxScore.GetHashCode();
      if (ResetTime != 0L) hash ^= ResetTime.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Star);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(BuyCount);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Count);
      }
      if (MaxScore != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(MaxScore);
      }
      if (ResetTime != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(ResetTime);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Star);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BuyCount);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Count);
      }
      if (MaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MaxScore);
      }
      if (ResetTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ResetTime);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivityLevelInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.BuyCount != 0) {
        BuyCount = other.BuyCount;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.MaxScore != 0) {
        MaxScore = other.MaxScore;
      }
      if (other.ResetTime != 0L) {
        ResetTime = other.ResetTime;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 16: {
            Star = input.ReadSInt32();
            break;
          }
          case 24: {
            BuyCount = input.ReadSInt32();
            break;
          }
          case 32: {
            Count = input.ReadSInt32();
            break;
          }
          case 40: {
            MaxScore = input.ReadSInt32();
            break;
          }
          case 48: {
            ResetTime = input.ReadSInt64();
            break;
          }
          case 56: {
            ActivityId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
