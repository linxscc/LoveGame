// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_activity_optional_award_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_activity_optional_award_rule.proto</summary>
  public static partial class BeanActivityOptionalAwardRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_activity_optional_award_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanActivityOptionalAwardRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidiZWFuX2FjdGl2aXR5X29wdGlvbmFsX2F3YXJkX3J1bGUucHJvdG8SCWNv",
            "bS5wcm90bxoKYmFzZS5wcm90bxoQYmVhbl9hd2FyZC5wcm90byLfAQobQWN0",
            "aXZpdHlPcHRpb25hbEF3YXJkUnVsZVBCEhMKC2FjdGl2aXR5X2lkGAEgASgR",
            "EgoKAmlkGAIgASgREjcKFm9wdGlvbmFsX2FjdGl2aXR5X3R5cGUYAyABKA4y",
            "Fy5PcHRpb25hbEFjdGl2aXR5VHlwZVBCEhEKCWlzX3NlbGVjdBgEIAEoERIn",
            "CgtmaXhlZF9hd2FyZBgFIAMoCzISLmNvbS5wcm90by5Bd2FyZFBCEioKDm9w",
            "dGlvbmFsX2F3YXJkGAYgAygLMhIuY29tLnByb3RvLkF3YXJkUEJCQgofbmV0",
            "LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIfQWN0aXZpdHlPcHRpb25h",
            "bEF3YXJkUnVsZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityOptionalAwardRulePB), global::Com.Proto.ActivityOptionalAwardRulePB.Parser, new[]{ "ActivityId", "Id", "OptionalActivityType", "IsSelect", "FixedAward", "OptionalAward" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///ActivityOptionalAwardRulePB ActivityOptionalAwardRule
  /// </summary>
  public sealed partial class ActivityOptionalAwardRulePB : pb::IMessage<ActivityOptionalAwardRulePB> {
    private static readonly pb::MessageParser<ActivityOptionalAwardRulePB> _parser = new pb::MessageParser<ActivityOptionalAwardRulePB>(() => new ActivityOptionalAwardRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityOptionalAwardRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityOptionalAwardRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityOptionalAwardRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityOptionalAwardRulePB(ActivityOptionalAwardRulePB other) : this() {
      activityId_ = other.activityId_;
      id_ = other.id_;
      optionalActivityType_ = other.optionalActivityType_;
      isSelect_ = other.isSelect_;
      fixedAward_ = other.fixedAward_.Clone();
      optionalAward_ = other.optionalAward_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityOptionalAwardRulePB Clone() {
      return new ActivityOptionalAwardRulePB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    ///活动具体id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "optional_activity_type" field.</summary>
    public const int OptionalActivityTypeFieldNumber = 3;
    private global::OptionalActivityTypePB optionalActivityType_ = 0;
    /// <summary>
    ///可选择活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OptionalActivityTypePB OptionalActivityType {
      get { return optionalActivityType_; }
      set {
        optionalActivityType_ = value;
      }
    }

    /// <summary>Field number for the "is_select" field.</summary>
    public const int IsSelectFieldNumber = 4;
    private int isSelect_;
    /// <summary>
    ///是否选择(0否1是)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSelect {
      get { return isSelect_; }
      set {
        isSelect_ = value;
      }
    }

    /// <summary>Field number for the "fixed_award" field.</summary>
    public const int FixedAwardFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_fixedAward_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> fixedAward_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///固定奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> FixedAward {
      get { return fixedAward_; }
    }

    /// <summary>Field number for the "optional_award" field.</summary>
    public const int OptionalAwardFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_optionalAward_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> optionalAward_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///可选择奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> OptionalAward {
      get { return optionalAward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityOptionalAwardRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityOptionalAwardRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (Id != other.Id) return false;
      if (OptionalActivityType != other.OptionalActivityType) return false;
      if (IsSelect != other.IsSelect) return false;
      if(!fixedAward_.Equals(other.fixedAward_)) return false;
      if(!optionalAward_.Equals(other.optionalAward_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (OptionalActivityType != 0) hash ^= OptionalActivityType.GetHashCode();
      if (IsSelect != 0) hash ^= IsSelect.GetHashCode();
      hash ^= fixedAward_.GetHashCode();
      hash ^= optionalAward_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Id);
      }
      if (OptionalActivityType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OptionalActivityType);
      }
      if (IsSelect != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(IsSelect);
      }
      fixedAward_.WriteTo(output, _repeated_fixedAward_codec);
      optionalAward_.WriteTo(output, _repeated_optionalAward_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (OptionalActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OptionalActivityType);
      }
      if (IsSelect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsSelect);
      }
      size += fixedAward_.CalculateSize(_repeated_fixedAward_codec);
      size += optionalAward_.CalculateSize(_repeated_optionalAward_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityOptionalAwardRulePB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.OptionalActivityType != 0) {
        OptionalActivityType = other.OptionalActivityType;
      }
      if (other.IsSelect != 0) {
        IsSelect = other.IsSelect;
      }
      fixedAward_.Add(other.fixedAward_);
      optionalAward_.Add(other.optionalAward_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            Id = input.ReadSInt32();
            break;
          }
          case 24: {
            optionalActivityType_ = (global::OptionalActivityTypePB) input.ReadEnum();
            break;
          }
          case 32: {
            IsSelect = input.ReadSInt32();
            break;
          }
          case 42: {
            fixedAward_.AddEntriesFrom(input, _repeated_fixedAward_codec);
            break;
          }
          case 50: {
            optionalAward_.AddEntriesFrom(input, _repeated_optionalAward_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
