// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_visiting_level.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_visiting_level.proto</summary>
  public static partial class BeanVisitingLevelReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_visiting_level.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanVisitingLevelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChliZWFuX3Zpc2l0aW5nX2xldmVsLnByb3RvEgljb20ucHJvdG8aCmJhc2Uu",
            "cHJvdG8aEGJlYW5fYXdhcmQucHJvdG8aFmJlYW5fbGV2ZWxfZXh0cmEucHJv",
            "dG8iqwcKE1Zpc2l0aW5nTGV2ZWxSdWxlUEISEAoIbGV2ZWxfaWQYASABKBES",
            "FwoPYmVmb3JlX2xldmVsX2lkGAIgASgREhYKDmFmdGVyX2xldmVsX2lkGAMg",
            "ASgREhoKBHR5cGUYBCABKA4yDC5MZXZlbFR5cGVQQhIdCglhYmlsaXRpZXMY",
            "BSADKA4yCi5BYmlsaXR5UEISPQoIaXRlbV9tYXgYBiADKAsyKy5jb20ucHJv",
            "dG8uVmlzaXRpbmdMZXZlbFJ1bGVQQi5JdGVtTWF4RW50cnkSPQoIZmFuc19t",
            "YXgYByADKAsyKy5jb20ucHJvdG8uVmlzaXRpbmdMZXZlbFJ1bGVQQi5GYW5z",
            "TWF4RW50cnkSCwoDbWF4GAggASgREhAKCGV2ZW50X2lkGAkgASgREkMKC3N0",
            "YXJfc291cmNlGAogAygLMi4uY29tLnByb3RvLlZpc2l0aW5nTGV2ZWxSdWxl",
            "UEIuU3RhclNvdXJjZUVudHJ5EiIKBmF3YXJkcxgLIAMoCzISLmNvbS5wcm90",
            "by5Bd2FyZFBCEh4KCWdhbWVfdHlwZRgMIAEoDjILLkdhbWVUeXBlUEISFQoN",
            "bGV2ZWxfaW5mb19pZBgNIAEoERIVCg1jaGFwdGVyX2dyb3VwGA4gASgREhIK",
            "CmxldmVsX21hcmsYDyABKAkSQQoKbGV2ZWxfcGxvdBgQIAMoCzItLmNvbS5w",
            "cm90by5WaXNpdGluZ0xldmVsUnVsZVBCLkxldmVsUGxvdEVudHJ5EhgKEGxl",
            "dmVsX2Nvb3JkaW5hdGUYESADKBESFgoObGV2ZWxfYmFja2Ryb3AYEiADKAkS",
            "LAoLbGV2ZWxfZXh0cmEYEyABKAsyFy5jb20ucHJvdG8uTGV2ZWxFeHRyYVBC",
            "EhkKBnBsYXllchgUIAEoDjIJLlBsYXllclBCEhgKEGNoYXB0ZXJfYmFja2Ry",
            "b3AYFSABKAkSEQoJc3dlZXRuZXNzGBYgASgJGi4KDEl0ZW1NYXhFbnRyeRIL",
            "CgNrZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBGi4KDEZhbnNNYXhFbnRy",
            "eRILCgNrZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBGjEKD1N0YXJTb3Vy",
            "Y2VFbnRyeRILCgNrZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBGjAKDkxl",
            "dmVsUGxvdEVudHJ5EgsKA2tleRgBIAEoERINCgV2YWx1ZRgCIAEoEToCOAEi",
            "QgoaVmlzaXRpbmdSZXNldENvbnN1bXB0aW9uUEISEwoLcmVzZXRfdGltZXMY",
            "ASABKBESDwoHY29uc3VtZRgCIAEoESJoChdWaXNpdGluZ0xldmVsUGxvdFJ1",
            "bGVQQhIPCgdwbG90X2lkGAEgASgREikKD2xldmVsX3Bsb3RfdHlwZRgCIAEo",
            "DjIQLkxldmVsUGxvdFR5cGVQQhIRCglwbG90X2Rlc2MYAyABKAkieAoaVmlz",
            "aXRpbmdMZXZlbENvbW1lbnRSdWxlUEISCgoCaWQYASABKBESEAoIZ3JvdXBf",
            "aWQYAiABKBESCwoDaW1nGAMgASgJEgwKBG5hbWUYBCABKAkSDwoHY29udGVu",
            "dBgFIAEoCRIQCghsaWtlX251bRgGIAEoESJlChdWaXNpdGluZ0xldmVsSW5m",
            "b1J1bGVQQhIPCgdpbmZvX2lkGAEgASgREhEKCWluZm9fdHlwZRgCIAEoERIS",
            "CgpsZXZlbF9uYW1lGAMgASgJEhIKCmxldmVsX2Rlc2MYBCABKAlCNgofbmV0",
            "LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEITVmlzaXRpbmdMZXZlbFBy",
            "b3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanLevelExtraReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingLevelRulePB), global::Com.Proto.VisitingLevelRulePB.Parser, new[]{ "LevelId", "BeforeLevelId", "AfterLevelId", "Type", "Abilities", "ItemMax", "FansMax", "Max", "EventId", "StarSource", "Awards", "GameType", "LevelInfoId", "ChapterGroup", "LevelMark", "LevelPlot", "LevelCoordinate", "LevelBackdrop", "LevelExtra", "Player", "ChapterBackdrop", "Sweetness" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingResetConsumptionPB), global::Com.Proto.VisitingResetConsumptionPB.Parser, new[]{ "ResetTimes", "Consume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingLevelPlotRulePB), global::Com.Proto.VisitingLevelPlotRulePB.Parser, new[]{ "PlotId", "LevelPlotType", "PlotDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingLevelCommentRulePB), global::Com.Proto.VisitingLevelCommentRulePB.Parser, new[]{ "Id", "GroupId", "Img", "Name", "Content", "LikeNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingLevelInfoRulePB), global::Com.Proto.VisitingLevelInfoRulePB.Parser, new[]{ "InfoId", "InfoType", "LevelName", "LevelDesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///VisitingLevelRulePB VisitingLevelRule
  /// </summary>
  public sealed partial class VisitingLevelRulePB : pb::IMessage<VisitingLevelRulePB> {
    private static readonly pb::MessageParser<VisitingLevelRulePB> _parser = new pb::MessageParser<VisitingLevelRulePB>(() => new VisitingLevelRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingLevelRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanVisitingLevelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelRulePB(VisitingLevelRulePB other) : this() {
      levelId_ = other.levelId_;
      beforeLevelId_ = other.beforeLevelId_;
      afterLevelId_ = other.afterLevelId_;
      type_ = other.type_;
      abilities_ = other.abilities_.Clone();
      itemMax_ = other.itemMax_.Clone();
      fansMax_ = other.fansMax_.Clone();
      max_ = other.max_;
      eventId_ = other.eventId_;
      starSource_ = other.starSource_.Clone();
      awards_ = other.awards_.Clone();
      gameType_ = other.gameType_;
      levelInfoId_ = other.levelInfoId_;
      chapterGroup_ = other.chapterGroup_;
      levelMark_ = other.levelMark_;
      levelPlot_ = other.levelPlot_.Clone();
      levelCoordinate_ = other.levelCoordinate_.Clone();
      levelBackdrop_ = other.levelBackdrop_.Clone();
      LevelExtra = other.levelExtra_ != null ? other.LevelExtra.Clone() : null;
      player_ = other.player_;
      chapterBackdrop_ = other.chapterBackdrop_;
      sweetness_ = other.sweetness_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelRulePB Clone() {
      return new VisitingLevelRulePB(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "before_level_id" field.</summary>
    public const int BeforeLevelIdFieldNumber = 2;
    private int beforeLevelId_;
    /// <summary>
    ///前置关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeLevelId {
      get { return beforeLevelId_; }
      set {
        beforeLevelId_ = value;
      }
    }

    /// <summary>Field number for the "after_level_id" field.</summary>
    public const int AfterLevelIdFieldNumber = 3;
    private int afterLevelId_;
    /// <summary>
    ///后置关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterLevelId {
      get { return afterLevelId_; }
      set {
        afterLevelId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::LevelTypePB type_ = 0;
    /// <summary>
    ///关卡类型(0数值，1剧情)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LevelTypePB Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AbilityPB> _repeated_abilities_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::AbilityPB) x);
    private readonly pbc::RepeatedField<global::AbilityPB> abilities_ = new pbc::RepeatedField<global::AbilityPB>();
    /// <summary>
    ///能力标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AbilityPB> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "item_max" field.</summary>
    public const int ItemMaxFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_itemMax_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 50);
    private readonly pbc::MapField<int, int> itemMax_ = new pbc::MapField<int, int>();
    /// <summary>
    ///道具上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ItemMax {
      get { return itemMax_; }
    }

    /// <summary>Field number for the "fans_max" field.</summary>
    public const int FansMaxFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_fansMax_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 58);
    private readonly pbc::MapField<int, int> fansMax_ = new pbc::MapField<int, int>();
    /// <summary>
    ///粉丝上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FansMax {
      get { return fansMax_; }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 8;
    private int max_;
    /// <summary>
    ///当天可挑战次数上线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 9;
    private int eventId_;
    /// <summary>
    ///触发情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "star_source" field.</summary>
    public const int StarSourceFieldNumber = 10;
    private static readonly pbc::MapField<int, int>.Codec _map_starSource_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 82);
    private readonly pbc::MapField<int, int> starSource_ = new pbc::MapField<int, int>();
    /// <summary>
    ///星级-分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> StarSource {
      get { return starSource_; }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(90, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 12;
    private global::GameTypePB gameType_ = 0;
    /// <summary>
    ///比赛类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameTypePB GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "level_info_id" field.</summary>
    public const int LevelInfoIdFieldNumber = 13;
    private int levelInfoId_;
    /// <summary>
    ///关卡信息ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelInfoId {
      get { return levelInfoId_; }
      set {
        levelInfoId_ = value;
      }
    }

    /// <summary>Field number for the "chapter_group" field.</summary>
    public const int ChapterGroupFieldNumber = 14;
    private int chapterGroup_;
    /// <summary>
    ///章节分组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterGroup {
      get { return chapterGroup_; }
      set {
        chapterGroup_ = value;
      }
    }

    /// <summary>Field number for the "level_mark" field.</summary>
    public const int LevelMarkFieldNumber = 15;
    private string levelMark_ = "";
    /// <summary>
    ///章节标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelMark {
      get { return levelMark_; }
      set {
        levelMark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_plot" field.</summary>
    public const int LevelPlotFieldNumber = 16;
    private static readonly pbc::MapField<int, int>.Codec _map_levelPlot_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 130);
    private readonly pbc::MapField<int, int> levelPlot_ = new pbc::MapField<int, int>();
    /// <summary>
    ///关卡剧情id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> LevelPlot {
      get { return levelPlot_; }
    }

    /// <summary>Field number for the "level_coordinate" field.</summary>
    public const int LevelCoordinateFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_levelCoordinate_codec
        = pb::FieldCodec.ForSInt32(138);
    private readonly pbc::RepeatedField<int> levelCoordinate_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///关卡坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelCoordinate {
      get { return levelCoordinate_; }
    }

    /// <summary>Field number for the "level_backdrop" field.</summary>
    public const int LevelBackdropFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_levelBackdrop_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> levelBackdrop_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///关卡背景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelBackdrop {
      get { return levelBackdrop_; }
    }

    /// <summary>Field number for the "level_extra" field.</summary>
    public const int LevelExtraFieldNumber = 19;
    private global::Com.Proto.LevelExtraPB levelExtra_;
    /// <summary>
    ///关卡额外要求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.LevelExtraPB LevelExtra {
      get { return levelExtra_; }
      set {
        levelExtra_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 20;
    private global::PlayerPB player_ = 0;
    /// <summary>
    ///角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "chapter_backdrop" field.</summary>
    public const int ChapterBackdropFieldNumber = 21;
    private string chapterBackdrop_ = "";
    /// <summary>
    ///章节背景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChapterBackdrop {
      get { return chapterBackdrop_; }
      set {
        chapterBackdrop_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sweetness" field.</summary>
    public const int SweetnessFieldNumber = 22;
    private string sweetness_ = "";
    /// <summary>
    ///甜蜜度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sweetness {
      get { return sweetness_; }
      set {
        sweetness_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingLevelRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingLevelRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if (BeforeLevelId != other.BeforeLevelId) return false;
      if (AfterLevelId != other.AfterLevelId) return false;
      if (Type != other.Type) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if (!ItemMax.Equals(other.ItemMax)) return false;
      if (!FansMax.Equals(other.FansMax)) return false;
      if (Max != other.Max) return false;
      if (EventId != other.EventId) return false;
      if (!StarSource.Equals(other.StarSource)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (GameType != other.GameType) return false;
      if (LevelInfoId != other.LevelInfoId) return false;
      if (ChapterGroup != other.ChapterGroup) return false;
      if (LevelMark != other.LevelMark) return false;
      if (!LevelPlot.Equals(other.LevelPlot)) return false;
      if(!levelCoordinate_.Equals(other.levelCoordinate_)) return false;
      if(!levelBackdrop_.Equals(other.levelBackdrop_)) return false;
      if (!object.Equals(LevelExtra, other.LevelExtra)) return false;
      if (Player != other.Player) return false;
      if (ChapterBackdrop != other.ChapterBackdrop) return false;
      if (Sweetness != other.Sweetness) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (BeforeLevelId != 0) hash ^= BeforeLevelId.GetHashCode();
      if (AfterLevelId != 0) hash ^= AfterLevelId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= abilities_.GetHashCode();
      hash ^= ItemMax.GetHashCode();
      hash ^= FansMax.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      hash ^= StarSource.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (LevelInfoId != 0) hash ^= LevelInfoId.GetHashCode();
      if (ChapterGroup != 0) hash ^= ChapterGroup.GetHashCode();
      if (LevelMark.Length != 0) hash ^= LevelMark.GetHashCode();
      hash ^= LevelPlot.GetHashCode();
      hash ^= levelCoordinate_.GetHashCode();
      hash ^= levelBackdrop_.GetHashCode();
      if (levelExtra_ != null) hash ^= LevelExtra.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (ChapterBackdrop.Length != 0) hash ^= ChapterBackdrop.GetHashCode();
      if (Sweetness.Length != 0) hash ^= Sweetness.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      if (BeforeLevelId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(BeforeLevelId);
      }
      if (AfterLevelId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(AfterLevelId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      itemMax_.WriteTo(output, _map_itemMax_codec);
      fansMax_.WriteTo(output, _map_fansMax_codec);
      if (Max != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Max);
      }
      if (EventId != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(EventId);
      }
      starSource_.WriteTo(output, _map_starSource_codec);
      awards_.WriteTo(output, _repeated_awards_codec);
      if (GameType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) GameType);
      }
      if (LevelInfoId != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(LevelInfoId);
      }
      if (ChapterGroup != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(ChapterGroup);
      }
      if (LevelMark.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(LevelMark);
      }
      levelPlot_.WriteTo(output, _map_levelPlot_codec);
      levelCoordinate_.WriteTo(output, _repeated_levelCoordinate_codec);
      levelBackdrop_.WriteTo(output, _repeated_levelBackdrop_codec);
      if (levelExtra_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(LevelExtra);
      }
      if (Player != 0) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) Player);
      }
      if (ChapterBackdrop.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ChapterBackdrop);
      }
      if (Sweetness.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Sweetness);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (BeforeLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BeforeLevelId);
      }
      if (AfterLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AfterLevelId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      size += itemMax_.CalculateSize(_map_itemMax_codec);
      size += fansMax_.CalculateSize(_map_fansMax_codec);
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Max);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(EventId);
      }
      size += starSource_.CalculateSize(_map_starSource_codec);
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameType);
      }
      if (LevelInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelInfoId);
      }
      if (ChapterGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChapterGroup);
      }
      if (LevelMark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelMark);
      }
      size += levelPlot_.CalculateSize(_map_levelPlot_codec);
      size += levelCoordinate_.CalculateSize(_repeated_levelCoordinate_codec);
      size += levelBackdrop_.CalculateSize(_repeated_levelBackdrop_codec);
      if (levelExtra_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LevelExtra);
      }
      if (Player != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (ChapterBackdrop.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChapterBackdrop);
      }
      if (Sweetness.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sweetness);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingLevelRulePB other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.BeforeLevelId != 0) {
        BeforeLevelId = other.BeforeLevelId;
      }
      if (other.AfterLevelId != 0) {
        AfterLevelId = other.AfterLevelId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      abilities_.Add(other.abilities_);
      itemMax_.Add(other.itemMax_);
      fansMax_.Add(other.fansMax_);
      if (other.Max != 0) {
        Max = other.Max;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      starSource_.Add(other.starSource_);
      awards_.Add(other.awards_);
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.LevelInfoId != 0) {
        LevelInfoId = other.LevelInfoId;
      }
      if (other.ChapterGroup != 0) {
        ChapterGroup = other.ChapterGroup;
      }
      if (other.LevelMark.Length != 0) {
        LevelMark = other.LevelMark;
      }
      levelPlot_.Add(other.levelPlot_);
      levelCoordinate_.Add(other.levelCoordinate_);
      levelBackdrop_.Add(other.levelBackdrop_);
      if (other.levelExtra_ != null) {
        if (levelExtra_ == null) {
          levelExtra_ = new global::Com.Proto.LevelExtraPB();
        }
        LevelExtra.MergeFrom(other.LevelExtra);
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.ChapterBackdrop.Length != 0) {
        ChapterBackdrop = other.ChapterBackdrop;
      }
      if (other.Sweetness.Length != 0) {
        Sweetness = other.Sweetness;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 16: {
            BeforeLevelId = input.ReadSInt32();
            break;
          }
          case 24: {
            AfterLevelId = input.ReadSInt32();
            break;
          }
          case 32: {
            type_ = (global::LevelTypePB) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 50: {
            itemMax_.AddEntriesFrom(input, _map_itemMax_codec);
            break;
          }
          case 58: {
            fansMax_.AddEntriesFrom(input, _map_fansMax_codec);
            break;
          }
          case 64: {
            Max = input.ReadSInt32();
            break;
          }
          case 72: {
            EventId = input.ReadSInt32();
            break;
          }
          case 82: {
            starSource_.AddEntriesFrom(input, _map_starSource_codec);
            break;
          }
          case 90: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 96: {
            gameType_ = (global::GameTypePB) input.ReadEnum();
            break;
          }
          case 104: {
            LevelInfoId = input.ReadSInt32();
            break;
          }
          case 112: {
            ChapterGroup = input.ReadSInt32();
            break;
          }
          case 122: {
            LevelMark = input.ReadString();
            break;
          }
          case 130: {
            levelPlot_.AddEntriesFrom(input, _map_levelPlot_codec);
            break;
          }
          case 138:
          case 136: {
            levelCoordinate_.AddEntriesFrom(input, _repeated_levelCoordinate_codec);
            break;
          }
          case 146: {
            levelBackdrop_.AddEntriesFrom(input, _repeated_levelBackdrop_codec);
            break;
          }
          case 154: {
            if (levelExtra_ == null) {
              levelExtra_ = new global::Com.Proto.LevelExtraPB();
            }
            input.ReadMessage(levelExtra_);
            break;
          }
          case 160: {
            player_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
          case 170: {
            ChapterBackdrop = input.ReadString();
            break;
          }
          case 178: {
            Sweetness = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VisitingResetConsumptionPB VisitingResetConsumptionRule
  /// </summary>
  public sealed partial class VisitingResetConsumptionPB : pb::IMessage<VisitingResetConsumptionPB> {
    private static readonly pb::MessageParser<VisitingResetConsumptionPB> _parser = new pb::MessageParser<VisitingResetConsumptionPB>(() => new VisitingResetConsumptionPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingResetConsumptionPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanVisitingLevelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingResetConsumptionPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingResetConsumptionPB(VisitingResetConsumptionPB other) : this() {
      resetTimes_ = other.resetTimes_;
      consume_ = other.consume_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingResetConsumptionPB Clone() {
      return new VisitingResetConsumptionPB(this);
    }

    /// <summary>Field number for the "reset_times" field.</summary>
    public const int ResetTimesFieldNumber = 1;
    private int resetTimes_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResetTimes {
      get { return resetTimes_; }
      set {
        resetTimes_ = value;
      }
    }

    /// <summary>Field number for the "consume" field.</summary>
    public const int ConsumeFieldNumber = 2;
    private int consume_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Consume {
      get { return consume_; }
      set {
        consume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingResetConsumptionPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingResetConsumptionPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResetTimes != other.ResetTimes) return false;
      if (Consume != other.Consume) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResetTimes != 0) hash ^= ResetTimes.GetHashCode();
      if (Consume != 0) hash ^= Consume.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResetTimes != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ResetTimes);
      }
      if (Consume != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Consume);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResetTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResetTimes);
      }
      if (Consume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Consume);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingResetConsumptionPB other) {
      if (other == null) {
        return;
      }
      if (other.ResetTimes != 0) {
        ResetTimes = other.ResetTimes;
      }
      if (other.Consume != 0) {
        Consume = other.Consume;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResetTimes = input.ReadSInt32();
            break;
          }
          case 16: {
            Consume = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VisitingLevelPlotRulePB VisitingLevelPlotRule
  /// </summary>
  public sealed partial class VisitingLevelPlotRulePB : pb::IMessage<VisitingLevelPlotRulePB> {
    private static readonly pb::MessageParser<VisitingLevelPlotRulePB> _parser = new pb::MessageParser<VisitingLevelPlotRulePB>(() => new VisitingLevelPlotRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingLevelPlotRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanVisitingLevelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelPlotRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelPlotRulePB(VisitingLevelPlotRulePB other) : this() {
      plotId_ = other.plotId_;
      levelPlotType_ = other.levelPlotType_;
      plotDesc_ = other.plotDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelPlotRulePB Clone() {
      return new VisitingLevelPlotRulePB(this);
    }

    /// <summary>Field number for the "plot_id" field.</summary>
    public const int PlotIdFieldNumber = 1;
    private int plotId_;
    /// <summary>
    ///plot_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotId {
      get { return plotId_; }
      set {
        plotId_ = value;
      }
    }

    /// <summary>Field number for the "level_plot_type" field.</summary>
    public const int LevelPlotTypeFieldNumber = 2;
    private global::LevelPlotTypePB levelPlotType_ = 0;
    /// <summary>
    ///剧情类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LevelPlotTypePB LevelPlotType {
      get { return levelPlotType_; }
      set {
        levelPlotType_ = value;
      }
    }

    /// <summary>Field number for the "plot_desc" field.</summary>
    public const int PlotDescFieldNumber = 3;
    private string plotDesc_ = "";
    /// <summary>
    ///剧情描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlotDesc {
      get { return plotDesc_; }
      set {
        plotDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingLevelPlotRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingLevelPlotRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlotId != other.PlotId) return false;
      if (LevelPlotType != other.LevelPlotType) return false;
      if (PlotDesc != other.PlotDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlotId != 0) hash ^= PlotId.GetHashCode();
      if (LevelPlotType != 0) hash ^= LevelPlotType.GetHashCode();
      if (PlotDesc.Length != 0) hash ^= PlotDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlotId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(PlotId);
      }
      if (LevelPlotType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LevelPlotType);
      }
      if (PlotDesc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlotDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PlotId);
      }
      if (LevelPlotType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LevelPlotType);
      }
      if (PlotDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlotDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingLevelPlotRulePB other) {
      if (other == null) {
        return;
      }
      if (other.PlotId != 0) {
        PlotId = other.PlotId;
      }
      if (other.LevelPlotType != 0) {
        LevelPlotType = other.LevelPlotType;
      }
      if (other.PlotDesc.Length != 0) {
        PlotDesc = other.PlotDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlotId = input.ReadSInt32();
            break;
          }
          case 16: {
            levelPlotType_ = (global::LevelPlotTypePB) input.ReadEnum();
            break;
          }
          case 26: {
            PlotDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VisitingLevelCommentRulePB VisitingLevelCommentRule
  /// </summary>
  public sealed partial class VisitingLevelCommentRulePB : pb::IMessage<VisitingLevelCommentRulePB> {
    private static readonly pb::MessageParser<VisitingLevelCommentRulePB> _parser = new pb::MessageParser<VisitingLevelCommentRulePB>(() => new VisitingLevelCommentRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingLevelCommentRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanVisitingLevelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelCommentRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelCommentRulePB(VisitingLevelCommentRulePB other) : this() {
      id_ = other.id_;
      groupId_ = other.groupId_;
      img_ = other.img_;
      name_ = other.name_;
      content_ = other.content_;
      likeNum_ = other.likeNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelCommentRulePB Clone() {
      return new VisitingLevelCommentRulePB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///评论id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    /// <summary>
    ///星级类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "img" field.</summary>
    public const int ImgFieldNumber = 3;
    private string img_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Img {
      get { return img_; }
      set {
        img_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    /// <summary>
    ///评论内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "like_num" field.</summary>
    public const int LikeNumFieldNumber = 6;
    private int likeNum_;
    /// <summary>
    ///点赞数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeNum {
      get { return likeNum_; }
      set {
        likeNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingLevelCommentRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingLevelCommentRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GroupId != other.GroupId) return false;
      if (Img != other.Img) return false;
      if (Name != other.Name) return false;
      if (Content != other.Content) return false;
      if (LikeNum != other.LikeNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (Img.Length != 0) hash ^= Img.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (LikeNum != 0) hash ^= LikeNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(GroupId);
      }
      if (Img.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Img);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (LikeNum != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(LikeNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GroupId);
      }
      if (Img.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Img);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (LikeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LikeNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingLevelCommentRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.Img.Length != 0) {
        Img = other.Img;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.LikeNum != 0) {
        LikeNum = other.LikeNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadSInt32();
            break;
          }
          case 26: {
            Img = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 48: {
            LikeNum = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VisitingLevelInfoRulePB VisitingLevelInfoRule
  /// </summary>
  public sealed partial class VisitingLevelInfoRulePB : pb::IMessage<VisitingLevelInfoRulePB> {
    private static readonly pb::MessageParser<VisitingLevelInfoRulePB> _parser = new pb::MessageParser<VisitingLevelInfoRulePB>(() => new VisitingLevelInfoRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingLevelInfoRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanVisitingLevelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelInfoRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelInfoRulePB(VisitingLevelInfoRulePB other) : this() {
      infoId_ = other.infoId_;
      infoType_ = other.infoType_;
      levelName_ = other.levelName_;
      levelDesc_ = other.levelDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingLevelInfoRulePB Clone() {
      return new VisitingLevelInfoRulePB(this);
    }

    /// <summary>Field number for the "info_id" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private int infoId_;
    /// <summary>
    ///信息id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "info_type" field.</summary>
    public const int InfoTypeFieldNumber = 2;
    private int infoType_;
    /// <summary>
    ///信息分类（0关卡，1章节）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "level_name" field.</summary>
    public const int LevelNameFieldNumber = 3;
    private string levelName_ = "";
    /// <summary>
    ///关卡名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelName {
      get { return levelName_; }
      set {
        levelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_desc" field.</summary>
    public const int LevelDescFieldNumber = 4;
    private string levelDesc_ = "";
    /// <summary>
    ///关卡描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelDesc {
      get { return levelDesc_; }
      set {
        levelDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingLevelInfoRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingLevelInfoRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InfoId != other.InfoId) return false;
      if (InfoType != other.InfoType) return false;
      if (LevelName != other.LevelName) return false;
      if (LevelDesc != other.LevelDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InfoId != 0) hash ^= InfoId.GetHashCode();
      if (InfoType != 0) hash ^= InfoType.GetHashCode();
      if (LevelName.Length != 0) hash ^= LevelName.GetHashCode();
      if (LevelDesc.Length != 0) hash ^= LevelDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(InfoId);
      }
      if (InfoType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(InfoType);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LevelName);
      }
      if (LevelDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LevelDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(InfoId);
      }
      if (InfoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(InfoType);
      }
      if (LevelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelName);
      }
      if (LevelDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingLevelInfoRulePB other) {
      if (other == null) {
        return;
      }
      if (other.InfoId != 0) {
        InfoId = other.InfoId;
      }
      if (other.InfoType != 0) {
        InfoType = other.InfoType;
      }
      if (other.LevelName.Length != 0) {
        LevelName = other.LevelName;
      }
      if (other.LevelDesc.Length != 0) {
        LevelDesc = other.LevelDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadSInt32();
            break;
          }
          case 16: {
            InfoType = input.ReadSInt32();
            break;
          }
          case 26: {
            LevelName = input.ReadString();
            break;
          }
          case 34: {
            LevelDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
