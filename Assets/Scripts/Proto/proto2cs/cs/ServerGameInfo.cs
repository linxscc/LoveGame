// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_game_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto.Server {

  /// <summary>Holder for reflection information generated from server_game_info.proto</summary>
  public static partial class ServerGameInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for server_game_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerGameInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZzZXJ2ZXJfZ2FtZV9pbmZvLnByb3RvEhBjb20ucHJvdG8uc2VydmVyGhFz",
            "ZXJ2ZXJfYmFzZS5wcm90byKZAQoNR2FtZVNlcnZlclJlcRIMCgRnYW1lGAEg",
            "ASgREg8KB2NoYW5uZWwYAiABKAkSFAoMY2hhbm5lbF9pbmZvGAMgASgJEg8K",
            "B3ZlcnNpb24YBCABKBESFQoNZ2FtZV9wcm9wZXJ0eRgFIAEoERIQCghsYW5n",
            "dWFnZRgGIAEoERIMCgRpZGZhGAcgASgJEgsKA2V4dBgIIAEoCSLJBAoNR2Ft",
            "ZVNlcnZlclJlcxILCgNyZXQYASABKBESNQoMbWFpbl92ZXJzaW9uGAIgASgL",
            "Mh8uY29tLnByb3RvLnNlcnZlci5NYWluVmVyc2lvblBCEjMKC2hvdF92ZXJz",
            "aW9uGAMgASgLMh4uY29tLnByb3RvLnNlcnZlci5Ib3RWZXJzaW9uUEISNwoN",
            "Y2FjaGVfdmVyc2lvbhgEIAMoCzIgLmNvbS5wcm90by5zZXJ2ZXIuQ2FjaGVW",
            "ZXJzaW9uUEISPAoQZ2FtZV9zZXJ2ZXJfaW5mbxgFIAMoCzIiLmNvbS5wcm90",
            "by5zZXJ2ZXIuR2FtZVNlcnZlckluZm9QQhI6Cg9pbWdfc2VydmVyX2luZm8Y",
            "BiABKAsyIS5jb20ucHJvdG8uc2VydmVyLkltZ1NlcnZlckluZm9QQhJCChdy",
            "ZXNlcnZlX2ltZ19zZXJ2ZXJfaW5mbxgHIAEoCzIhLmNvbS5wcm90by5zZXJ2",
            "ZXIuSW1nU2VydmVySW5mb1BCEkUKFG1hdGNoaW5nX3NlcnZlcl9pbmZvGAgg",
            "ASgLMicuY29tLnByb3RvLnNlcnZlci5NYXRjaGluZ1NlcnZpY2VJbmZvUEIS",
            "KgoGbm90aWNlGAkgAygLMhouY29tLnByb3RvLnNlcnZlci5Ob3RpY2VQQhI5",
            "Cg5zd2l0Y2hfY29udHJvbBgKIAEoCzIhLmNvbS5wcm90by5zZXJ2ZXIuU3dp",
            "dGNoQ29udHJvbFBCEhoKEmRpc2NsYWltZXJfdmVyc2lvbhgLIAEoESIvCg1E",
            "aXNjbGFpbWVyUmVxEgwKBGdhbWUYASABKBESEAoIbGFuZ3VhZ2UYAiABKBEi",
            "UAoNRGlzY2xhaW1lclJlcxILCgNyZXQYASABKBESMgoKZGlzY2xhaW1lchgC",
            "IAEoCzIeLmNvbS5wcm90by5zZXJ2ZXIuRGlzY2xhaW1lclBCQkoKJW5ldC5n",
            "YWxhc3BvcnRzLnN1cHBvcnQucHViLmJlYW4ucHJvdG9CDkdhbWVJbmZvUHJv",
            "dG9zqgIQQ29tLlByb3RvLlNlcnZlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Proto.Server.ServerBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.GameServerReq), global::Com.Proto.Server.GameServerReq.Parser, new[]{ "Game", "Channel", "ChannelInfo", "Version", "GameProperty", "Language", "Idfa", "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.GameServerRes), global::Com.Proto.Server.GameServerRes.Parser, new[]{ "Ret", "MainVersion", "HotVersion", "CacheVersion", "GameServerInfo", "ImgServerInfo", "ReserveImgServerInfo", "MatchingServerInfo", "Notice", "SwitchControl", "DisclaimerVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.DisclaimerReq), global::Com.Proto.Server.DisclaimerReq.Parser, new[]{ "Game", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.DisclaimerRes), global::Com.Proto.Server.DisclaimerRes.Parser, new[]{ "Ret", "Disclaimer" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///服务器列表 跟 版本信息 回包
  /// </summary>
  public sealed partial class GameServerReq : pb::IMessage<GameServerReq> {
    private static readonly pb::MessageParser<GameServerReq> _parser = new pb::MessageParser<GameServerReq>(() => new GameServerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerGameInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerReq(GameServerReq other) : this() {
      game_ = other.game_;
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      version_ = other.version_;
      gameProperty_ = other.gameProperty_;
      language_ = other.language_;
      idfa_ = other.idfa_;
      ext_ = other.ext_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerReq Clone() {
      return new GameServerReq(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    ///渠道分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 3;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    /// <summary>
    ///版本号信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "game_property" field.</summary>
    public const int GamePropertyFieldNumber = 5;
    private int gameProperty_;
    /// <summary>
    ///游戏属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameProperty {
      get { return gameProperty_; }
      set {
        gameProperty_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 6;
    private int language_;
    /// <summary>
    ///多语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "idfa" field.</summary>
    public const int IdfaFieldNumber = 7;
    private string idfa_ = "";
    /// <summary>
    ///设备编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfa {
      get { return idfa_; }
      set {
        idfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ext" field.</summary>
    public const int ExtFieldNumber = 8;
    private string ext_ = "";
    /// <summary>
    ///额外信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ext {
      get { return ext_; }
      set {
        ext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (Version != other.Version) return false;
      if (GameProperty != other.GameProperty) return false;
      if (Language != other.Language) return false;
      if (Idfa != other.Idfa) return false;
      if (Ext != other.Ext) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (GameProperty != 0) hash ^= GameProperty.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (Idfa.Length != 0) hash ^= Idfa.GetHashCode();
      if (Ext.Length != 0) hash ^= Ext.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelInfo);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Version);
      }
      if (GameProperty != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(GameProperty);
      }
      if (Language != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Language);
      }
      if (Idfa.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Idfa);
      }
      if (Ext.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Ext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Version);
      }
      if (GameProperty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameProperty);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Language);
      }
      if (Idfa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfa);
      }
      if (Ext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerReq other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.GameProperty != 0) {
        GameProperty = other.GameProperty;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.Idfa.Length != 0) {
        Idfa = other.Idfa;
      }
      if (other.Ext.Length != 0) {
        Ext = other.Ext;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 32: {
            Version = input.ReadSInt32();
            break;
          }
          case 40: {
            GameProperty = input.ReadSInt32();
            break;
          }
          case 48: {
            Language = input.ReadSInt32();
            break;
          }
          case 58: {
            Idfa = input.ReadString();
            break;
          }
          case 66: {
            Ext = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器列表 跟 版本信息 回包
  /// </summary>
  public sealed partial class GameServerRes : pb::IMessage<GameServerRes> {
    private static readonly pb::MessageParser<GameServerRes> _parser = new pb::MessageParser<GameServerRes>(() => new GameServerRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerGameInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerRes(GameServerRes other) : this() {
      ret_ = other.ret_;
      MainVersion = other.mainVersion_ != null ? other.MainVersion.Clone() : null;
      HotVersion = other.hotVersion_ != null ? other.HotVersion.Clone() : null;
      cacheVersion_ = other.cacheVersion_.Clone();
      gameServerInfo_ = other.gameServerInfo_.Clone();
      ImgServerInfo = other.imgServerInfo_ != null ? other.ImgServerInfo.Clone() : null;
      ReserveImgServerInfo = other.reserveImgServerInfo_ != null ? other.ReserveImgServerInfo.Clone() : null;
      MatchingServerInfo = other.matchingServerInfo_ != null ? other.MatchingServerInfo.Clone() : null;
      notice_ = other.notice_.Clone();
      SwitchControl = other.switchControl_ != null ? other.SwitchControl.Clone() : null;
      disclaimerVersion_ = other.disclaimerVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerRes Clone() {
      return new GameServerRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "main_version" field.</summary>
    public const int MainVersionFieldNumber = 2;
    private global::Com.Proto.Server.MainVersionPB mainVersion_;
    /// <summary>
    ///主版本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.MainVersionPB MainVersion {
      get { return mainVersion_; }
      set {
        mainVersion_ = value;
      }
    }

    /// <summary>Field number for the "hot_version" field.</summary>
    public const int HotVersionFieldNumber = 3;
    private global::Com.Proto.Server.HotVersionPB hotVersion_;
    /// <summary>
    ///热更版本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.HotVersionPB HotVersion {
      get { return hotVersion_; }
      set {
        hotVersion_ = value;
      }
    }

    /// <summary>Field number for the "cache_version" field.</summary>
    public const int CacheVersionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.Server.CacheVersionPB> _repeated_cacheVersion_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.Server.CacheVersionPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.Server.CacheVersionPB> cacheVersion_ = new pbc::RepeatedField<global::Com.Proto.Server.CacheVersionPB>();
    /// <summary>
    ///缓存版本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.Server.CacheVersionPB> CacheVersion {
      get { return cacheVersion_; }
    }

    /// <summary>Field number for the "game_server_info" field.</summary>
    public const int GameServerInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.Server.GameServerInfoPB> _repeated_gameServerInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.Server.GameServerInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.Server.GameServerInfoPB> gameServerInfo_ = new pbc::RepeatedField<global::Com.Proto.Server.GameServerInfoPB>();
    /// <summary>
    ///游戏服信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.Server.GameServerInfoPB> GameServerInfo {
      get { return gameServerInfo_; }
    }

    /// <summary>Field number for the "img_server_info" field.</summary>
    public const int ImgServerInfoFieldNumber = 6;
    private global::Com.Proto.Server.ImgServerInfoPB imgServerInfo_;
    /// <summary>
    ///资源服信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.ImgServerInfoPB ImgServerInfo {
      get { return imgServerInfo_; }
      set {
        imgServerInfo_ = value;
      }
    }

    /// <summary>Field number for the "reserve_img_server_info" field.</summary>
    public const int ReserveImgServerInfoFieldNumber = 7;
    private global::Com.Proto.Server.ImgServerInfoPB reserveImgServerInfo_;
    /// <summary>
    ///备用资源服信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.ImgServerInfoPB ReserveImgServerInfo {
      get { return reserveImgServerInfo_; }
      set {
        reserveImgServerInfo_ = value;
      }
    }

    /// <summary>Field number for the "matching_server_info" field.</summary>
    public const int MatchingServerInfoFieldNumber = 8;
    private global::Com.Proto.Server.MatchingServiceInfoPB matchingServerInfo_;
    /// <summary>
    ///匹配服信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.MatchingServiceInfoPB MatchingServerInfo {
      get { return matchingServerInfo_; }
      set {
        matchingServerInfo_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Com.Proto.Server.NoticePB> _repeated_notice_codec
        = pb::FieldCodec.ForMessage(74, global::Com.Proto.Server.NoticePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.Server.NoticePB> notice_ = new pbc::RepeatedField<global::Com.Proto.Server.NoticePB>();
    /// <summary>
    ///公告信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.Server.NoticePB> Notice {
      get { return notice_; }
    }

    /// <summary>Field number for the "switch_control" field.</summary>
    public const int SwitchControlFieldNumber = 10;
    private global::Com.Proto.Server.SwitchControlPB switchControl_;
    /// <summary>
    ///开关控制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.SwitchControlPB SwitchControl {
      get { return switchControl_; }
      set {
        switchControl_ = value;
      }
    }

    /// <summary>Field number for the "disclaimer_version" field.</summary>
    public const int DisclaimerVersionFieldNumber = 11;
    private int disclaimerVersion_;
    /// <summary>
    ///免责声明版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisclaimerVersion {
      get { return disclaimerVersion_; }
      set {
        disclaimerVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(MainVersion, other.MainVersion)) return false;
      if (!object.Equals(HotVersion, other.HotVersion)) return false;
      if(!cacheVersion_.Equals(other.cacheVersion_)) return false;
      if(!gameServerInfo_.Equals(other.gameServerInfo_)) return false;
      if (!object.Equals(ImgServerInfo, other.ImgServerInfo)) return false;
      if (!object.Equals(ReserveImgServerInfo, other.ReserveImgServerInfo)) return false;
      if (!object.Equals(MatchingServerInfo, other.MatchingServerInfo)) return false;
      if(!notice_.Equals(other.notice_)) return false;
      if (!object.Equals(SwitchControl, other.SwitchControl)) return false;
      if (DisclaimerVersion != other.DisclaimerVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (mainVersion_ != null) hash ^= MainVersion.GetHashCode();
      if (hotVersion_ != null) hash ^= HotVersion.GetHashCode();
      hash ^= cacheVersion_.GetHashCode();
      hash ^= gameServerInfo_.GetHashCode();
      if (imgServerInfo_ != null) hash ^= ImgServerInfo.GetHashCode();
      if (reserveImgServerInfo_ != null) hash ^= ReserveImgServerInfo.GetHashCode();
      if (matchingServerInfo_ != null) hash ^= MatchingServerInfo.GetHashCode();
      hash ^= notice_.GetHashCode();
      if (switchControl_ != null) hash ^= SwitchControl.GetHashCode();
      if (DisclaimerVersion != 0) hash ^= DisclaimerVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (mainVersion_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MainVersion);
      }
      if (hotVersion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HotVersion);
      }
      cacheVersion_.WriteTo(output, _repeated_cacheVersion_codec);
      gameServerInfo_.WriteTo(output, _repeated_gameServerInfo_codec);
      if (imgServerInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ImgServerInfo);
      }
      if (reserveImgServerInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ReserveImgServerInfo);
      }
      if (matchingServerInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MatchingServerInfo);
      }
      notice_.WriteTo(output, _repeated_notice_codec);
      if (switchControl_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SwitchControl);
      }
      if (DisclaimerVersion != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(DisclaimerVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (mainVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainVersion);
      }
      if (hotVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HotVersion);
      }
      size += cacheVersion_.CalculateSize(_repeated_cacheVersion_codec);
      size += gameServerInfo_.CalculateSize(_repeated_gameServerInfo_codec);
      if (imgServerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImgServerInfo);
      }
      if (reserveImgServerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReserveImgServerInfo);
      }
      if (matchingServerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchingServerInfo);
      }
      size += notice_.CalculateSize(_repeated_notice_codec);
      if (switchControl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitchControl);
      }
      if (DisclaimerVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DisclaimerVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.mainVersion_ != null) {
        if (mainVersion_ == null) {
          mainVersion_ = new global::Com.Proto.Server.MainVersionPB();
        }
        MainVersion.MergeFrom(other.MainVersion);
      }
      if (other.hotVersion_ != null) {
        if (hotVersion_ == null) {
          hotVersion_ = new global::Com.Proto.Server.HotVersionPB();
        }
        HotVersion.MergeFrom(other.HotVersion);
      }
      cacheVersion_.Add(other.cacheVersion_);
      gameServerInfo_.Add(other.gameServerInfo_);
      if (other.imgServerInfo_ != null) {
        if (imgServerInfo_ == null) {
          imgServerInfo_ = new global::Com.Proto.Server.ImgServerInfoPB();
        }
        ImgServerInfo.MergeFrom(other.ImgServerInfo);
      }
      if (other.reserveImgServerInfo_ != null) {
        if (reserveImgServerInfo_ == null) {
          reserveImgServerInfo_ = new global::Com.Proto.Server.ImgServerInfoPB();
        }
        ReserveImgServerInfo.MergeFrom(other.ReserveImgServerInfo);
      }
      if (other.matchingServerInfo_ != null) {
        if (matchingServerInfo_ == null) {
          matchingServerInfo_ = new global::Com.Proto.Server.MatchingServiceInfoPB();
        }
        MatchingServerInfo.MergeFrom(other.MatchingServerInfo);
      }
      notice_.Add(other.notice_);
      if (other.switchControl_ != null) {
        if (switchControl_ == null) {
          switchControl_ = new global::Com.Proto.Server.SwitchControlPB();
        }
        SwitchControl.MergeFrom(other.SwitchControl);
      }
      if (other.DisclaimerVersion != 0) {
        DisclaimerVersion = other.DisclaimerVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (mainVersion_ == null) {
              mainVersion_ = new global::Com.Proto.Server.MainVersionPB();
            }
            input.ReadMessage(mainVersion_);
            break;
          }
          case 26: {
            if (hotVersion_ == null) {
              hotVersion_ = new global::Com.Proto.Server.HotVersionPB();
            }
            input.ReadMessage(hotVersion_);
            break;
          }
          case 34: {
            cacheVersion_.AddEntriesFrom(input, _repeated_cacheVersion_codec);
            break;
          }
          case 42: {
            gameServerInfo_.AddEntriesFrom(input, _repeated_gameServerInfo_codec);
            break;
          }
          case 50: {
            if (imgServerInfo_ == null) {
              imgServerInfo_ = new global::Com.Proto.Server.ImgServerInfoPB();
            }
            input.ReadMessage(imgServerInfo_);
            break;
          }
          case 58: {
            if (reserveImgServerInfo_ == null) {
              reserveImgServerInfo_ = new global::Com.Proto.Server.ImgServerInfoPB();
            }
            input.ReadMessage(reserveImgServerInfo_);
            break;
          }
          case 66: {
            if (matchingServerInfo_ == null) {
              matchingServerInfo_ = new global::Com.Proto.Server.MatchingServiceInfoPB();
            }
            input.ReadMessage(matchingServerInfo_);
            break;
          }
          case 74: {
            notice_.AddEntriesFrom(input, _repeated_notice_codec);
            break;
          }
          case 82: {
            if (switchControl_ == null) {
              switchControl_ = new global::Com.Proto.Server.SwitchControlPB();
            }
            input.ReadMessage(switchControl_);
            break;
          }
          case 88: {
            DisclaimerVersion = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///免责声明请求包
  /// </summary>
  public sealed partial class DisclaimerReq : pb::IMessage<DisclaimerReq> {
    private static readonly pb::MessageParser<DisclaimerReq> _parser = new pb::MessageParser<DisclaimerReq>(() => new DisclaimerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisclaimerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerGameInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerReq(DisclaimerReq other) : this() {
      game_ = other.game_;
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerReq Clone() {
      return new DisclaimerReq(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private int language_;
    /// <summary>
    ///语言类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisclaimerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisclaimerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Language != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisclaimerReq other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 16: {
            Language = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///免责声明回包
  /// </summary>
  public sealed partial class DisclaimerRes : pb::IMessage<DisclaimerRes> {
    private static readonly pb::MessageParser<DisclaimerRes> _parser = new pb::MessageParser<DisclaimerRes>(() => new DisclaimerRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisclaimerRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerGameInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerRes(DisclaimerRes other) : this() {
      ret_ = other.ret_;
      Disclaimer = other.disclaimer_ != null ? other.Disclaimer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerRes Clone() {
      return new DisclaimerRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "disclaimer" field.</summary>
    public const int DisclaimerFieldNumber = 2;
    private global::Com.Proto.Server.DisclaimerPB disclaimer_;
    /// <summary>
    ///免责声明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.Server.DisclaimerPB Disclaimer {
      get { return disclaimer_; }
      set {
        disclaimer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisclaimerRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisclaimerRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(Disclaimer, other.Disclaimer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (disclaimer_ != null) hash ^= Disclaimer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (disclaimer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Disclaimer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (disclaimer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disclaimer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisclaimerRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.disclaimer_ != null) {
        if (disclaimer_ == null) {
          disclaimer_ = new global::Com.Proto.Server.DisclaimerPB();
        }
        Disclaimer.MergeFrom(other.Disclaimer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (disclaimer_ == null) {
              disclaimer_ = new global::Com.Proto.Server.DisclaimerPB();
            }
            input.ReadMessage(disclaimer_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
