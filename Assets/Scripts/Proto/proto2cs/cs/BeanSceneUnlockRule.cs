// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_scene_unlock_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_scene_unlock_rule.proto</summary>
  public static partial class BeanSceneUnlockRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_scene_unlock_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanSceneUnlockRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxiZWFuX3NjZW5lX3VubG9ja19ydWxlLnByb3RvEgljb20ucHJvdG8aCmJh",
            "c2UucHJvdG8iXAoRU2NlbmVVbmxvY2tSdWxlUEISEAoIc2NlbmVfaWQYASAB",
            "KBESGgoSZmF2b3JhYmlsaXR5X2xldmVsGAIgASgREhkKBnBsYXllchgDIAEo",
            "DjIJLlBsYXllclBCQjgKH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9j",
            "b2xCFVNjZW5lVW5sb2NrUnVsZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SceneUnlockRulePB), global::Com.Proto.SceneUnlockRulePB.Parser, new[]{ "SceneId", "FavorabilityLevel", "Player" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///SceneUnlockRulePB SceneUnlockRule
  /// </summary>
  public sealed partial class SceneUnlockRulePB : pb::IMessage<SceneUnlockRulePB> {
    private static readonly pb::MessageParser<SceneUnlockRulePB> _parser = new pb::MessageParser<SceneUnlockRulePB>(() => new SceneUnlockRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneUnlockRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanSceneUnlockRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneUnlockRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneUnlockRulePB(SceneUnlockRulePB other) : this() {
      sceneId_ = other.sceneId_;
      favorabilityLevel_ = other.favorabilityLevel_;
      player_ = other.player_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneUnlockRulePB Clone() {
      return new SceneUnlockRulePB(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    /// <summary>
    ///情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "favorability_level" field.</summary>
    public const int FavorabilityLevelFieldNumber = 2;
    private int favorabilityLevel_;
    /// <summary>
    ///好感度等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FavorabilityLevel {
      get { return favorabilityLevel_; }
      set {
        favorabilityLevel_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::PlayerPB player_ = 0;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneUnlockRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneUnlockRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (FavorabilityLevel != other.FavorabilityLevel) return false;
      if (Player != other.Player) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (FavorabilityLevel != 0) hash ^= FavorabilityLevel.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SceneId);
      }
      if (FavorabilityLevel != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(FavorabilityLevel);
      }
      if (Player != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SceneId);
      }
      if (FavorabilityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FavorabilityLevel);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneUnlockRulePB other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.FavorabilityLevel != 0) {
        FavorabilityLevel = other.FavorabilityLevel;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SceneId = input.ReadSInt32();
            break;
          }
          case 16: {
            FavorabilityLevel = input.ReadSInt32();
            break;
          }
          case 24: {
            player_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
