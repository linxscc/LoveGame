// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_activity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_activity.proto</summary>
  public static partial class BeanActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_activity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNiZWFuX2FjdGl2aXR5LnByb3RvEgljb20ucHJvdG8aCmJhc2UucHJvdG8i",
            "4AIKCkFjdGl2aXR5UEISEwoLYWN0aXZpdHlfaWQYASABKBESFwoPdW5pcXVl",
            "X2lkZW50aWZ5GAIgASgREh0KBHR5cGUYAyABKA4yDy5BY3Rpdml0eVR5cGVQ",
            "QhIMCgRuYW1lGAQgASgJEhoKEmJhY2tncm91bmRfcGljdHVyZRgFIAEoCRIM",
            "CgRkZXNjGAYgASgJEhIKCnN0YXJ0X3RpbWUYByABKBISEAoIZW5kX3RpbWUY",
            "CCABKBISFQoNc2hvd19lbmRfdGltZRgJIAEoEhIMCgRzb3J0GAogASgREhQK",
            "DG92ZXJkdWVfdGltZRgLIAEoERIkCghlbmRfdHlwZRgMIAEoDjISLkFjdGl2",
            "aXR5RW5kVHlwZVBCEhIKCmlzX2Rpc3BsYXkYDSABKBESMgoOYWN0aXZpdHlf",
            "ZXh0cmEYDiABKAsyGi5jb20ucHJvdG8uQWN0aXZpdHlFeHRyYVBCIrUBCg9B",
            "Y3Rpdml0eUV4dHJhUEISDwoHaXRlbV9pZBgBIAEoERIXCg9sZXZlbF9yZXBs",
            "eV9OdW0YAiABKBESGgoSbGV2ZWxfZWFjaF9OdW1fR2VtGAMgASgREhUKDWxl",
            "dmVsX2J1eV9NYXgYBCABKBESEwoLcGxvdF9zd2l0Y2gYBSABKBESFgoObWlz",
            "c2lvbl9zd2l0Y2gYBiABKBESGAoQc2Vjb25kX2J1eV9jb3VudBgHIAEoEUIx",
            "Ch9uZXQuZ2FsYXNwb3J0cy5iaWdzdGFyLnByb3RvY29sQg5BY3Rpdml0eVBy",
            "b3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityPB), global::Com.Proto.ActivityPB.Parser, new[]{ "ActivityId", "UniqueIdentify", "Type", "Name", "BackgroundPicture", "Desc", "StartTime", "EndTime", "ShowEndTime", "Sort", "OverdueTime", "EndType", "IsDisplay", "ActivityExtra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityExtraPB), global::Com.Proto.ActivityExtraPB.Parser, new[]{ "ItemId", "LevelReplyNum", "LevelEachNumGem", "LevelBuyMax", "PlotSwitch", "MissionSwitch", "SecondBuyCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///ActivityPB Activity
  /// </summary>
  public sealed partial class ActivityPB : pb::IMessage<ActivityPB> {
    private static readonly pb::MessageParser<ActivityPB> _parser = new pb::MessageParser<ActivityPB>(() => new ActivityPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityPB(ActivityPB other) : this() {
      activityId_ = other.activityId_;
      uniqueIdentify_ = other.uniqueIdentify_;
      type_ = other.type_;
      name_ = other.name_;
      backgroundPicture_ = other.backgroundPicture_;
      desc_ = other.desc_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      showEndTime_ = other.showEndTime_;
      sort_ = other.sort_;
      overdueTime_ = other.overdueTime_;
      endType_ = other.endType_;
      isDisplay_ = other.isDisplay_;
      ActivityExtra = other.activityExtra_ != null ? other.ActivityExtra.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityPB Clone() {
      return new ActivityPB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "unique_identify" field.</summary>
    public const int UniqueIdentifyFieldNumber = 2;
    private int uniqueIdentify_;
    /// <summary>
    ///唯一标志：用于判断活动是否是新活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueIdentify {
      get { return uniqueIdentify_; }
      set {
        uniqueIdentify_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::ActivityTypePB type_ = 0;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityTypePB Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///活动名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "background_picture" field.</summary>
    public const int BackgroundPictureFieldNumber = 5;
    private string backgroundPicture_ = "";
    /// <summary>
    ///背景图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundPicture {
      get { return backgroundPicture_; }
      set {
        backgroundPicture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    /// <summary>
    ///描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private long startTime_;
    /// <summary>
    ///活动开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 8;
    private long endTime_;
    /// <summary>
    ///活动结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "show_end_time" field.</summary>
    public const int ShowEndTimeFieldNumber = 9;
    private long showEndTime_;
    /// <summary>
    ///活动展示结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowEndTime {
      get { return showEndTime_; }
      set {
        showEndTime_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 10;
    private int sort_;
    /// <summary>
    ///排序：越小的越前
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "overdue_time" field.</summary>
    public const int OverdueTimeFieldNumber = 11;
    private int overdueTime_;
    /// <summary>
    ///针对用户过期时间：单位小时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverdueTime {
      get { return overdueTime_; }
      set {
        overdueTime_ = value;
      }
    }

    /// <summary>Field number for the "end_type" field.</summary>
    public const int EndTypeFieldNumber = 12;
    private global::ActivityEndTypePB endType_ = 0;
    /// <summary>
    ///结束类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActivityEndTypePB EndType {
      get { return endType_; }
      set {
        endType_ = value;
      }
    }

    /// <summary>Field number for the "is_display" field.</summary>
    public const int IsDisplayFieldNumber = 13;
    private int isDisplay_;
    /// <summary>
    ///是否显示页签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsDisplay {
      get { return isDisplay_; }
      set {
        isDisplay_ = value;
      }
    }

    /// <summary>Field number for the "activity_extra" field.</summary>
    public const int ActivityExtraFieldNumber = 14;
    private global::Com.Proto.ActivityExtraPB activityExtra_;
    /// <summary>
    ///活动额外信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.ActivityExtraPB ActivityExtra {
      get { return activityExtra_; }
      set {
        activityExtra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (UniqueIdentify != other.UniqueIdentify) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (BackgroundPicture != other.BackgroundPicture) return false;
      if (Desc != other.Desc) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (ShowEndTime != other.ShowEndTime) return false;
      if (Sort != other.Sort) return false;
      if (OverdueTime != other.OverdueTime) return false;
      if (EndType != other.EndType) return false;
      if (IsDisplay != other.IsDisplay) return false;
      if (!object.Equals(ActivityExtra, other.ActivityExtra)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (UniqueIdentify != 0) hash ^= UniqueIdentify.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BackgroundPicture.Length != 0) hash ^= BackgroundPicture.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (ShowEndTime != 0L) hash ^= ShowEndTime.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (OverdueTime != 0) hash ^= OverdueTime.GetHashCode();
      if (EndType != 0) hash ^= EndType.GetHashCode();
      if (IsDisplay != 0) hash ^= IsDisplay.GetHashCode();
      if (activityExtra_ != null) hash ^= ActivityExtra.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (UniqueIdentify != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(UniqueIdentify);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (BackgroundPicture.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BackgroundPicture);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(EndTime);
      }
      if (ShowEndTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(ShowEndTime);
      }
      if (Sort != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Sort);
      }
      if (OverdueTime != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(OverdueTime);
      }
      if (EndType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) EndType);
      }
      if (IsDisplay != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(IsDisplay);
      }
      if (activityExtra_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ActivityExtra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (UniqueIdentify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UniqueIdentify);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BackgroundPicture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundPicture);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndTime);
      }
      if (ShowEndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ShowEndTime);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sort);
      }
      if (OverdueTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OverdueTime);
      }
      if (EndType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EndType);
      }
      if (IsDisplay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsDisplay);
      }
      if (activityExtra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivityExtra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityPB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.UniqueIdentify != 0) {
        UniqueIdentify = other.UniqueIdentify;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BackgroundPicture.Length != 0) {
        BackgroundPicture = other.BackgroundPicture;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.ShowEndTime != 0L) {
        ShowEndTime = other.ShowEndTime;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.OverdueTime != 0) {
        OverdueTime = other.OverdueTime;
      }
      if (other.EndType != 0) {
        EndType = other.EndType;
      }
      if (other.IsDisplay != 0) {
        IsDisplay = other.IsDisplay;
      }
      if (other.activityExtra_ != null) {
        if (activityExtra_ == null) {
          activityExtra_ = new global::Com.Proto.ActivityExtraPB();
        }
        ActivityExtra.MergeFrom(other.ActivityExtra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            UniqueIdentify = input.ReadSInt32();
            break;
          }
          case 24: {
            type_ = (global::ActivityTypePB) input.ReadEnum();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            BackgroundPicture = input.ReadString();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 56: {
            StartTime = input.ReadSInt64();
            break;
          }
          case 64: {
            EndTime = input.ReadSInt64();
            break;
          }
          case 72: {
            ShowEndTime = input.ReadSInt64();
            break;
          }
          case 80: {
            Sort = input.ReadSInt32();
            break;
          }
          case 88: {
            OverdueTime = input.ReadSInt32();
            break;
          }
          case 96: {
            endType_ = (global::ActivityEndTypePB) input.ReadEnum();
            break;
          }
          case 104: {
            IsDisplay = input.ReadSInt32();
            break;
          }
          case 114: {
            if (activityExtra_ == null) {
              activityExtra_ = new global::Com.Proto.ActivityExtraPB();
            }
            input.ReadMessage(activityExtra_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivityExtraPB : pb::IMessage<ActivityExtraPB> {
    private static readonly pb::MessageParser<ActivityExtraPB> _parser = new pb::MessageParser<ActivityExtraPB>(() => new ActivityExtraPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityExtraPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExtraPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExtraPB(ActivityExtraPB other) : this() {
      itemId_ = other.itemId_;
      levelReplyNum_ = other.levelReplyNum_;
      levelEachNumGem_ = other.levelEachNumGem_;
      levelBuyMax_ = other.levelBuyMax_;
      plotSwitch_ = other.plotSwitch_;
      missionSwitch_ = other.missionSwitch_;
      secondBuyCount_ = other.secondBuyCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExtraPB Clone() {
      return new ActivityExtraPB(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///活动道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "level_reply_Num" field.</summary>
    public const int LevelReplyNumFieldNumber = 2;
    private int levelReplyNum_;
    /// <summary>
    ///活动关卡 每天回复的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelReplyNum {
      get { return levelReplyNum_; }
      set {
        levelReplyNum_ = value;
      }
    }

    /// <summary>Field number for the "level_each_Num_Gem" field.</summary>
    public const int LevelEachNumGemFieldNumber = 3;
    private int levelEachNumGem_;
    /// <summary>
    ///活动关卡  购买每次购买次数消耗的宝石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelEachNumGem {
      get { return levelEachNumGem_; }
      set {
        levelEachNumGem_ = value;
      }
    }

    /// <summary>Field number for the "level_buy_Max" field.</summary>
    public const int LevelBuyMaxFieldNumber = 4;
    private int levelBuyMax_;
    /// <summary>
    ///活动关卡  购买的上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelBuyMax {
      get { return levelBuyMax_; }
      set {
        levelBuyMax_ = value;
      }
    }

    /// <summary>Field number for the "plot_switch" field.</summary>
    public const int PlotSwitchFieldNumber = 5;
    private int plotSwitch_;
    /// <summary>
    ///活动剧情开关 （null and 0 开  1关）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotSwitch {
      get { return plotSwitch_; }
      set {
        plotSwitch_ = value;
      }
    }

    /// <summary>Field number for the "mission_switch" field.</summary>
    public const int MissionSwitchFieldNumber = 6;
    private int missionSwitch_;
    /// <summary>
    ///活动任务开关 （null and 0 开  1关）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionSwitch {
      get { return missionSwitch_; }
      set {
        missionSwitch_ = value;
      }
    }

    /// <summary>Field number for the "second_buy_count" field.</summary>
    public const int SecondBuyCountFieldNumber = 7;
    private int secondBuyCount_;
    /// <summary>
    ///第二个购买按钮次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondBuyCount {
      get { return secondBuyCount_; }
      set {
        secondBuyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityExtraPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityExtraPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (LevelReplyNum != other.LevelReplyNum) return false;
      if (LevelEachNumGem != other.LevelEachNumGem) return false;
      if (LevelBuyMax != other.LevelBuyMax) return false;
      if (PlotSwitch != other.PlotSwitch) return false;
      if (MissionSwitch != other.MissionSwitch) return false;
      if (SecondBuyCount != other.SecondBuyCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (LevelReplyNum != 0) hash ^= LevelReplyNum.GetHashCode();
      if (LevelEachNumGem != 0) hash ^= LevelEachNumGem.GetHashCode();
      if (LevelBuyMax != 0) hash ^= LevelBuyMax.GetHashCode();
      if (PlotSwitch != 0) hash ^= PlotSwitch.GetHashCode();
      if (MissionSwitch != 0) hash ^= MissionSwitch.GetHashCode();
      if (SecondBuyCount != 0) hash ^= SecondBuyCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ItemId);
      }
      if (LevelReplyNum != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LevelReplyNum);
      }
      if (LevelEachNumGem != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(LevelEachNumGem);
      }
      if (LevelBuyMax != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(LevelBuyMax);
      }
      if (PlotSwitch != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(PlotSwitch);
      }
      if (MissionSwitch != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(MissionSwitch);
      }
      if (SecondBuyCount != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(SecondBuyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemId);
      }
      if (LevelReplyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelReplyNum);
      }
      if (LevelEachNumGem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelEachNumGem);
      }
      if (LevelBuyMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelBuyMax);
      }
      if (PlotSwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PlotSwitch);
      }
      if (MissionSwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MissionSwitch);
      }
      if (SecondBuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SecondBuyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityExtraPB other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.LevelReplyNum != 0) {
        LevelReplyNum = other.LevelReplyNum;
      }
      if (other.LevelEachNumGem != 0) {
        LevelEachNumGem = other.LevelEachNumGem;
      }
      if (other.LevelBuyMax != 0) {
        LevelBuyMax = other.LevelBuyMax;
      }
      if (other.PlotSwitch != 0) {
        PlotSwitch = other.PlotSwitch;
      }
      if (other.MissionSwitch != 0) {
        MissionSwitch = other.MissionSwitch;
      }
      if (other.SecondBuyCount != 0) {
        SecondBuyCount = other.SecondBuyCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadSInt32();
            break;
          }
          case 16: {
            LevelReplyNum = input.ReadSInt32();
            break;
          }
          case 24: {
            LevelEachNumGem = input.ReadSInt32();
            break;
          }
          case 32: {
            LevelBuyMax = input.ReadSInt32();
            break;
          }
          case 40: {
            PlotSwitch = input.ReadSInt32();
            break;
          }
          case 48: {
            MissionSwitch = input.ReadSInt32();
            break;
          }
          case 56: {
            SecondBuyCount = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
