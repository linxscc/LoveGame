// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_user_activity_extra_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_user_activity_extra_info.proto</summary>
  public static partial class BeanUserActivityExtraInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_user_activity_extra_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanUserActivityExtraInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNiZWFuX3VzZXJfYWN0aXZpdHlfZXh0cmFfaW5mby5wcm90bxIJY29tLnBy",
            "b3RvGgpiYXNlLnByb3RvItwCChdVc2VyQWN0aXZpdHlFeHRyYUluZm9QQhIP",
            "Cgd1c2VyX2lkGAEgASgRElgKFGFjdGl2aXR5X3R5cGVfc3RhdHVzGAIgAygL",
            "MjouY29tLnByb3RvLlVzZXJBY3Rpdml0eUV4dHJhSW5mb1BCLkFjdGl2aXR5",
            "VHlwZVN0YXR1c0VudHJ5El4KGGFjdGl2aXR5X2lzX29wZW5fb3JfdGltZRgD",
            "IAMoCzI8LmNvbS5wcm90by5Vc2VyQWN0aXZpdHlFeHRyYUluZm9QQi5BY3Rp",
            "dml0eUlzT3Blbk9yVGltZUVudHJ5GjkKF0FjdGl2aXR5VHlwZVN0YXR1c0Vu",
            "dHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaOwoZQWN0aXZp",
            "dHlJc09wZW5PclRpbWVFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
            "KAM6AjgBQj4KH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9jb2xCG1Vz",
            "ZXJBY3Rpdml0eUV4dHJhSW5mb1Byb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserActivityExtraInfoPB), global::Com.Proto.UserActivityExtraInfoPB.Parser, new[]{ "UserId", "ActivityTypeStatus", "ActivityIsOpenOrTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///UserActivityInfoPB UserActivityInfo
  /// </summary>
  public sealed partial class UserActivityExtraInfoPB : pb::IMessage<UserActivityExtraInfoPB> {
    private static readonly pb::MessageParser<UserActivityExtraInfoPB> _parser = new pb::MessageParser<UserActivityExtraInfoPB>(() => new UserActivityExtraInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivityExtraInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserActivityExtraInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityExtraInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityExtraInfoPB(UserActivityExtraInfoPB other) : this() {
      userId_ = other.userId_;
      activityTypeStatus_ = other.activityTypeStatus_.Clone();
      activityIsOpenOrTime_ = other.activityIsOpenOrTime_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityExtraInfoPB Clone() {
      return new UserActivityExtraInfoPB(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "activity_type_status" field.</summary>
    public const int ActivityTypeStatusFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_activityTypeStatus_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> activityTypeStatus_ = new pbc::MapField<int, int>();
    /// <summary>
    ///活动类型领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ActivityTypeStatus {
      get { return activityTypeStatus_; }
    }

    /// <summary>Field number for the "activity_is_open_or_time" field.</summary>
    public const int ActivityIsOpenOrTimeFieldNumber = 3;
    private static readonly pbc::MapField<int, long>.Codec _map_activityIsOpenOrTime_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 26);
    private readonly pbc::MapField<int, long> activityIsOpenOrTime_ = new pbc::MapField<int, long>();
    /// <summary>
    ///活动是否开放和开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> ActivityIsOpenOrTime {
      get { return activityIsOpenOrTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivityExtraInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivityExtraInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!ActivityTypeStatus.Equals(other.ActivityTypeStatus)) return false;
      if (!ActivityIsOpenOrTime.Equals(other.ActivityIsOpenOrTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      hash ^= ActivityTypeStatus.GetHashCode();
      hash ^= ActivityIsOpenOrTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserId);
      }
      activityTypeStatus_.WriteTo(output, _map_activityTypeStatus_codec);
      activityIsOpenOrTime_.WriteTo(output, _map_activityIsOpenOrTime_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserId);
      }
      size += activityTypeStatus_.CalculateSize(_map_activityTypeStatus_codec);
      size += activityIsOpenOrTime_.CalculateSize(_map_activityIsOpenOrTime_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivityExtraInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      activityTypeStatus_.Add(other.activityTypeStatus_);
      activityIsOpenOrTime_.Add(other.activityIsOpenOrTime_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt32();
            break;
          }
          case 18: {
            activityTypeStatus_.AddEntriesFrom(input, _map_activityTypeStatus_codec);
            break;
          }
          case 26: {
            activityIsOpenOrTime_.AddEntriesFrom(input, _map_activityIsOpenOrTime_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
