// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_login.proto</summary>
  public static partial class ControllerLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZjb250cm9sbGVyX2xvZ2luLnByb3RvEgljb20ucHJvdG8aCmJhc2UucHJv",
            "dG8aD2JlYW5fdXNlci5wcm90byLWAQoITG9naW5SZXESDwoHY2hhbm5lbBgB",
            "IAEoCRIUCgxjaGFubmVsX2luZm8YAiABKAkSDwoHYWNjb3VudBgDIAEoCRIL",
            "CgNwd2QYBCABKAkSEQoJbW9iaWxlX29zGAUgASgREhYKDmNsaWVudF92ZXJz",
            "aW9uGAYgASgJEhAKCGxhbmd1YWdlGAcgASgREhEKCXNlcnZlcl9pZBgIIAEo",
            "CRILCgNtYWMYCSABKAkSDAoEaWRmYRgKIAEoCRIOCgZkcml2ZXIYCyABKAkS",
            "CgoCdHMYMiABKAki6wEKCExvZ2luUmVzEgsKA3JldBgBIAEoERISCgphY2Nv",
            "dW50X2lkGAIgASgJEhoKEmNoYW5uZWxfYWNjb3VudF9pZBgDIAEoCRIPCgdj",
            "aGFubmVsGAQgASgJEhQKDGNoYW5uZWxfaW5mbxgFIAEoCRISCgp0aW1lX3N0",
            "YW1wGAYgASgSEiAKBXVzZXJzGAcgAygLMhEuY29tLnByb3RvLlVzZXJQQhIS",
            "CgphZGRpY2F0aW9uGAggASgREhAKCGlzX2FkdWx0GAkgASgREg0KBXRva2Vu",
            "GDMgASgJEhAKCHBheV9saW5rGDQgASgJQjgKH25ldC5nYWxhc3BvcnRzLmJp",
            "Z3N0YXIucHJvdG9jb2xCFUxvZ2luQ29udHJvbGxlclByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanUserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.LoginReq), global::Com.Proto.LoginReq.Parser, new[]{ "Channel", "ChannelInfo", "Account", "Pwd", "MobileOs", "ClientVersion", "Language", "ServerId", "Mac", "Idfa", "Driver", "Ts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.LoginRes), global::Com.Proto.LoginRes.Parser, new[]{ "Ret", "AccountId", "ChannelAccountId", "Channel", "ChannelInfo", "TimeStamp", "Users", "Addication", "IsAdult", "Token", "PayLink" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      account_ = other.account_;
      pwd_ = other.pwd_;
      mobileOs_ = other.mobileOs_;
      clientVersion_ = other.clientVersion_;
      language_ = other.language_;
      serverId_ = other.serverId_;
      mac_ = other.mac_;
      idfa_ = other.idfa_;
      driver_ = other.driver_;
      ts_ = other.ts_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private string channel_ = "";
    /// <summary>
    ///选服渠道  STX SLI等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 2;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息，真实渠道  DB LENOVO  OPPO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 3;
    private string account_ = "";
    /// <summary>
    ///登录账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pwd" field.</summary>
    public const int PwdFieldNumber = 4;
    private string pwd_ = "";
    /// <summary>
    ///登录密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mobile_os" field.</summary>
    public const int MobileOsFieldNumber = 5;
    private int mobileOs_;
    /// <summary>
    ///操作系统0:安卓，1：ios
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MobileOs {
      get { return mobileOs_; }
      set {
        mobileOs_ = value;
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 6;
    private string clientVersion_ = "";
    /// <summary>
    ///客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 7;
    private int language_;
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 8;
    private string serverId_ = "";
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 9;
    private string mac_ = "";
    /// <summary>
    ///mac
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idfa" field.</summary>
    public const int IdfaFieldNumber = 10;
    private string idfa_ = "";
    /// <summary>
    ///idfa
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfa {
      get { return idfa_; }
      set {
        idfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "driver" field.</summary>
    public const int DriverFieldNumber = 11;
    private string driver_ = "";
    /// <summary>
    ///设备标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Driver {
      get { return driver_; }
      set {
        driver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 50;
    private string ts_ = "";
    /// <summary>
    ///以下是渠道登录特定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ts {
      get { return ts_; }
      set {
        ts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (Account != other.Account) return false;
      if (Pwd != other.Pwd) return false;
      if (MobileOs != other.MobileOs) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (Language != other.Language) return false;
      if (ServerId != other.ServerId) return false;
      if (Mac != other.Mac) return false;
      if (Idfa != other.Idfa) return false;
      if (Driver != other.Driver) return false;
      if (Ts != other.Ts) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (MobileOs != 0) hash ^= MobileOs.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Idfa.Length != 0) hash ^= Idfa.GetHashCode();
      if (Driver.Length != 0) hash ^= Driver.GetHashCode();
      if (Ts.Length != 0) hash ^= Ts.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChannelInfo);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Pwd);
      }
      if (MobileOs != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(MobileOs);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClientVersion);
      }
      if (Language != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Language);
      }
      if (ServerId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ServerId);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Mac);
      }
      if (Idfa.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Idfa);
      }
      if (Driver.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Driver);
      }
      if (Ts.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Ts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (MobileOs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MobileOs);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Language);
      }
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Idfa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idfa);
      }
      if (Driver.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Driver);
      }
      if (Ts.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ts);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      if (other.MobileOs != 0) {
        MobileOs = other.MobileOs;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Idfa.Length != 0) {
        Idfa = other.Idfa;
      }
      if (other.Driver.Length != 0) {
        Driver = other.Driver;
      }
      if (other.Ts.Length != 0) {
        Ts = other.Ts;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Channel = input.ReadString();
            break;
          }
          case 18: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
          case 34: {
            Pwd = input.ReadString();
            break;
          }
          case 40: {
            MobileOs = input.ReadSInt32();
            break;
          }
          case 50: {
            ClientVersion = input.ReadString();
            break;
          }
          case 56: {
            Language = input.ReadSInt32();
            break;
          }
          case 66: {
            ServerId = input.ReadString();
            break;
          }
          case 74: {
            Mac = input.ReadString();
            break;
          }
          case 82: {
            Idfa = input.ReadString();
            break;
          }
          case 90: {
            Driver = input.ReadString();
            break;
          }
          case 402: {
            Ts = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRes : pb::IMessage<LoginRes> {
    private static readonly pb::MessageParser<LoginRes> _parser = new pb::MessageParser<LoginRes>(() => new LoginRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRes(LoginRes other) : this() {
      ret_ = other.ret_;
      accountId_ = other.accountId_;
      channelAccountId_ = other.channelAccountId_;
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      timeStamp_ = other.timeStamp_;
      users_ = other.users_.Clone();
      addication_ = other.addication_;
      isAdult_ = other.isAdult_;
      token_ = other.token_;
      payLink_ = other.payLink_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRes Clone() {
      return new LoginRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///生成带前缀的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_account_id" field.</summary>
    public const int ChannelAccountIdFieldNumber = 3;
    private string channelAccountId_ = "";
    /// <summary>
    ///渠道账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelAccountId {
      get { return channelAccountId_; }
      set {
        channelAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private string channel_ = "";
    /// <summary>
    ///渠道 选服渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 5;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息 真实渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private long timeStamp_;
    /// <summary>
    ///登录时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Proto.UserPB> _repeated_users_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Proto.UserPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserPB> users_ = new pbc::RepeatedField<global::Com.Proto.UserPB>();
    /// <summary>
    ///账号下面所有角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserPB> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "addication" field.</summary>
    public const int AddicationFieldNumber = 8;
    private int addication_;
    /// <summary>
    ///是否实名认证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Addication {
      get { return addication_; }
      set {
        addication_ = value;
      }
    }

    /// <summary>Field number for the "is_adult" field.</summary>
    public const int IsAdultFieldNumber = 9;
    private int isAdult_;
    /// <summary>
    ///是否成年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsAdult {
      get { return isAdult_; }
      set {
        isAdult_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 51;
    private string token_ = "";
    /// <summary>
    ///以下是渠道登录特定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pay_link" field.</summary>
    public const int PayLinkFieldNumber = 52;
    private string payLink_ = "";
    /// <summary>
    ///支付链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayLink {
      get { return payLink_; }
      set {
        payLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (AccountId != other.AccountId) return false;
      if (ChannelAccountId != other.ChannelAccountId) return false;
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if(!users_.Equals(other.users_)) return false;
      if (Addication != other.Addication) return false;
      if (IsAdult != other.IsAdult) return false;
      if (Token != other.Token) return false;
      if (PayLink != other.PayLink) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (ChannelAccountId.Length != 0) hash ^= ChannelAccountId.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      hash ^= users_.GetHashCode();
      if (Addication != 0) hash ^= Addication.GetHashCode();
      if (IsAdult != 0) hash ^= IsAdult.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (PayLink.Length != 0) hash ^= PayLink.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (ChannelAccountId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelAccountId);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChannelInfo);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(TimeStamp);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (Addication != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Addication);
      }
      if (IsAdult != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(IsAdult);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(Token);
      }
      if (PayLink.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(PayLink);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (ChannelAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelAccountId);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TimeStamp);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (Addication != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Addication);
      }
      if (IsAdult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsAdult);
      }
      if (Token.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (PayLink.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PayLink);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.ChannelAccountId.Length != 0) {
        ChannelAccountId = other.ChannelAccountId;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      users_.Add(other.users_);
      if (other.Addication != 0) {
        Addication = other.Addication;
      }
      if (other.IsAdult != 0) {
        IsAdult = other.IsAdult;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.PayLink.Length != 0) {
        PayLink = other.PayLink;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            ChannelAccountId = input.ReadString();
            break;
          }
          case 34: {
            Channel = input.ReadString();
            break;
          }
          case 42: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 48: {
            TimeStamp = input.ReadSInt64();
            break;
          }
          case 58: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 64: {
            Addication = input.ReadSInt32();
            break;
          }
          case 72: {
            IsAdult = input.ReadSInt32();
            break;
          }
          case 410: {
            Token = input.ReadString();
            break;
          }
          case 418: {
            PayLink = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
