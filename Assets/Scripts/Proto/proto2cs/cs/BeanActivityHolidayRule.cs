// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_activity_holiday_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_activity_holiday_rule.proto</summary>
  public static partial class BeanActivityHolidayRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_activity_holiday_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanActivityHolidayRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBiZWFuX2FjdGl2aXR5X2hvbGlkYXlfcnVsZS5wcm90bxIJY29tLnByb3Rv",
            "GgpiYXNlLnByb3RvGhBiZWFuX2F3YXJkLnByb3RvInIKEkFjdGl2aXR5RHJh",
            "d1J1bGVQQhITCgthY3Rpdml0eV9pZBgBIAEoERIrCgxjb25zdW1lX3R5cGUY",
            "AiABKAsyFS5jb20ucHJvdG8uRHJvcEl0ZW1QQhIaChJhY3Rpdml0eV9kcmF3",
            "X3R5cGUYAyABKBEiTQoKRHJvcEl0ZW1QQhITCgtyZXNvdXJjZV9pZBgBIAEo",
            "ERIdCghyZXNvdXJjZRgCIAEoDjILLlJlc291cmNlUEISCwoDbnVtGAMgASgR",
            "ImcKFkFjdGl2aXR5RHJvcEl0ZW1SdWxlUEISKQoKZHJvcF9pdGVtcxgBIAEo",
            "CzIVLmNvbS5wcm90by5Ecm9wSXRlbVBCEhMKC3Byb2JhYmlsaXR5GAIgASgR",
            "Eg0KBWxpbWl0GAMgASgRIroBChpBY3Rpdml0eUhvbGlkYXlBd2FyZFJ1bGVQ",
            "QhITCgthY3Rpdml0eV9pZBgBIAEoERI0Cglkcm9wSXRlbXMYAiADKAsyIS5j",
            "b20ucHJvdG8uQWN0aXZpdHlEcm9wSXRlbVJ1bGVQQhIyCg5ob2xpZGF5X21v",
            "ZHVsZRgDIAEoDjIaLmNvbS5wcm90by5Ib2xpZGF5TW9kdWxlUEISDAoEZGVz",
            "YxgEIAEoCRIPCgdqdW1wX3RvGAUgASgJImIKGEFjdGl2ZUhvbGlkYXlBd2Fy",
            "ZFJ1bGVQQhITCgthY3Rpdml0eV9pZBgBIAEoERIOCgZ3ZWlnaHQYAiABKBES",
            "IQoFYXdhcmQYAyADKAsyEi5jb20ucHJvdG8uQXdhcmRQQiJoChZIb2xpZGF5",
            "QXdhcmRQb29sUnVsZVBCEhMKC2FjdGl2aXR5X2lkGAEgASgREjkKEmhvbGlk",
            "YXlfYXdhcmRfcnVsZRgCIAMoCzIdLmNvbS5wcm90by5Ib2xpZGF5QXdhcmRS",
            "dWxlUEIiVgoSSG9saWRheUF3YXJkUnVsZVBCEg4KBnBsYXllchgBIAEoERIw",
            "CgVhd2FyZBgCIAMoCzIhLmNvbS5wcm90by5BY3Rpdml0eURyb3BJdGVtUnVs",
            "ZVBCKn4KD0hvbGlkYXlNb2R1bGVQQhIUChBBQ1RJVklUWV9TSUdOX1VQEAAS",
            "EwoPQUNUSVZJVFlfQ0FSRUVSEAESFQoRQUNUSVZJVFlfVklTSVRJTkcQAhIW",
            "ChJBQ1RJVklUWV9FTkNPVVJBR0UQAxIRCg1BQ1RJVklUWV9NQUxMEARCPAof",
            "bmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIZQWN0aXZpdHlIb2xp",
            "ZGF5UnVsZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Proto.HolidayModulePB), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityDrawRulePB), global::Com.Proto.ActivityDrawRulePB.Parser, new[]{ "ActivityId", "ConsumeType", "ActivityDrawType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DropItemPB), global::Com.Proto.DropItemPB.Parser, new[]{ "ResourceId", "Resource", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityDropItemRulePB), global::Com.Proto.ActivityDropItemRulePB.Parser, new[]{ "DropItems", "Probability", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityHolidayAwardRulePB), global::Com.Proto.ActivityHolidayAwardRulePB.Parser, new[]{ "ActivityId", "DropItems", "HolidayModule", "Desc", "JumpTo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActiveHolidayAwardRulePB), global::Com.Proto.ActiveHolidayAwardRulePB.Parser, new[]{ "ActivityId", "Weight", "Award" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.HolidayAwardPoolRulePB), global::Com.Proto.HolidayAwardPoolRulePB.Parser, new[]{ "ActivityId", "HolidayAwardRule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.HolidayAwardRulePB), global::Com.Proto.HolidayAwardRulePB.Parser, new[]{ "Player", "Award" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum HolidayModulePB {
    [pbr::OriginalName("ACTIVITY_SIGN_UP")] ActivitySignUp = 0,
    [pbr::OriginalName("ACTIVITY_CAREER")] ActivityCareer = 1,
    [pbr::OriginalName("ACTIVITY_VISITING")] ActivityVisiting = 2,
    [pbr::OriginalName("ACTIVITY_ENCOURAGE")] ActivityEncourage = 3,
    [pbr::OriginalName("ACTIVITY_MALL")] ActivityMall = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///抽取信息
  /// </summary>
  public sealed partial class ActivityDrawRulePB : pb::IMessage<ActivityDrawRulePB> {
    private static readonly pb::MessageParser<ActivityDrawRulePB> _parser = new pb::MessageParser<ActivityDrawRulePB>(() => new ActivityDrawRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityDrawRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityDrawRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityDrawRulePB(ActivityDrawRulePB other) : this() {
      activityId_ = other.activityId_;
      ConsumeType = other.consumeType_ != null ? other.ConsumeType.Clone() : null;
      activityDrawType_ = other.activityDrawType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityDrawRulePB Clone() {
      return new ActivityDrawRulePB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "consume_type" field.</summary>
    public const int ConsumeTypeFieldNumber = 2;
    private global::Com.Proto.DropItemPB consumeType_;
    /// <summary>
    ///消耗物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.DropItemPB ConsumeType {
      get { return consumeType_; }
      set {
        consumeType_ = value;
      }
    }

    /// <summary>Field number for the "activity_draw_type" field.</summary>
    public const int ActivityDrawTypeFieldNumber = 3;
    private int activityDrawType_;
    /// <summary>
    ///抽取类型  0是单抽，1是8连抽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityDrawType {
      get { return activityDrawType_; }
      set {
        activityDrawType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityDrawRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityDrawRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (!object.Equals(ConsumeType, other.ConsumeType)) return false;
      if (ActivityDrawType != other.ActivityDrawType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (consumeType_ != null) hash ^= ConsumeType.GetHashCode();
      if (ActivityDrawType != 0) hash ^= ActivityDrawType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (consumeType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConsumeType);
      }
      if (ActivityDrawType != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ActivityDrawType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (consumeType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsumeType);
      }
      if (ActivityDrawType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityDrawType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityDrawRulePB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.consumeType_ != null) {
        if (consumeType_ == null) {
          consumeType_ = new global::Com.Proto.DropItemPB();
        }
        ConsumeType.MergeFrom(other.ConsumeType);
      }
      if (other.ActivityDrawType != 0) {
        ActivityDrawType = other.ActivityDrawType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 18: {
            if (consumeType_ == null) {
              consumeType_ = new global::Com.Proto.DropItemPB();
            }
            input.ReadMessage(consumeType_);
            break;
          }
          case 24: {
            ActivityDrawType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DropItemPB : pb::IMessage<DropItemPB> {
    private static readonly pb::MessageParser<DropItemPB> _parser = new pb::MessageParser<DropItemPB>(() => new DropItemPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropItemPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropItemPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropItemPB(DropItemPB other) : this() {
      resourceId_ = other.resourceId_;
      resource_ = other.resource_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropItemPB Clone() {
      return new DropItemPB(this);
    }

    /// <summary>Field number for the "resource_id" field.</summary>
    public const int ResourceIdFieldNumber = 1;
    private int resourceId_;
    /// <summary>
    ///物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceId {
      get { return resourceId_; }
      set {
        resourceId_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private global::ResourcePB resource_ = 0;
    /// <summary>
    ///物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ResourcePB Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropItemPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropItemPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceId != other.ResourceId) return false;
      if (Resource != other.Resource) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceId != 0) hash ^= ResourceId.GetHashCode();
      if (Resource != 0) hash ^= Resource.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ResourceId);
      }
      if (Resource != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Resource);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResourceId);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Resource);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropItemPB other) {
      if (other == null) {
        return;
      }
      if (other.ResourceId != 0) {
        ResourceId = other.ResourceId;
      }
      if (other.Resource != 0) {
        Resource = other.Resource;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResourceId = input.ReadSInt32();
            break;
          }
          case 16: {
            resource_ = (global::ResourcePB) input.ReadEnum();
            break;
          }
          case 24: {
            Num = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivityDropItemRulePB : pb::IMessage<ActivityDropItemRulePB> {
    private static readonly pb::MessageParser<ActivityDropItemRulePB> _parser = new pb::MessageParser<ActivityDropItemRulePB>(() => new ActivityDropItemRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityDropItemRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityDropItemRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityDropItemRulePB(ActivityDropItemRulePB other) : this() {
      DropItems = other.dropItems_ != null ? other.DropItems.Clone() : null;
      probability_ = other.probability_;
      limit_ = other.limit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityDropItemRulePB Clone() {
      return new ActivityDropItemRulePB(this);
    }

    /// <summary>Field number for the "drop_items" field.</summary>
    public const int DropItemsFieldNumber = 1;
    private global::Com.Proto.DropItemPB dropItems_;
    /// <summary>
    ///掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.DropItemPB DropItems {
      get { return dropItems_; }
      set {
        dropItems_ = value;
      }
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 2;
    private int probability_;
    /// <summary>
    ///掉落概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private int limit_;
    /// <summary>
    ///掉落上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityDropItemRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityDropItemRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DropItems, other.DropItems)) return false;
      if (Probability != other.Probability) return false;
      if (Limit != other.Limit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dropItems_ != null) hash ^= DropItems.GetHashCode();
      if (Probability != 0) hash ^= Probability.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dropItems_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DropItems);
      }
      if (Probability != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Probability);
      }
      if (Limit != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Limit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dropItems_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropItems);
      }
      if (Probability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Probability);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityDropItemRulePB other) {
      if (other == null) {
        return;
      }
      if (other.dropItems_ != null) {
        if (dropItems_ == null) {
          dropItems_ = new global::Com.Proto.DropItemPB();
        }
        DropItems.MergeFrom(other.DropItems);
      }
      if (other.Probability != 0) {
        Probability = other.Probability;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dropItems_ == null) {
              dropItems_ = new global::Com.Proto.DropItemPB();
            }
            input.ReadMessage(dropItems_);
            break;
          }
          case 16: {
            Probability = input.ReadSInt32();
            break;
          }
          case 24: {
            Limit = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///模块掉落信息
  /// </summary>
  public sealed partial class ActivityHolidayAwardRulePB : pb::IMessage<ActivityHolidayAwardRulePB> {
    private static readonly pb::MessageParser<ActivityHolidayAwardRulePB> _parser = new pb::MessageParser<ActivityHolidayAwardRulePB>(() => new ActivityHolidayAwardRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityHolidayAwardRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityHolidayAwardRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityHolidayAwardRulePB(ActivityHolidayAwardRulePB other) : this() {
      activityId_ = other.activityId_;
      dropItems_ = other.dropItems_.Clone();
      holidayModule_ = other.holidayModule_;
      desc_ = other.desc_;
      jumpTo_ = other.jumpTo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityHolidayAwardRulePB Clone() {
      return new ActivityHolidayAwardRulePB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "dropItems" field.</summary>
    public const int DropItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.ActivityDropItemRulePB> _repeated_dropItems_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.ActivityDropItemRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ActivityDropItemRulePB> dropItems_ = new pbc::RepeatedField<global::Com.Proto.ActivityDropItemRulePB>();
    /// <summary>
    ///掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ActivityDropItemRulePB> DropItems {
      get { return dropItems_; }
    }

    /// <summary>Field number for the "holiday_module" field.</summary>
    public const int HolidayModuleFieldNumber = 3;
    private global::Com.Proto.HolidayModulePB holidayModule_ = 0;
    /// <summary>
    ///掉落模块
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.HolidayModulePB HolidayModule {
      get { return holidayModule_; }
      set {
        holidayModule_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 4;
    private string desc_ = "";
    /// <summary>
    ///描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jump_to" field.</summary>
    public const int JumpToFieldNumber = 5;
    private string jumpTo_ = "";
    /// <summary>
    ///跳转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JumpTo {
      get { return jumpTo_; }
      set {
        jumpTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityHolidayAwardRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityHolidayAwardRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if(!dropItems_.Equals(other.dropItems_)) return false;
      if (HolidayModule != other.HolidayModule) return false;
      if (Desc != other.Desc) return false;
      if (JumpTo != other.JumpTo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      hash ^= dropItems_.GetHashCode();
      if (HolidayModule != 0) hash ^= HolidayModule.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (JumpTo.Length != 0) hash ^= JumpTo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      dropItems_.WriteTo(output, _repeated_dropItems_codec);
      if (HolidayModule != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) HolidayModule);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (JumpTo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(JumpTo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      size += dropItems_.CalculateSize(_repeated_dropItems_codec);
      if (HolidayModule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HolidayModule);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (JumpTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JumpTo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityHolidayAwardRulePB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      dropItems_.Add(other.dropItems_);
      if (other.HolidayModule != 0) {
        HolidayModule = other.HolidayModule;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.JumpTo.Length != 0) {
        JumpTo = other.JumpTo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 18: {
            dropItems_.AddEntriesFrom(input, _repeated_dropItems_codec);
            break;
          }
          case 24: {
            holidayModule_ = (global::Com.Proto.HolidayModulePB) input.ReadEnum();
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
          case 42: {
            JumpTo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveHolidayAwardRulePB : pb::IMessage<ActiveHolidayAwardRulePB> {
    private static readonly pb::MessageParser<ActiveHolidayAwardRulePB> _parser = new pb::MessageParser<ActiveHolidayAwardRulePB>(() => new ActiveHolidayAwardRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveHolidayAwardRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveHolidayAwardRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveHolidayAwardRulePB(ActiveHolidayAwardRulePB other) : this() {
      activityId_ = other.activityId_;
      weight_ = other.weight_;
      award_ = other.award_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveHolidayAwardRulePB Clone() {
      return new ActiveHolidayAwardRulePB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private int weight_;
    /// <summary>
    ///权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_award_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> award_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Award {
      get { return award_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveHolidayAwardRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveHolidayAwardRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (Weight != other.Weight) return false;
      if(!award_.Equals(other.award_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      hash ^= award_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (Weight != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Weight);
      }
      award_.WriteTo(output, _repeated_award_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Weight);
      }
      size += award_.CalculateSize(_repeated_award_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveHolidayAwardRulePB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      award_.Add(other.award_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            Weight = input.ReadSInt32();
            break;
          }
          case 26: {
            award_.AddEntriesFrom(input, _repeated_award_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HolidayAwardPoolRulePB : pb::IMessage<HolidayAwardPoolRulePB> {
    private static readonly pb::MessageParser<HolidayAwardPoolRulePB> _parser = new pb::MessageParser<HolidayAwardPoolRulePB>(() => new HolidayAwardPoolRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HolidayAwardPoolRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HolidayAwardPoolRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HolidayAwardPoolRulePB(HolidayAwardPoolRulePB other) : this() {
      activityId_ = other.activityId_;
      holidayAwardRule_ = other.holidayAwardRule_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HolidayAwardPoolRulePB Clone() {
      return new HolidayAwardPoolRulePB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "holiday_award_rule" field.</summary>
    public const int HolidayAwardRuleFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.HolidayAwardRulePB> _repeated_holidayAwardRule_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.HolidayAwardRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.HolidayAwardRulePB> holidayAwardRule_ = new pbc::RepeatedField<global::Com.Proto.HolidayAwardRulePB>();
    /// <summary>
    ///奖励池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.HolidayAwardRulePB> HolidayAwardRule {
      get { return holidayAwardRule_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HolidayAwardPoolRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HolidayAwardPoolRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if(!holidayAwardRule_.Equals(other.holidayAwardRule_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      hash ^= holidayAwardRule_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      holidayAwardRule_.WriteTo(output, _repeated_holidayAwardRule_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      size += holidayAwardRule_.CalculateSize(_repeated_holidayAwardRule_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HolidayAwardPoolRulePB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      holidayAwardRule_.Add(other.holidayAwardRule_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 18: {
            holidayAwardRule_.AddEntriesFrom(input, _repeated_holidayAwardRule_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HolidayAwardRulePB : pb::IMessage<HolidayAwardRulePB> {
    private static readonly pb::MessageParser<HolidayAwardRulePB> _parser = new pb::MessageParser<HolidayAwardRulePB>(() => new HolidayAwardRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HolidayAwardRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityHolidayRuleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HolidayAwardRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HolidayAwardRulePB(HolidayAwardRulePB other) : this() {
      player_ = other.player_;
      award_ = other.award_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HolidayAwardRulePB Clone() {
      return new HolidayAwardRulePB(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private int player_;
    /// <summary>
    ///NPC ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.ActivityDropItemRulePB> _repeated_award_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.ActivityDropItemRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ActivityDropItemRulePB> award_ = new pbc::RepeatedField<global::Com.Proto.ActivityDropItemRulePB>();
    /// <summary>
    ///奖励内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ActivityDropItemRulePB> Award {
      get { return award_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HolidayAwardRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HolidayAwardRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if(!award_.Equals(other.award_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      hash ^= award_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Player);
      }
      award_.WriteTo(output, _repeated_award_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Player);
      }
      size += award_.CalculateSize(_repeated_award_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HolidayAwardRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      award_.Add(other.award_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Player = input.ReadSInt32();
            break;
          }
          case 18: {
            award_.AddEntriesFrom(input, _repeated_award_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
