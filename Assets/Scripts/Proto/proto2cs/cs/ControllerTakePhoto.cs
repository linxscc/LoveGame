// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_take_photo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_take_photo.proto</summary>
  public static partial class ControllerTakePhotoReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_take_photo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerTakePhotoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtjb250cm9sbGVyX3Rha2VfcGhvdG8ucHJvdG8SCWNvbS5wcm90bxoaYmVh",
            "bl90YWtlX3Bob3RvX3J1bGUucHJvdG8aGmJlYW5fdXNlcl90YWtlX3Bob3Rv",
            "LnByb3RvGhBiZWFuX2F3YXJkLnByb3RvGhViZWFuX3VzZXJfbW9uZXkucHJv",
            "dG8imgEKDlRha2VQaG90b1J1bGVzEgsKA3JldBgBIAEoERIzCg90YWtlX3R1",
            "bGVfcnVsZXMYAiADKAsyGi5jb20ucHJvdG8uVGFrZVBob3RvUnVsZVBCEkYK",
            "GnRha2VfcGhvdG9fYnV5X2NvdW50X3J1bGVzGAMgAygLMiIuY29tLnByb3Rv",
            "LlRha2VQaG90b0J1eUNvdW50UnVsZVBCIhkKF0dldFVzZXJUYWtlUGhvdG9J",
            "bmZvUmVxIk0KF0dldFVzZXJUYWtlUGhvdG9JbmZvUmVzEgsKA3JldBgBIAEo",
            "ERISCgp0YWtlX2NvdW50GAIgASgREhEKCWJ1eV9jb3VudBgDIAEoESITChFT",
            "dGFydFRha2VQaG90b1JlcSI0ChFTdGFydFRha2VQaG90b1JlcxILCgNyZXQY",
            "ASABKBESEgoKcGljdHVyZV9pZBgCIAMoESJBCghTY29yZVJlcRI1ChB0YWtl",
            "X3Bob3RvX3Njb3JlGAEgAygLMhsuY29tLnByb3RvLlRha2VQaG90b1Njb3Jl",
            "UEIiTwoQVGFrZVBob3RvU2NvcmVQQhIKCgJpZBgBIAEoERIvCg1wcmhvdG9f",
            "cmVzdWx0GAIgAygLMhguY29tLnByb3RvLlBob3RvUmVzdWx0UEIiPQoNUGhv",
            "dG9SZXN1bHRQQhINCgVzdGFnZRgBIAEoERIOCgZwYXJhbXMYAiABKAkSDQoF",
            "c2NvcmUYAyABKBEiOQoIU2NvcmVSZXMSCwoDcmV0GAEgASgREiAKBGF3cmQY",
            "AiADKAsyEi5jb20ucHJvdG8uQXdhcmRQQiISChBCdXlQaG90b0NvdW50UmVx",
            "IokBChBCdXlQaG90b0NvdW50UmVzEgsKA3JldBgBIAEoERIqCgp1c2VyX21v",
            "bmV5GAIgASgLMhYuY29tLnByb3RvLlVzZXJNb25leVBCEjwKFHVzZXJfdGFr",
            "ZV9waG90b19pbmZvGAMgASgLMh4uY29tLnByb3RvLlVzZXJUYWtlUGhvdG9J",
            "bmZvUEJCPAofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIZVGFr",
            "ZVBob3RvQ29udHJvbGxlclByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Proto.BeanTakePhotoRuleReflection.Descriptor, global::Com.Proto.BeanUserTakePhotoReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.TakePhotoRules), global::Com.Proto.TakePhotoRules.Parser, new[]{ "Ret", "TakeTuleRules", "TakePhotoBuyCountRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GetUserTakePhotoInfoReq), global::Com.Proto.GetUserTakePhotoInfoReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GetUserTakePhotoInfoRes), global::Com.Proto.GetUserTakePhotoInfoRes.Parser, new[]{ "Ret", "TakeCount", "BuyCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.StartTakePhotoReq), global::Com.Proto.StartTakePhotoReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.StartTakePhotoRes), global::Com.Proto.StartTakePhotoRes.Parser, new[]{ "Ret", "PictureId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ScoreReq), global::Com.Proto.ScoreReq.Parser, new[]{ "TakePhotoScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.TakePhotoScorePB), global::Com.Proto.TakePhotoScorePB.Parser, new[]{ "Id", "PrhotoResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PhotoResultPB), global::Com.Proto.PhotoResultPB.Parser, new[]{ "Stage", "Params", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ScoreRes), global::Com.Proto.ScoreRes.Parser, new[]{ "Ret", "Awrd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BuyPhotoCountReq), global::Com.Proto.BuyPhotoCountReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BuyPhotoCountRes), global::Com.Proto.BuyPhotoCountRes.Parser, new[]{ "Ret", "UserMoney", "UserTakePhotoInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TakePhotoRules : pb::IMessage<TakePhotoRules> {
    private static readonly pb::MessageParser<TakePhotoRules> _parser = new pb::MessageParser<TakePhotoRules>(() => new TakePhotoRules());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakePhotoRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoRules(TakePhotoRules other) : this() {
      ret_ = other.ret_;
      takeTuleRules_ = other.takeTuleRules_.Clone();
      takePhotoBuyCountRules_ = other.takePhotoBuyCountRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoRules Clone() {
      return new TakePhotoRules(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "take_tule_rules" field.</summary>
    public const int TakeTuleRulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.TakePhotoRulePB> _repeated_takeTuleRules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.TakePhotoRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.TakePhotoRulePB> takeTuleRules_ = new pbc::RepeatedField<global::Com.Proto.TakePhotoRulePB>();
    /// <summary>
    ///拍照规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.TakePhotoRulePB> TakeTuleRules {
      get { return takeTuleRules_; }
    }

    /// <summary>Field number for the "take_photo_buy_count_rules" field.</summary>
    public const int TakePhotoBuyCountRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.TakePhotoBuyCountRulePB> _repeated_takePhotoBuyCountRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.TakePhotoBuyCountRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.TakePhotoBuyCountRulePB> takePhotoBuyCountRules_ = new pbc::RepeatedField<global::Com.Proto.TakePhotoBuyCountRulePB>();
    /// <summary>
    ///购买拍照次数规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.TakePhotoBuyCountRulePB> TakePhotoBuyCountRules {
      get { return takePhotoBuyCountRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakePhotoRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakePhotoRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!takeTuleRules_.Equals(other.takeTuleRules_)) return false;
      if(!takePhotoBuyCountRules_.Equals(other.takePhotoBuyCountRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= takeTuleRules_.GetHashCode();
      hash ^= takePhotoBuyCountRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      takeTuleRules_.WriteTo(output, _repeated_takeTuleRules_codec);
      takePhotoBuyCountRules_.WriteTo(output, _repeated_takePhotoBuyCountRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += takeTuleRules_.CalculateSize(_repeated_takeTuleRules_codec);
      size += takePhotoBuyCountRules_.CalculateSize(_repeated_takePhotoBuyCountRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakePhotoRules other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      takeTuleRules_.Add(other.takeTuleRules_);
      takePhotoBuyCountRules_.Add(other.takePhotoBuyCountRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            takeTuleRules_.AddEntriesFrom(input, _repeated_takeTuleRules_codec);
            break;
          }
          case 26: {
            takePhotoBuyCountRules_.AddEntriesFrom(input, _repeated_takePhotoBuyCountRules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// /takePhotoC/getInfo
  /// </summary>
  public sealed partial class GetUserTakePhotoInfoReq : pb::IMessage<GetUserTakePhotoInfoReq> {
    private static readonly pb::MessageParser<GetUserTakePhotoInfoReq> _parser = new pb::MessageParser<GetUserTakePhotoInfoReq>(() => new GetUserTakePhotoInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserTakePhotoInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserTakePhotoInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserTakePhotoInfoReq(GetUserTakePhotoInfoReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserTakePhotoInfoReq Clone() {
      return new GetUserTakePhotoInfoReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserTakePhotoInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserTakePhotoInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserTakePhotoInfoReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetUserTakePhotoInfoRes : pb::IMessage<GetUserTakePhotoInfoRes> {
    private static readonly pb::MessageParser<GetUserTakePhotoInfoRes> _parser = new pb::MessageParser<GetUserTakePhotoInfoRes>(() => new GetUserTakePhotoInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserTakePhotoInfoRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserTakePhotoInfoRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserTakePhotoInfoRes(GetUserTakePhotoInfoRes other) : this() {
      ret_ = other.ret_;
      takeCount_ = other.takeCount_;
      buyCount_ = other.buyCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserTakePhotoInfoRes Clone() {
      return new GetUserTakePhotoInfoRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "take_count" field.</summary>
    public const int TakeCountFieldNumber = 2;
    private int takeCount_;
    /// <summary>
    ///已拍照次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TakeCount {
      get { return takeCount_; }
      set {
        takeCount_ = value;
      }
    }

    /// <summary>Field number for the "buy_count" field.</summary>
    public const int BuyCountFieldNumber = 3;
    private int buyCount_;
    /// <summary>
    ///购买拍照次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserTakePhotoInfoRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserTakePhotoInfoRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (TakeCount != other.TakeCount) return false;
      if (BuyCount != other.BuyCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (TakeCount != 0) hash ^= TakeCount.GetHashCode();
      if (BuyCount != 0) hash ^= BuyCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (TakeCount != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TakeCount);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(BuyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (TakeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TakeCount);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BuyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserTakePhotoInfoRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.TakeCount != 0) {
        TakeCount = other.TakeCount;
      }
      if (other.BuyCount != 0) {
        BuyCount = other.BuyCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 16: {
            TakeCount = input.ReadSInt32();
            break;
          }
          case 24: {
            BuyCount = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// /takePhotoC/startTakePhoto 请求开始拍照
  /// </summary>
  public sealed partial class StartTakePhotoReq : pb::IMessage<StartTakePhotoReq> {
    private static readonly pb::MessageParser<StartTakePhotoReq> _parser = new pb::MessageParser<StartTakePhotoReq>(() => new StartTakePhotoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartTakePhotoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTakePhotoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTakePhotoReq(StartTakePhotoReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTakePhotoReq Clone() {
      return new StartTakePhotoReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartTakePhotoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartTakePhotoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartTakePhotoReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StartTakePhotoRes : pb::IMessage<StartTakePhotoRes> {
    private static readonly pb::MessageParser<StartTakePhotoRes> _parser = new pb::MessageParser<StartTakePhotoRes>(() => new StartTakePhotoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartTakePhotoRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTakePhotoRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTakePhotoRes(StartTakePhotoRes other) : this() {
      ret_ = other.ret_;
      pictureId_ = other.pictureId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartTakePhotoRes Clone() {
      return new StartTakePhotoRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "picture_id" field.</summary>
    public const int PictureIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_pictureId_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> pictureId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///照片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PictureId {
      get { return pictureId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartTakePhotoRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartTakePhotoRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!pictureId_.Equals(other.pictureId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= pictureId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      pictureId_.WriteTo(output, _repeated_pictureId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += pictureId_.CalculateSize(_repeated_pictureId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartTakePhotoRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      pictureId_.Add(other.pictureId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18:
          case 16: {
            pictureId_.AddEntriesFrom(input, _repeated_pictureId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// /takePhotoC/score
  /// </summary>
  public sealed partial class ScoreReq : pb::IMessage<ScoreReq> {
    private static readonly pb::MessageParser<ScoreReq> _parser = new pb::MessageParser<ScoreReq>(() => new ScoreReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreReq(ScoreReq other) : this() {
      takePhotoScore_ = other.takePhotoScore_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreReq Clone() {
      return new ScoreReq(this);
    }

    /// <summary>Field number for the "take_photo_score" field.</summary>
    public const int TakePhotoScoreFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Proto.TakePhotoScorePB> _repeated_takePhotoScore_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Proto.TakePhotoScorePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.TakePhotoScorePB> takePhotoScore_ = new pbc::RepeatedField<global::Com.Proto.TakePhotoScorePB>();
    /// <summary>
    ///两张图片的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.TakePhotoScorePB> TakePhotoScore {
      get { return takePhotoScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!takePhotoScore_.Equals(other.takePhotoScore_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= takePhotoScore_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      takePhotoScore_.WriteTo(output, _repeated_takePhotoScore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += takePhotoScore_.CalculateSize(_repeated_takePhotoScore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreReq other) {
      if (other == null) {
        return;
      }
      takePhotoScore_.Add(other.takePhotoScore_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            takePhotoScore_.AddEntriesFrom(input, _repeated_takePhotoScore_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakePhotoScorePB : pb::IMessage<TakePhotoScorePB> {
    private static readonly pb::MessageParser<TakePhotoScorePB> _parser = new pb::MessageParser<TakePhotoScorePB>(() => new TakePhotoScorePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakePhotoScorePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoScorePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoScorePB(TakePhotoScorePB other) : this() {
      id_ = other.id_;
      prhotoResult_ = other.prhotoResult_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakePhotoScorePB Clone() {
      return new TakePhotoScorePB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///自增图片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "prhoto_result" field.</summary>
    public const int PrhotoResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.PhotoResultPB> _repeated_prhotoResult_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.PhotoResultPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.PhotoResultPB> prhotoResult_ = new pbc::RepeatedField<global::Com.Proto.PhotoResultPB>();
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.PhotoResultPB> PrhotoResult {
      get { return prhotoResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakePhotoScorePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakePhotoScorePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!prhotoResult_.Equals(other.prhotoResult_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= prhotoResult_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      prhotoResult_.WriteTo(output, _repeated_prhotoResult_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      size += prhotoResult_.CalculateSize(_repeated_prhotoResult_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakePhotoScorePB other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      prhotoResult_.Add(other.prhotoResult_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 18: {
            prhotoResult_.AddEntriesFrom(input, _repeated_prhotoResult_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoResultPB : pb::IMessage<PhotoResultPB> {
    private static readonly pb::MessageParser<PhotoResultPB> _parser = new pb::MessageParser<PhotoResultPB>(() => new PhotoResultPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoResultPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoResultPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoResultPB(PhotoResultPB other) : this() {
      stage_ = other.stage_;
      params_ = other.params_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoResultPB Clone() {
      return new PhotoResultPB(this);
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private int stage_;
    /// <summary>
    ///阶段  0是焦距阶段，1是取景阶段，2是对焦阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private string params_ = "";
    /// <summary>
    ///结果参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoResultPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoResultPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stage != other.Stage) return false;
      if (Params != other.Params) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Stage);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Params);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Stage);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Params);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoResultPB other) {
      if (other == null) {
        return;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stage = input.ReadSInt32();
            break;
          }
          case 18: {
            Params = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoreRes : pb::IMessage<ScoreRes> {
    private static readonly pb::MessageParser<ScoreRes> _parser = new pb::MessageParser<ScoreRes>(() => new ScoreRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreRes(ScoreRes other) : this() {
      ret_ = other.ret_;
      awrd_ = other.awrd_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreRes Clone() {
      return new ScoreRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "awrd" field.</summary>
    public const int AwrdFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awrd_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awrd_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awrd {
      get { return awrd_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!awrd_.Equals(other.awrd_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= awrd_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      awrd_.WriteTo(output, _repeated_awrd_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += awrd_.CalculateSize(_repeated_awrd_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      awrd_.Add(other.awrd_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            awrd_.AddEntriesFrom(input, _repeated_awrd_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买拍照次数  /takePhotoC/buyCount
  /// </summary>
  public sealed partial class BuyPhotoCountReq : pb::IMessage<BuyPhotoCountReq> {
    private static readonly pb::MessageParser<BuyPhotoCountReq> _parser = new pb::MessageParser<BuyPhotoCountReq>(() => new BuyPhotoCountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyPhotoCountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyPhotoCountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyPhotoCountReq(BuyPhotoCountReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyPhotoCountReq Clone() {
      return new BuyPhotoCountReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyPhotoCountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyPhotoCountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyPhotoCountReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BuyPhotoCountRes : pb::IMessage<BuyPhotoCountRes> {
    private static readonly pb::MessageParser<BuyPhotoCountRes> _parser = new pb::MessageParser<BuyPhotoCountRes>(() => new BuyPhotoCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyPhotoCountRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerTakePhotoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyPhotoCountRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyPhotoCountRes(BuyPhotoCountRes other) : this() {
      ret_ = other.ret_;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
      UserTakePhotoInfo = other.userTakePhotoInfo_ != null ? other.UserTakePhotoInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyPhotoCountRes Clone() {
      return new BuyPhotoCountRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 2;
    private global::Com.Proto.UserMoneyPB userMoney_;
    /// <summary>
    ///玩家钻石信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "user_take_photo_info" field.</summary>
    public const int UserTakePhotoInfoFieldNumber = 3;
    private global::Com.Proto.UserTakePhotoInfoPB userTakePhotoInfo_;
    /// <summary>
    ///玩家拍照信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserTakePhotoInfoPB UserTakePhotoInfo {
      get { return userTakePhotoInfo_; }
      set {
        userTakePhotoInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyPhotoCountRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyPhotoCountRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      if (!object.Equals(UserTakePhotoInfo, other.UserTakePhotoInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      if (userTakePhotoInfo_ != null) hash ^= UserTakePhotoInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserMoney);
      }
      if (userTakePhotoInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserTakePhotoInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      if (userTakePhotoInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserTakePhotoInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyPhotoCountRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
      if (other.userTakePhotoInfo_ != null) {
        if (userTakePhotoInfo_ == null) {
          userTakePhotoInfo_ = new global::Com.Proto.UserTakePhotoInfoPB();
        }
        UserTakePhotoInfo.MergeFrom(other.UserTakePhotoInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
          case 26: {
            if (userTakePhotoInfo_ == null) {
              userTakePhotoInfo_ = new global::Com.Proto.UserTakePhotoInfoPB();
            }
            input.ReadMessage(userTakePhotoInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
