// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_commodity_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_commodity_info.proto</summary>
  public static partial class BeanCommodityInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_commodity_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanCommodityInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChliZWFuX2NvbW1vZGl0eV9pbmZvLnByb3RvEgljb20ucHJvdG8aCmJhc2Uu",
            "cHJvdG8imQEKD0NvbW1vZGl0eUluZm9QQhIUCgxjb21tb2RpdHlfaWQYASAB",
            "KBESKAoOY29tbW9kaXR5X3R5cGUYAiABKA4yEC5Db21tb2RpdHlUeXBlUEIS",
            "EgoKcHJvZHVjdF9pZBgDIAEoCRINCgVwcmljZRgEIAEoARIRCglhbW91bnRS",
            "bWIYBSABKAESEAoIY3VycmVuY3kYBiABKAlCNgofbmV0LmdhbGFzcG9ydHMu",
            "Ymlnc3Rhci5wcm90b2NvbEITQ29tbW9kaXR5SW5mb1Byb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CommodityInfoPB), global::Com.Proto.CommodityInfoPB.Parser, new[]{ "CommodityId", "CommodityType", "ProductId", "Price", "AmountRmb", "Currency" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///CommodityInfoPB CommodityInfo
  /// </summary>
  public sealed partial class CommodityInfoPB : pb::IMessage<CommodityInfoPB> {
    private static readonly pb::MessageParser<CommodityInfoPB> _parser = new pb::MessageParser<CommodityInfoPB>(() => new CommodityInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommodityInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanCommodityInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityInfoPB(CommodityInfoPB other) : this() {
      commodityId_ = other.commodityId_;
      commodityType_ = other.commodityType_;
      productId_ = other.productId_;
      price_ = other.price_;
      amountRmb_ = other.amountRmb_;
      currency_ = other.currency_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityInfoPB Clone() {
      return new CommodityInfoPB(this);
    }

    /// <summary>Field number for the "commodity_id" field.</summary>
    public const int CommodityIdFieldNumber = 1;
    private int commodityId_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommodityId {
      get { return commodityId_; }
      set {
        commodityId_ = value;
      }
    }

    /// <summary>Field number for the "commodity_type" field.</summary>
    public const int CommodityTypeFieldNumber = 2;
    private global::CommodityTypePB commodityType_ = 0;
    /// <summary>
    ///商品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CommodityTypePB CommodityType {
      get { return commodityType_; }
      set {
        commodityType_ = value;
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 3;
    private string productId_ = "";
    /// <summary>
    ///档位(计费点)Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    /// <summary>
    ///卖价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "amountRmb" field.</summary>
    public const int AmountRmbFieldNumber = 5;
    private double amountRmb_;
    /// <summary>
    ///金额 rmb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AmountRmb {
      get { return amountRmb_; }
      set {
        amountRmb_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///币种
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommodityInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommodityInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommodityId != other.CommodityId) return false;
      if (CommodityType != other.CommodityType) return false;
      if (ProductId != other.ProductId) return false;
      if (Price != other.Price) return false;
      if (AmountRmb != other.AmountRmb) return false;
      if (Currency != other.Currency) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommodityId != 0) hash ^= CommodityId.GetHashCode();
      if (CommodityType != 0) hash ^= CommodityType.GetHashCode();
      if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (AmountRmb != 0D) hash ^= AmountRmb.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommodityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CommodityId);
      }
      if (CommodityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CommodityType);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductId);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (AmountRmb != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AmountRmb);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommodityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CommodityId);
      }
      if (CommodityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommodityType);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (AmountRmb != 0D) {
        size += 1 + 8;
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommodityInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.CommodityId != 0) {
        CommodityId = other.CommodityId;
      }
      if (other.CommodityType != 0) {
        CommodityType = other.CommodityType;
      }
      if (other.ProductId.Length != 0) {
        ProductId = other.ProductId;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.AmountRmb != 0D) {
        AmountRmb = other.AmountRmb;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommodityId = input.ReadSInt32();
            break;
          }
          case 16: {
            commodityType_ = (global::CommodityTypePB) input.ReadEnum();
            break;
          }
          case 26: {
            ProductId = input.ReadString();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 41: {
            AmountRmb = input.ReadDouble();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
