// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_base.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto.Server {

  /// <summary>Holder for reflection information generated from server_base.proto</summary>
  public static partial class ServerBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for server_base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFzZXJ2ZXJfYmFzZS5wcm90bxIQY29tLnByb3RvLnNlcnZlciIVCgZJbnRS",
            "ZXESCwoDcmVxGAEgASgRIiIKBkludFJlcxILCgNyZXQYASABKBESCwoDcmVz",
            "GAIgASgRIhgKCVN0cmluZ1JlcRILCgNyZXEYASABKAkiJQoJU3RyaW5nUmVz",
            "EgsKA3JldBgBIAEoERILCgNyZXMYAiABKAkiUQoOQ2FjaGVWZXJzaW9uUEIS",
            "DAoEZ2FtZRgBIAEoERIPCgdjaGFubmVsGAIgASgJEg8KB2NvbnRleHQYAyAB",
            "KAkSDwoHdmVyc2lvbhgEIAEoESKmAQoMSG90VmVyc2lvblBCEgwKBGdhbWUY",
            "ASABKBESDwoHY2hhbm5lbBgCIAEoCRIUCgxjaGFubmVsX2luZm8YAyABKAkS",
            "DwoHdmVyc2lvbhgEIAEoERITCgtob3RfdmVyc2lvbhgFIAEoERIMCgRhZGRy",
            "GAYgASgJEgsKA21kNRgHIAEoCRIUCgxnYW1lX3ZlcnNpb24YCCABKAkSCgoC",
            "aWQYCSABKBEifAoNTWFpblZlcnNpb25QQhIMCgRnYW1lGAEgASgREg8KB2No",
            "YW5uZWwYAiABKAkSFAoMY2hhbm5lbF9pbmZvGAMgASgJEhMKC21pbl92ZXJz",
            "aW9uGAQgASgREhMKC21heF92ZXJzaW9uGAUgASgREgwKBGFkZHIYBiABKAki",
            "nwEKEEdhbWVTZXJ2ZXJJbmZvUEISDwoHY2hhbm5lbBgBIAEoCRIRCglzZXJ2",
            "ZXJfaWQYAiABKAkSDAoEbmFtZRgDIAEoCRIMCgRhZGRyGAQgASgJEgwKBHBv",
            "cnQYBSABKBESDAoEZGVzYxgGIAEoCRIRCglhZ2dyZWdhdGUYByABKBESDgoG",
            "c3RhdHVzGAggASgREgwKBHNvcnQYCSABKBEibAoPSW1nU2VydmVySW5mb1BC",
            "EhEKCXNlcnZlcl9pZBgBIAEoCRIMCgRuYW1lGAIgASgJEgwKBGFkZHIYAyAB",
            "KAkSDAoEcG9ydBgEIAEoERIOCgZmb2xkZXIYBSABKAkSDAoEZGVzYxgGIAEo",
            "CSJyChVNYXRjaGluZ1NlcnZpY2VJbmZvUEISEQoJc2VydmVyX2lkGAEgASgJ",
            "EgwKBG5hbWUYAiABKAkSDAoEYWRkchgDIAEoCRIMCgRwb3J0GAQgASgREg4K",
            "BmZvbGRlchgFIAEoCRIMCgRkZXNjGAYgASgJIpsBCghOb3RpY2VQQhIKCgJp",
            "ZBgBIAEoERIMCgRnYW1lGAIgASgREg8KB2NoYW5uZWwYAyABKAkSFAoMY2hh",
            "bm5lbF9pbmZvGAQgASgJEgwKBHR5cGUYBSABKBESCwoDdXNlGAYgASgREg0K",
            "BXRpdGxlGAcgASgJEg8KB2NvbnRlbnQYCCABKAkSEwoLY3JlYXRlX3RpbWUY",
            "CSABKBIiqwEKD1N3aXRjaENvbnRyb2xQQhIMCgRnYW1lGAEgASgREg8KB2No",
            "YW5uZWwYAiABKAkSDwoHdmVyc2lvbhgDIAEoERIRCgljb3B5cmlnaHQYBCAB",
            "KBESEAoIcmVjaGFyZ2UYBSABKBESDAoEY29kZRgGIAEoERINCgVzaGFyZRgH",
            "IAEoERIZChFjdXN0b21lcl9zZXJ2aWNlcxgIIAEoERILCgNleHQYCSABKAki",
            "UAoMRGlzY2xhaW1lclBCEgwKBGdhbWUYASABKBESEAoIbGFuZ3VhZ2UYAiAB",
            "KBESDwoHY29udGVudBgDIAEoCRIPCgd2YXJzaW9uGAQgASgRImIKCkdhbWVE",
            "ZWFkUEISDAoEZ2FtZRgBIAEoERIPCgdjaGFubmVsGAIgASgJEhQKDGNoYW5u",
            "ZWxfaW5mbxgDIAEoCRIPCgd2ZXJzaW9uGAQgASgREg4KBnN0YXR1cxgFIAEo",
            "EUIfQgpCYXNlUHJvdG9zqgIQQ29tLlByb3RvLlNlcnZlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.IntReq), global::Com.Proto.Server.IntReq.Parser, new[]{ "Req" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.IntRes), global::Com.Proto.Server.IntRes.Parser, new[]{ "Ret", "Res" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.StringReq), global::Com.Proto.Server.StringReq.Parser, new[]{ "Req" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.StringRes), global::Com.Proto.Server.StringRes.Parser, new[]{ "Ret", "Res" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.CacheVersionPB), global::Com.Proto.Server.CacheVersionPB.Parser, new[]{ "Game", "Channel", "Context", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.HotVersionPB), global::Com.Proto.Server.HotVersionPB.Parser, new[]{ "Game", "Channel", "ChannelInfo", "Version", "HotVersion", "Addr", "Md5", "GameVersion", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.MainVersionPB), global::Com.Proto.Server.MainVersionPB.Parser, new[]{ "Game", "Channel", "ChannelInfo", "MinVersion", "MaxVersion", "Addr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.GameServerInfoPB), global::Com.Proto.Server.GameServerInfoPB.Parser, new[]{ "Channel", "ServerId", "Name", "Addr", "Port", "Desc", "Aggregate", "Status", "Sort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.ImgServerInfoPB), global::Com.Proto.Server.ImgServerInfoPB.Parser, new[]{ "ServerId", "Name", "Addr", "Port", "Folder", "Desc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.MatchingServiceInfoPB), global::Com.Proto.Server.MatchingServiceInfoPB.Parser, new[]{ "ServerId", "Name", "Addr", "Port", "Folder", "Desc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.NoticePB), global::Com.Proto.Server.NoticePB.Parser, new[]{ "Id", "Game", "Channel", "ChannelInfo", "Type", "Use", "Title", "Content", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.SwitchControlPB), global::Com.Proto.Server.SwitchControlPB.Parser, new[]{ "Game", "Channel", "Version", "Copyright", "Recharge", "Code", "Share", "CustomerServices", "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.DisclaimerPB), global::Com.Proto.Server.DisclaimerPB.Parser, new[]{ "Game", "Language", "Content", "Varsion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.GameDeadPB), global::Com.Proto.Server.GameDeadPB.Parser, new[]{ "Game", "Channel", "ChannelInfo", "Version", "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///int型
  /// </summary>
  public sealed partial class IntReq : pb::IMessage<IntReq> {
    private static readonly pb::MessageParser<IntReq> _parser = new pb::MessageParser<IntReq>(() => new IntReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntReq(IntReq other) : this() {
      req_ = other.req_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntReq Clone() {
      return new IntReq(this);
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private int req_;
    /// <summary>
    ///数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Req != other.Req) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Req != 0) hash ^= Req.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Req != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Req);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Req != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Req);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntReq other) {
      if (other == null) {
        return;
      }
      if (other.Req != 0) {
        Req = other.Req;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Req = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntRes : pb::IMessage<IntRes> {
    private static readonly pb::MessageParser<IntRes> _parser = new pb::MessageParser<IntRes>(() => new IntRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntRes(IntRes other) : this() {
      ret_ = other.ret_;
      res_ = other.res_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntRes Clone() {
      return new IntRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 2;
    private int res_;
    /// <summary>
    ///数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Res != other.Res) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Res != 0) hash ^= Res.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (Res != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Res);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (Res != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Res);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Res != 0) {
        Res = other.Res;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 16: {
            Res = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///string 型
  /// </summary>
  public sealed partial class StringReq : pb::IMessage<StringReq> {
    private static readonly pb::MessageParser<StringReq> _parser = new pb::MessageParser<StringReq>(() => new StringReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringReq(StringReq other) : this() {
      req_ = other.req_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringReq Clone() {
      return new StringReq(this);
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private string req_ = "";
    /// <summary>
    ///数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Req {
      get { return req_; }
      set {
        req_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Req != other.Req) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Req.Length != 0) hash ^= Req.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Req.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Req);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Req.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Req);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringReq other) {
      if (other == null) {
        return;
      }
      if (other.Req.Length != 0) {
        Req = other.Req;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Req = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringRes : pb::IMessage<StringRes> {
    private static readonly pb::MessageParser<StringRes> _parser = new pb::MessageParser<StringRes>(() => new StringRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringRes(StringRes other) : this() {
      ret_ = other.ret_;
      res_ = other.res_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringRes Clone() {
      return new StringRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 2;
    private string res_ = "";
    /// <summary>
    ///数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Res {
      get { return res_; }
      set {
        res_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Res != other.Res) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Res.Length != 0) hash ^= Res.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (Res.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Res);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (Res.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Res);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Res.Length != 0) {
        Res = other.Res;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            Res = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///缓存版本号信息
  /// </summary>
  public sealed partial class CacheVersionPB : pb::IMessage<CacheVersionPB> {
    private static readonly pb::MessageParser<CacheVersionPB> _parser = new pb::MessageParser<CacheVersionPB>(() => new CacheVersionPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CacheVersionPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheVersionPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheVersionPB(CacheVersionPB other) : this() {
      game_ = other.game_;
      channel_ = other.channel_;
      context_ = other.context_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CacheVersionPB Clone() {
      return new CacheVersionPB(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private string context_ = "";
    /// <summary>
    ///缓存信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    /// <summary>
    ///游戏版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CacheVersionPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CacheVersionPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (Context != other.Context) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Context);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CacheVersionPB other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            Context = input.ReadString();
            break;
          }
          case 32: {
            Version = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///热更版本信息
  /// </summary>
  public sealed partial class HotVersionPB : pb::IMessage<HotVersionPB> {
    private static readonly pb::MessageParser<HotVersionPB> _parser = new pb::MessageParser<HotVersionPB>(() => new HotVersionPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HotVersionPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotVersionPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotVersionPB(HotVersionPB other) : this() {
      game_ = other.game_;
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      version_ = other.version_;
      hotVersion_ = other.hotVersion_;
      addr_ = other.addr_;
      md5_ = other.md5_;
      gameVersion_ = other.gameVersion_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotVersionPB Clone() {
      return new HotVersionPB(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 3;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    /// <summary>
    ///游戏版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "hot_version" field.</summary>
    public const int HotVersionFieldNumber = 5;
    private int hotVersion_;
    /// <summary>
    ///热更版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HotVersion {
      get { return hotVersion_; }
      set {
        hotVersion_ = value;
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 6;
    private string addr_ = "";
    /// <summary>
    ///热更地址地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "md5" field.</summary>
    public const int Md5FieldNumber = 7;
    private string md5_ = "";
    /// <summary>
    ///MD5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Md5 {
      get { return md5_; }
      set {
        md5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_version" field.</summary>
    public const int GameVersionFieldNumber = 8;
    private string gameVersion_ = "";
    /// <summary>
    ///游戏版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameVersion {
      get { return gameVersion_; }
      set {
        gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 9;
    private int id_;
    /// <summary>
    ///序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HotVersionPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HotVersionPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (Version != other.Version) return false;
      if (HotVersion != other.HotVersion) return false;
      if (Addr != other.Addr) return false;
      if (Md5 != other.Md5) return false;
      if (GameVersion != other.GameVersion) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (HotVersion != 0) hash ^= HotVersion.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Md5.Length != 0) hash ^= Md5.GetHashCode();
      if (GameVersion.Length != 0) hash ^= GameVersion.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelInfo);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Version);
      }
      if (HotVersion != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(HotVersion);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Addr);
      }
      if (Md5.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Md5);
      }
      if (GameVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GameVersion);
      }
      if (Id != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Version);
      }
      if (HotVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HotVersion);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Md5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5);
      }
      if (GameVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HotVersionPB other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.HotVersion != 0) {
        HotVersion = other.HotVersion;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Md5.Length != 0) {
        Md5 = other.Md5;
      }
      if (other.GameVersion.Length != 0) {
        GameVersion = other.GameVersion;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 32: {
            Version = input.ReadSInt32();
            break;
          }
          case 40: {
            HotVersion = input.ReadSInt32();
            break;
          }
          case 50: {
            Addr = input.ReadString();
            break;
          }
          case 58: {
            Md5 = input.ReadString();
            break;
          }
          case 66: {
            GameVersion = input.ReadString();
            break;
          }
          case 72: {
            Id = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主版本号信息
  /// </summary>
  public sealed partial class MainVersionPB : pb::IMessage<MainVersionPB> {
    private static readonly pb::MessageParser<MainVersionPB> _parser = new pb::MessageParser<MainVersionPB>(() => new MainVersionPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainVersionPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainVersionPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainVersionPB(MainVersionPB other) : this() {
      game_ = other.game_;
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      minVersion_ = other.minVersion_;
      maxVersion_ = other.maxVersion_;
      addr_ = other.addr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainVersionPB Clone() {
      return new MainVersionPB(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 3;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_version" field.</summary>
    public const int MinVersionFieldNumber = 4;
    private int minVersion_;
    /// <summary>
    ///最小兼容版本：包含
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinVersion {
      get { return minVersion_; }
      set {
        minVersion_ = value;
      }
    }

    /// <summary>Field number for the "max_version" field.</summary>
    public const int MaxVersionFieldNumber = 5;
    private int maxVersion_;
    /// <summary>
    ///最大兼容版本：包含
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxVersion {
      get { return maxVersion_; }
      set {
        maxVersion_ = value;
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 6;
    private string addr_ = "";
    /// <summary>
    ///强更地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainVersionPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainVersionPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (MinVersion != other.MinVersion) return false;
      if (MaxVersion != other.MaxVersion) return false;
      if (Addr != other.Addr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (MinVersion != 0) hash ^= MinVersion.GetHashCode();
      if (MaxVersion != 0) hash ^= MaxVersion.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelInfo);
      }
      if (MinVersion != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(MinVersion);
      }
      if (MaxVersion != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(MaxVersion);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Addr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (MinVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MinVersion);
      }
      if (MaxVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MaxVersion);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainVersionPB other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.MinVersion != 0) {
        MinVersion = other.MinVersion;
      }
      if (other.MaxVersion != 0) {
        MaxVersion = other.MaxVersion;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 32: {
            MinVersion = input.ReadSInt32();
            break;
          }
          case 40: {
            MaxVersion = input.ReadSInt32();
            break;
          }
          case 50: {
            Addr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器信息
  /// </summary>
  public sealed partial class GameServerInfoPB : pb::IMessage<GameServerInfoPB> {
    private static readonly pb::MessageParser<GameServerInfoPB> _parser = new pb::MessageParser<GameServerInfoPB>(() => new GameServerInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoPB(GameServerInfoPB other) : this() {
      channel_ = other.channel_;
      serverId_ = other.serverId_;
      name_ = other.name_;
      addr_ = other.addr_;
      port_ = other.port_;
      desc_ = other.desc_;
      aggregate_ = other.aggregate_;
      status_ = other.status_;
      sort_ = other.sort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoPB Clone() {
      return new GameServerInfoPB(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private string serverId_ = "";
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///服务器的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 4;
    private string addr_ = "";
    /// <summary>
    ///服务器地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    /// <summary>
    /// 服务器的端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    /// <summary>
    ///服务器的描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 7;
    private int aggregate_;
    /// <summary>
    ///集群
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Aggregate {
      get { return aggregate_; }
      set {
        aggregate_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 9;
    private int sort_;
    /// <summary>
    ///排序，越大越前
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      if (Addr != other.Addr) return false;
      if (Port != other.Port) return false;
      if (Desc != other.Desc) return false;
      if (Aggregate != other.Aggregate) return false;
      if (Status != other.Status) return false;
      if (Sort != other.Sort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Aggregate != 0) hash ^= Aggregate.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Channel);
      }
      if (ServerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Addr);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Port);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (Aggregate != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Aggregate);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Status);
      }
      if (Sort != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Sort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Port);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Aggregate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Aggregate);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Aggregate != 0) {
        Aggregate = other.Aggregate;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Channel = input.ReadString();
            break;
          }
          case 18: {
            ServerId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Addr = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadSInt32();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 56: {
            Aggregate = input.ReadSInt32();
            break;
          }
          case 64: {
            Status = input.ReadSInt32();
            break;
          }
          case 72: {
            Sort = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///资源服务器信息
  /// </summary>
  public sealed partial class ImgServerInfoPB : pb::IMessage<ImgServerInfoPB> {
    private static readonly pb::MessageParser<ImgServerInfoPB> _parser = new pb::MessageParser<ImgServerInfoPB>(() => new ImgServerInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImgServerInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImgServerInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImgServerInfoPB(ImgServerInfoPB other) : this() {
      serverId_ = other.serverId_;
      name_ = other.name_;
      addr_ = other.addr_;
      port_ = other.port_;
      folder_ = other.folder_;
      desc_ = other.desc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImgServerInfoPB Clone() {
      return new ImgServerInfoPB(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private string serverId_ = "";
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///服务器的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 3;
    private string addr_ = "";
    /// <summary>
    ///服务器地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    /// 服务器的端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 5;
    private string folder_ = "";
    /// <summary>
    ///资源文件夹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    /// <summary>
    ///服务器的描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImgServerInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImgServerInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      if (Addr != other.Addr) return false;
      if (Port != other.Port) return false;
      if (Folder != other.Folder) return false;
      if (Desc != other.Desc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Addr);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Port);
      }
      if (Folder.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Folder);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Port);
      }
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImgServerInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Addr = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadSInt32();
            break;
          }
          case 42: {
            Folder = input.ReadString();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///匹配服务器信息
  /// </summary>
  public sealed partial class MatchingServiceInfoPB : pb::IMessage<MatchingServiceInfoPB> {
    private static readonly pb::MessageParser<MatchingServiceInfoPB> _parser = new pb::MessageParser<MatchingServiceInfoPB>(() => new MatchingServiceInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchingServiceInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchingServiceInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchingServiceInfoPB(MatchingServiceInfoPB other) : this() {
      serverId_ = other.serverId_;
      name_ = other.name_;
      addr_ = other.addr_;
      port_ = other.port_;
      folder_ = other.folder_;
      desc_ = other.desc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchingServiceInfoPB Clone() {
      return new MatchingServiceInfoPB(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private string serverId_ = "";
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///服务器的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 3;
    private string addr_ = "";
    /// <summary>
    ///服务器地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    /// 服务器的端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 5;
    private string folder_ = "";
    /// <summary>
    ///资源文件夹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    /// <summary>
    ///服务器的描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchingServiceInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchingServiceInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      if (Addr != other.Addr) return false;
      if (Port != other.Port) return false;
      if (Folder != other.Folder) return false;
      if (Desc != other.Desc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Addr);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Port);
      }
      if (Folder.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Folder);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Port);
      }
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchingServiceInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Addr = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadSInt32();
            break;
          }
          case 42: {
            Folder = input.ReadString();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告信息
  /// </summary>
  public sealed partial class NoticePB : pb::IMessage<NoticePB> {
    private static readonly pb::MessageParser<NoticePB> _parser = new pb::MessageParser<NoticePB>(() => new NoticePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticePB(NoticePB other) : this() {
      id_ = other.id_;
      game_ = other.game_;
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      type_ = other.type_;
      use_ = other.use_;
      title_ = other.title_;
      content_ = other.content_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticePB Clone() {
      return new NoticePB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///自增ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 2;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 4;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "use" field.</summary>
    public const int UseFieldNumber = 6;
    private int use_;
    /// <summary>
    ///使用状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 7;
    private string title_ = "";
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private long createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (Type != other.Type) return false;
      if (Use != other.Use) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Use != 0) hash ^= Use.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      if (Game != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChannelInfo);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Type);
      }
      if (Use != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Use);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Content);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type);
      }
      if (Use != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Use);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticePB other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Use != 0) {
        Use = other.Use;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 16: {
            Game = input.ReadSInt32();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
          case 34: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 40: {
            Type = input.ReadSInt32();
            break;
          }
          case 48: {
            Use = input.ReadSInt32();
            break;
          }
          case 58: {
            Title = input.ReadString();
            break;
          }
          case 66: {
            Content = input.ReadString();
            break;
          }
          case 72: {
            CreateTime = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开关控制
  /// </summary>
  public sealed partial class SwitchControlPB : pb::IMessage<SwitchControlPB> {
    private static readonly pb::MessageParser<SwitchControlPB> _parser = new pb::MessageParser<SwitchControlPB>(() => new SwitchControlPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwitchControlPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchControlPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchControlPB(SwitchControlPB other) : this() {
      game_ = other.game_;
      channel_ = other.channel_;
      version_ = other.version_;
      copyright_ = other.copyright_;
      recharge_ = other.recharge_;
      code_ = other.code_;
      share_ = other.share_;
      customerServices_ = other.customerServices_;
      ext_ = other.ext_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchControlPB Clone() {
      return new SwitchControlPB(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 4;
    private int copyright_;
    /// <summary>
    ///版权开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Copyright {
      get { return copyright_; }
      set {
        copyright_ = value;
      }
    }

    /// <summary>Field number for the "recharge" field.</summary>
    public const int RechargeFieldNumber = 5;
    private int recharge_;
    /// <summary>
    ///充值开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Recharge {
      get { return recharge_; }
      set {
        recharge_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 6;
    private int code_;
    /// <summary>
    ///激活码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "share" field.</summary>
    public const int ShareFieldNumber = 7;
    private int share_;
    /// <summary>
    ///分享
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Share {
      get { return share_; }
      set {
        share_ = value;
      }
    }

    /// <summary>Field number for the "customer_services" field.</summary>
    public const int CustomerServicesFieldNumber = 8;
    private int customerServices_;
    /// <summary>
    ///客服开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomerServices {
      get { return customerServices_; }
      set {
        customerServices_ = value;
      }
    }

    /// <summary>Field number for the "ext" field.</summary>
    public const int ExtFieldNumber = 9;
    private string ext_ = "";
    /// <summary>
    ///额外信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ext {
      get { return ext_; }
      set {
        ext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwitchControlPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwitchControlPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (Version != other.Version) return false;
      if (Copyright != other.Copyright) return false;
      if (Recharge != other.Recharge) return false;
      if (Code != other.Code) return false;
      if (Share != other.Share) return false;
      if (CustomerServices != other.CustomerServices) return false;
      if (Ext != other.Ext) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Copyright != 0) hash ^= Copyright.GetHashCode();
      if (Recharge != 0) hash ^= Recharge.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Share != 0) hash ^= Share.GetHashCode();
      if (CustomerServices != 0) hash ^= CustomerServices.GetHashCode();
      if (Ext.Length != 0) hash ^= Ext.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Version);
      }
      if (Copyright != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Copyright);
      }
      if (Recharge != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Recharge);
      }
      if (Code != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Code);
      }
      if (Share != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Share);
      }
      if (CustomerServices != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(CustomerServices);
      }
      if (Ext.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Ext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Version);
      }
      if (Copyright != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Copyright);
      }
      if (Recharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Recharge);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Code);
      }
      if (Share != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Share);
      }
      if (CustomerServices != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CustomerServices);
      }
      if (Ext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwitchControlPB other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Copyright != 0) {
        Copyright = other.Copyright;
      }
      if (other.Recharge != 0) {
        Recharge = other.Recharge;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Share != 0) {
        Share = other.Share;
      }
      if (other.CustomerServices != 0) {
        CustomerServices = other.CustomerServices;
      }
      if (other.Ext.Length != 0) {
        Ext = other.Ext;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadSInt32();
            break;
          }
          case 32: {
            Copyright = input.ReadSInt32();
            break;
          }
          case 40: {
            Recharge = input.ReadSInt32();
            break;
          }
          case 48: {
            Code = input.ReadSInt32();
            break;
          }
          case 56: {
            Share = input.ReadSInt32();
            break;
          }
          case 64: {
            CustomerServices = input.ReadSInt32();
            break;
          }
          case 74: {
            Ext = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///免责声明
  /// </summary>
  public sealed partial class DisclaimerPB : pb::IMessage<DisclaimerPB> {
    private static readonly pb::MessageParser<DisclaimerPB> _parser = new pb::MessageParser<DisclaimerPB>(() => new DisclaimerPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisclaimerPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerPB(DisclaimerPB other) : this() {
      game_ = other.game_;
      language_ = other.language_;
      content_ = other.content_;
      varsion_ = other.varsion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisclaimerPB Clone() {
      return new DisclaimerPB(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private int language_;
    /// <summary>
    ///语言类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "varsion" field.</summary>
    public const int VarsionFieldNumber = 4;
    private int varsion_;
    /// <summary>
    ///版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Varsion {
      get { return varsion_; }
      set {
        varsion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisclaimerPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisclaimerPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Language != other.Language) return false;
      if (Content != other.Content) return false;
      if (Varsion != other.Varsion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Varsion != 0) hash ^= Varsion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Language != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Language);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Varsion != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Varsion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Language);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Varsion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Varsion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisclaimerPB other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Varsion != 0) {
        Varsion = other.Varsion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 16: {
            Language = input.ReadSInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            Varsion = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///无效版本
  /// </summary>
  public sealed partial class GameDeadPB : pb::IMessage<GameDeadPB> {
    private static readonly pb::MessageParser<GameDeadPB> _parser = new pb::MessageParser<GameDeadPB>(() => new GameDeadPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDeadPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerBaseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDeadPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDeadPB(GameDeadPB other) : this() {
      game_ = other.game_;
      channel_ = other.channel_;
      channelInfo_ = other.channelInfo_;
      version_ = other.version_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDeadPB Clone() {
      return new GameDeadPB(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_info" field.</summary>
    public const int ChannelInfoFieldNumber = 3;
    private string channelInfo_ = "";
    /// <summary>
    ///渠道信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelInfo {
      get { return channelInfo_; }
      set {
        channelInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    /// <summary>
    ///版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    /// <summary>
    ///状态，0代表不支持，1支持
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDeadPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDeadPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (Channel != other.Channel) return false;
      if (ChannelInfo != other.ChannelInfo) return false;
      if (Version != other.Version) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ChannelInfo.Length != 0) hash ^= ChannelInfo.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Channel);
      }
      if (ChannelInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelInfo);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Version);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ChannelInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelInfo);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Version);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDeadPB other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ChannelInfo.Length != 0) {
        ChannelInfo = other.ChannelInfo;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            Channel = input.ReadString();
            break;
          }
          case 26: {
            ChannelInfo = input.ReadString();
            break;
          }
          case 32: {
            Version = input.ReadSInt32();
            break;
          }
          case 40: {
            Status = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
