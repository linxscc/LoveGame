// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_user_clock.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_user_clock.proto</summary>
  public static partial class BeanUserClockReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_user_clock.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanUserClockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChViZWFuX3VzZXJfY2xvY2sucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90",
            "byKZAQoLVXNlckNsb2NrUEISDwoHdXNlcl9pZBgBIAEoERIQCghjbG9ja19p",
            "ZBgCIAEoERIMCgRob3VyGAMgASgREg4KBm1pbnV0ZRgEIAEoERIQCghsYWJl",
            "bF9pZBgFIAEoERIQCghzZXRfdGltZRgGIAEoEhISCgpvcGVuX3N0YXRlGAcg",
            "ASgREhEKCXRpcF9zdGF0ZRgIIAEoEUIyCh9uZXQuZ2FsYXNwb3J0cy5iaWdz",
            "dGFyLnByb3RvY29sQg9Vc2VyQ2xvY2tQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserClockPB), global::Com.Proto.UserClockPB.Parser, new[]{ "UserId", "ClockId", "Hour", "Minute", "LabelId", "SetTime", "OpenState", "TipState" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///UserClockPB UserClock
  /// </summary>
  public sealed partial class UserClockPB : pb::IMessage<UserClockPB> {
    private static readonly pb::MessageParser<UserClockPB> _parser = new pb::MessageParser<UserClockPB>(() => new UserClockPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserClockPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserClockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserClockPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserClockPB(UserClockPB other) : this() {
      userId_ = other.userId_;
      clockId_ = other.clockId_;
      hour_ = other.hour_;
      minute_ = other.minute_;
      labelId_ = other.labelId_;
      setTime_ = other.setTime_;
      openState_ = other.openState_;
      tipState_ = other.tipState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserClockPB Clone() {
      return new UserClockPB(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "clock_id" field.</summary>
    public const int ClockIdFieldNumber = 2;
    private int clockId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClockId {
      get { return clockId_; }
      set {
        clockId_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 3;
    private int hour_;
    /// <summary>
    ///小时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 4;
    private int minute_;
    /// <summary>
    ///分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "label_id" field.</summary>
    public const int LabelIdFieldNumber = 5;
    private int labelId_;
    /// <summary>
    ///标签id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LabelId {
      get { return labelId_; }
      set {
        labelId_ = value;
      }
    }

    /// <summary>Field number for the "set_time" field.</summary>
    public const int SetTimeFieldNumber = 6;
    private long setTime_;
    /// <summary>
    ///闹钟设置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SetTime {
      get { return setTime_; }
      set {
        setTime_ = value;
      }
    }

    /// <summary>Field number for the "open_state" field.</summary>
    public const int OpenStateFieldNumber = 7;
    private int openState_;
    /// <summary>
    ///开启状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenState {
      get { return openState_; }
      set {
        openState_ = value;
      }
    }

    /// <summary>Field number for the "tip_state" field.</summary>
    public const int TipStateFieldNumber = 8;
    private int tipState_;
    /// <summary>
    ///弹状态0未弹出过1已经弹出过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TipState {
      get { return tipState_; }
      set {
        tipState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserClockPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserClockPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ClockId != other.ClockId) return false;
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (LabelId != other.LabelId) return false;
      if (SetTime != other.SetTime) return false;
      if (OpenState != other.OpenState) return false;
      if (TipState != other.TipState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ClockId != 0) hash ^= ClockId.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (LabelId != 0) hash ^= LabelId.GetHashCode();
      if (SetTime != 0L) hash ^= SetTime.GetHashCode();
      if (OpenState != 0) hash ^= OpenState.GetHashCode();
      if (TipState != 0) hash ^= TipState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserId);
      }
      if (ClockId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ClockId);
      }
      if (Hour != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Minute);
      }
      if (LabelId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(LabelId);
      }
      if (SetTime != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(SetTime);
      }
      if (OpenState != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(OpenState);
      }
      if (TipState != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(TipState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserId);
      }
      if (ClockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ClockId);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Minute);
      }
      if (LabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LabelId);
      }
      if (SetTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SetTime);
      }
      if (OpenState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OpenState);
      }
      if (TipState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TipState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserClockPB other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ClockId != 0) {
        ClockId = other.ClockId;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.LabelId != 0) {
        LabelId = other.LabelId;
      }
      if (other.SetTime != 0L) {
        SetTime = other.SetTime;
      }
      if (other.OpenState != 0) {
        OpenState = other.OpenState;
      }
      if (other.TipState != 0) {
        TipState = other.TipState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt32();
            break;
          }
          case 16: {
            ClockId = input.ReadSInt32();
            break;
          }
          case 24: {
            Hour = input.ReadSInt32();
            break;
          }
          case 32: {
            Minute = input.ReadSInt32();
            break;
          }
          case 40: {
            LabelId = input.ReadSInt32();
            break;
          }
          case 48: {
            SetTime = input.ReadSInt64();
            break;
          }
          case 56: {
            OpenState = input.ReadSInt32();
            break;
          }
          case 64: {
            TipState = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
