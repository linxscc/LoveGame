// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_challenge_card_num_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_challenge_card_num_rule.proto</summary>
  public static partial class BeanChallengeCardNumRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_challenge_card_num_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanChallengeCardNumRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJiZWFuX2NoYWxsZW5nZV9jYXJkX251bV9ydWxlLnByb3RvEgljb20ucHJv",
            "dG8aCmJhc2UucHJvdG8iUAoWQ2hhbGxlbmdlQ2FyZE51bVJ1bGVQQhIRCgls",
            "ZXZlbF9taW4YASABKBESEQoJbGV2ZWxfbWF4GAIgASgREhAKCG9wZW5fbnVt",
            "GAMgASgRQj0KH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9jb2xCGkNo",
            "YWxsZW5nZUNhcmROdW1SdWxlUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChallengeCardNumRulePB), global::Com.Proto.ChallengeCardNumRulePB.Parser, new[]{ "LevelMin", "LevelMax", "OpenNum" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///ChallengeCardNumRulePB ChallengeCardNumRule
  /// </summary>
  public sealed partial class ChallengeCardNumRulePB : pb::IMessage<ChallengeCardNumRulePB> {
    private static readonly pb::MessageParser<ChallengeCardNumRulePB> _parser = new pb::MessageParser<ChallengeCardNumRulePB>(() => new ChallengeCardNumRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeCardNumRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanChallengeCardNumRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeCardNumRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeCardNumRulePB(ChallengeCardNumRulePB other) : this() {
      levelMin_ = other.levelMin_;
      levelMax_ = other.levelMax_;
      openNum_ = other.openNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeCardNumRulePB Clone() {
      return new ChallengeCardNumRulePB(this);
    }

    /// <summary>Field number for the "level_min" field.</summary>
    public const int LevelMinFieldNumber = 1;
    private int levelMin_;
    /// <summary>
    ///最小等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelMin {
      get { return levelMin_; }
      set {
        levelMin_ = value;
      }
    }

    /// <summary>Field number for the "level_max" field.</summary>
    public const int LevelMaxFieldNumber = 2;
    private int levelMax_;
    /// <summary>
    ///最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelMax {
      get { return levelMax_; }
      set {
        levelMax_ = value;
      }
    }

    /// <summary>Field number for the "open_num" field.</summary>
    public const int OpenNumFieldNumber = 3;
    private int openNum_;
    /// <summary>
    ///开放数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenNum {
      get { return openNum_; }
      set {
        openNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeCardNumRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeCardNumRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelMin != other.LevelMin) return false;
      if (LevelMax != other.LevelMax) return false;
      if (OpenNum != other.OpenNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelMin != 0) hash ^= LevelMin.GetHashCode();
      if (LevelMax != 0) hash ^= LevelMax.GetHashCode();
      if (OpenNum != 0) hash ^= OpenNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelMin != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelMin);
      }
      if (LevelMax != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LevelMax);
      }
      if (OpenNum != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(OpenNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelMin);
      }
      if (LevelMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelMax);
      }
      if (OpenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OpenNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeCardNumRulePB other) {
      if (other == null) {
        return;
      }
      if (other.LevelMin != 0) {
        LevelMin = other.LevelMin;
      }
      if (other.LevelMax != 0) {
        LevelMax = other.LevelMax;
      }
      if (other.OpenNum != 0) {
        OpenNum = other.OpenNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelMin = input.ReadSInt32();
            break;
          }
          case 16: {
            LevelMax = input.ReadSInt32();
            break;
          }
          case 24: {
            OpenNum = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
