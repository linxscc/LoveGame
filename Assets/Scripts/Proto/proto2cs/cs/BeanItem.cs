// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_item.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_item.proto</summary>
  public static partial class BeanItemReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_item.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9iZWFuX2l0ZW0ucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90byJuCgZJ",
            "dGVtUEISDwoHaXRlbV9pZBgBIAEoERIMCgRuYW1lGAIgASgJEhcKBG9ubHkY",
            "AyABKA4yCS5QbGF5ZXJQQhINCgVwb3dlchgEIAEoERILCgNleHAYBSABKBES",
            "EAoIZXhwX3R5cGUYBiABKBFCLQofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5w",
            "cm90b2NvbEIKSXRlbVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ItemPB), global::Com.Proto.ItemPB.Parser, new[]{ "ItemId", "Name", "Only", "Power", "Exp", "ExpType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///ItemPB Item
  /// </summary>
  public sealed partial class ItemPB : pb::IMessage<ItemPB> {
    private static readonly pb::MessageParser<ItemPB> _parser = new pb::MessageParser<ItemPB>(() => new ItemPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPB(ItemPB other) : this() {
      itemId_ = other.itemId_;
      name_ = other.name_;
      only_ = other.only_;
      power_ = other.power_;
      exp_ = other.exp_;
      expType_ = other.expType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPB Clone() {
      return new ItemPB(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "only" field.</summary>
    public const int OnlyFieldNumber = 3;
    private global::PlayerPB only_ = 0;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Only {
      get { return only_; }
      set {
        only_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 5;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "exp_type" field.</summary>
    public const int ExpTypeFieldNumber = 6;
    private int expType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpType {
      get { return expType_; }
      set {
        expType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Name != other.Name) return false;
      if (Only != other.Only) return false;
      if (Power != other.Power) return false;
      if (Exp != other.Exp) return false;
      if (ExpType != other.ExpType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Only != 0) hash ^= Only.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (ExpType != 0) hash ^= ExpType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ItemId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Only != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Only);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Power);
      }
      if (Exp != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Exp);
      }
      if (ExpType != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(ExpType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Only != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Only);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Power);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Exp);
      }
      if (ExpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ExpType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemPB other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Only != 0) {
        Only = other.Only;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.ExpType != 0) {
        ExpType = other.ExpType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadSInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            only_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
          case 32: {
            Power = input.ReadSInt32();
            break;
          }
          case 40: {
            Exp = input.ReadSInt32();
            break;
          }
          case 48: {
            ExpType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
