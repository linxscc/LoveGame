// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_user_draw_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_user_draw_info.proto</summary>
  public static partial class BeanUserDrawInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_user_draw_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanUserDrawInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChliZWFuX3VzZXJfZHJhd19pbmZvLnByb3RvEgljb20ucHJvdG8aCmJhc2Uu",
            "cHJvdG8igAEKDlVzZXJEcmF3SW5mb1BCEg8KB3VzZXJfaWQYASABKBESFAoM",
            "Z2VtX2RyYXdfbnVtGAIgASgREhUKDWdvbGRfZHJhd19udW0YAyABKBESMAoO",
            "ZHJhd19wb29sX251bXMYBCADKAsyGC5jb20ucHJvdG8uRHJhd1Bvb2xOdW1Q",
            "QiKQAQoNRHJhd1Bvb2xOdW1QQhIWCg5kcmF3X3Bvb2xfdHlwZRgBIAEoERI3",
            "CghkcmF3X251bRgCIAMoCzIlLmNvbS5wcm90by5EcmF3UG9vbE51bVBCLkRy",
            "YXdOdW1FbnRyeRouCgxEcmF3TnVtRW50cnkSCwoDa2V5GAEgASgREg0KBXZh",
            "bHVlGAIgASgROgI4AUI1Ch9uZXQuZ2FsYXNwb3J0cy5iaWdzdGFyLnByb3Rv",
            "Y29sQhJVc2VyRHJhd0luZm9Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserDrawInfoPB), global::Com.Proto.UserDrawInfoPB.Parser, new[]{ "UserId", "GemDrawNum", "GoldDrawNum", "DrawPoolNums" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawPoolNumPB), global::Com.Proto.DrawPoolNumPB.Parser, new[]{ "DrawPoolType", "DrawNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///UserDrawInfoPB UserDrawInfo
  /// </summary>
  public sealed partial class UserDrawInfoPB : pb::IMessage<UserDrawInfoPB> {
    private static readonly pb::MessageParser<UserDrawInfoPB> _parser = new pb::MessageParser<UserDrawInfoPB>(() => new UserDrawInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDrawInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserDrawInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDrawInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDrawInfoPB(UserDrawInfoPB other) : this() {
      userId_ = other.userId_;
      gemDrawNum_ = other.gemDrawNum_;
      goldDrawNum_ = other.goldDrawNum_;
      drawPoolNums_ = other.drawPoolNums_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDrawInfoPB Clone() {
      return new UserDrawInfoPB(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "gem_draw_num" field.</summary>
    public const int GemDrawNumFieldNumber = 2;
    private int gemDrawNum_;
    /// <summary>
    ///宝石当天抽奖总次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GemDrawNum {
      get { return gemDrawNum_; }
      set {
        gemDrawNum_ = value;
      }
    }

    /// <summary>Field number for the "gold_draw_num" field.</summary>
    public const int GoldDrawNumFieldNumber = 3;
    private int goldDrawNum_;
    /// <summary>
    ///金币当天抽奖总次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldDrawNum {
      get { return goldDrawNum_; }
      set {
        goldDrawNum_ = value;
      }
    }

    /// <summary>Field number for the "draw_pool_nums" field.</summary>
    public const int DrawPoolNumsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.DrawPoolNumPB> _repeated_drawPoolNums_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.DrawPoolNumPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.DrawPoolNumPB> drawPoolNums_ = new pbc::RepeatedField<global::Com.Proto.DrawPoolNumPB>();
    /// <summary>
    ///星盘类型当天抽奖类型抽卡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.DrawPoolNumPB> DrawPoolNums {
      get { return drawPoolNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDrawInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDrawInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GemDrawNum != other.GemDrawNum) return false;
      if (GoldDrawNum != other.GoldDrawNum) return false;
      if(!drawPoolNums_.Equals(other.drawPoolNums_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (GemDrawNum != 0) hash ^= GemDrawNum.GetHashCode();
      if (GoldDrawNum != 0) hash ^= GoldDrawNum.GetHashCode();
      hash ^= drawPoolNums_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserId);
      }
      if (GemDrawNum != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(GemDrawNum);
      }
      if (GoldDrawNum != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(GoldDrawNum);
      }
      drawPoolNums_.WriteTo(output, _repeated_drawPoolNums_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserId);
      }
      if (GemDrawNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GemDrawNum);
      }
      if (GoldDrawNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GoldDrawNum);
      }
      size += drawPoolNums_.CalculateSize(_repeated_drawPoolNums_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDrawInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.GemDrawNum != 0) {
        GemDrawNum = other.GemDrawNum;
      }
      if (other.GoldDrawNum != 0) {
        GoldDrawNum = other.GoldDrawNum;
      }
      drawPoolNums_.Add(other.drawPoolNums_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt32();
            break;
          }
          case 16: {
            GemDrawNum = input.ReadSInt32();
            break;
          }
          case 24: {
            GoldDrawNum = input.ReadSInt32();
            break;
          }
          case 34: {
            drawPoolNums_.AddEntriesFrom(input, _repeated_drawPoolNums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawPoolNumPB : pb::IMessage<DrawPoolNumPB> {
    private static readonly pb::MessageParser<DrawPoolNumPB> _parser = new pb::MessageParser<DrawPoolNumPB>(() => new DrawPoolNumPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawPoolNumPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserDrawInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPoolNumPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPoolNumPB(DrawPoolNumPB other) : this() {
      drawPoolType_ = other.drawPoolType_;
      drawNum_ = other.drawNum_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPoolNumPB Clone() {
      return new DrawPoolNumPB(this);
    }

    /// <summary>Field number for the "draw_pool_type" field.</summary>
    public const int DrawPoolTypeFieldNumber = 1;
    private int drawPoolType_;
    /// <summary>
    ///key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawPoolType {
      get { return drawPoolType_; }
      set {
        drawPoolType_ = value;
      }
    }

    /// <summary>Field number for the "draw_num" field.</summary>
    public const int DrawNumFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_drawNum_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 18);
    private readonly pbc::MapField<int, int> drawNum_ = new pbc::MapField<int, int>();
    /// <summary>
    ///抽奖总次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> DrawNum {
      get { return drawNum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawPoolNumPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawPoolNumPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawPoolType != other.DrawPoolType) return false;
      if (!DrawNum.Equals(other.DrawNum)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrawPoolType != 0) hash ^= DrawPoolType.GetHashCode();
      hash ^= DrawNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawPoolType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(DrawPoolType);
      }
      drawNum_.WriteTo(output, _map_drawNum_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawPoolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DrawPoolType);
      }
      size += drawNum_.CalculateSize(_map_drawNum_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawPoolNumPB other) {
      if (other == null) {
        return;
      }
      if (other.DrawPoolType != 0) {
        DrawPoolType = other.DrawPoolType;
      }
      drawNum_.Add(other.drawNum_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawPoolType = input.ReadSInt32();
            break;
          }
          case 18: {
            drawNum_.AddEntriesFrom(input, _map_drawNum_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
