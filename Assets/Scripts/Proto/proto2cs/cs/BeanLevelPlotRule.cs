// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_level_plot_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_level_plot_rule.proto</summary>
  public static partial class BeanLevelPlotRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_level_plot_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanLevelPlotRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpiZWFuX2xldmVsX3Bsb3RfcnVsZS5wcm90bxIJY29tLnByb3RvGgpiYXNl",
            "LnByb3RvImAKD0xldmVsUGxvdFJ1bGVQQhIPCgdwbG90X2lkGAEgASgREikK",
            "D2xldmVsX3Bsb3RfdHlwZRgCIAEoDjIQLkxldmVsUGxvdFR5cGVQQhIRCglw",
            "bG90X2Rlc2MYAyABKAlCNgofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90",
            "b2NvbEITTGV2ZWxQbG90UnVsZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.LevelPlotRulePB), global::Com.Proto.LevelPlotRulePB.Parser, new[]{ "PlotId", "LevelPlotType", "PlotDesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///LevelPlotRulePB LevelPlotRule
  /// </summary>
  public sealed partial class LevelPlotRulePB : pb::IMessage<LevelPlotRulePB> {
    private static readonly pb::MessageParser<LevelPlotRulePB> _parser = new pb::MessageParser<LevelPlotRulePB>(() => new LevelPlotRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelPlotRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanLevelPlotRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelPlotRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelPlotRulePB(LevelPlotRulePB other) : this() {
      plotId_ = other.plotId_;
      levelPlotType_ = other.levelPlotType_;
      plotDesc_ = other.plotDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelPlotRulePB Clone() {
      return new LevelPlotRulePB(this);
    }

    /// <summary>Field number for the "plot_id" field.</summary>
    public const int PlotIdFieldNumber = 1;
    private int plotId_;
    /// <summary>
    ///plot_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlotId {
      get { return plotId_; }
      set {
        plotId_ = value;
      }
    }

    /// <summary>Field number for the "level_plot_type" field.</summary>
    public const int LevelPlotTypeFieldNumber = 2;
    private global::LevelPlotTypePB levelPlotType_ = 0;
    /// <summary>
    ///剧情类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LevelPlotTypePB LevelPlotType {
      get { return levelPlotType_; }
      set {
        levelPlotType_ = value;
      }
    }

    /// <summary>Field number for the "plot_desc" field.</summary>
    public const int PlotDescFieldNumber = 3;
    private string plotDesc_ = "";
    /// <summary>
    ///剧情描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlotDesc {
      get { return plotDesc_; }
      set {
        plotDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelPlotRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelPlotRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlotId != other.PlotId) return false;
      if (LevelPlotType != other.LevelPlotType) return false;
      if (PlotDesc != other.PlotDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlotId != 0) hash ^= PlotId.GetHashCode();
      if (LevelPlotType != 0) hash ^= LevelPlotType.GetHashCode();
      if (PlotDesc.Length != 0) hash ^= PlotDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlotId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(PlotId);
      }
      if (LevelPlotType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LevelPlotType);
      }
      if (PlotDesc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlotDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PlotId);
      }
      if (LevelPlotType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LevelPlotType);
      }
      if (PlotDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlotDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelPlotRulePB other) {
      if (other == null) {
        return;
      }
      if (other.PlotId != 0) {
        PlotId = other.PlotId;
      }
      if (other.LevelPlotType != 0) {
        LevelPlotType = other.LevelPlotType;
      }
      if (other.PlotDesc.Length != 0) {
        PlotDesc = other.PlotDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlotId = input.ReadSInt32();
            break;
          }
          case 16: {
            levelPlotType_ = (global::LevelPlotTypePB) input.ReadEnum();
            break;
          }
          case 26: {
            PlotDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
