// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_encourage_act_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_encourage_act_rule.proto</summary>
  public static partial class BeanEncourageActRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_encourage_act_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanEncourageActRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1iZWFuX2VuY291cmFnZV9hY3RfcnVsZS5wcm90bxIJY29tLnByb3RvGgpi",
            "YXNlLnByb3RvGhBiZWFuX2F3YXJkLnByb3RvIroDChJFbmNvdXJhZ2VBY3RS",
            "dWxlUEISCgoCaWQYASABKBESEAoIYWN0X3R5cGUYAiABKBESCwoDcHJvGAMg",
            "ASgREg0KBXBvd2VyGAQgASgREhgKEGRlcGFydG1lbnRfbGV2ZWwYBSABKBES",
            "DQoFdGl0bGUYBiABKAkSEQoJbmVlZF90aW1lGAcgASgREjUKBGZhbnMYCCAD",
            "KAsyJy5jb20ucHJvdG8uRW5jb3VyYWdlQWN0UnVsZVBCLkZhbnNFbnRyeRI7",
            "Cgdjb25zdW1lGAkgAygLMiouY29tLnByb3RvLkVuY291cmFnZUFjdFJ1bGVQ",
            "Qi5Db25zdW1lRW50cnkSIgoGYXdhcmRzGAogAygLMhIuY29tLnByb3RvLkF3",
            "YXJkUEISGAoQcmFuZG9tZV9mYW5zX251bRgLIAEoERINCgVvcmRlchgMIAEo",
            "ERIQCghtb3ZpZV9pZBgNIAEoERorCglGYW5zRW50cnkSCwoDa2V5GAEgASgR",
            "Eg0KBXZhbHVlGAIgASgROgI4ARouCgxDb25zdW1lRW50cnkSCwoDa2V5GAEg",
            "ASgREg0KBXZhbHVlGAIgASgROgI4ASI4ChlFbmNvdXJhZ2VBY3RSZWZyZXNo",
            "UnVsZVBCEg0KBWNvdW50GAEgASgREgwKBGdvbGQYAiABKBEiMwoWRW5jb3Vy",
            "YWdlQWN0RG9uZVJ1bGVQQhIMCgR0aW1lGAEgASgREgsKA2dlbRgCIAEoESIz",
            "ChVFbmNvdXJhZ2VBY3RCdXlSdWxlUEISDQoFY291bnQYASABKBESCwoDZ2Vt",
            "GAIgASgRQjkKH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9jb2xCFkVu",
            "Y291cmFnZUFjdFJ1bGVQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EncourageActRulePB), global::Com.Proto.EncourageActRulePB.Parser, new[]{ "Id", "ActType", "Pro", "Power", "DepartmentLevel", "Title", "NeedTime", "Fans", "Consume", "Awards", "RandomeFansNum", "Order", "MovieId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EncourageActRefreshRulePB), global::Com.Proto.EncourageActRefreshRulePB.Parser, new[]{ "Count", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EncourageActDoneRulePB), global::Com.Proto.EncourageActDoneRulePB.Parser, new[]{ "Time", "Gem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EncourageActBuyRulePB), global::Com.Proto.EncourageActBuyRulePB.Parser, new[]{ "Count", "Gem" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///EncourageActRulePB EncourageActRule
  /// </summary>
  public sealed partial class EncourageActRulePB : pb::IMessage<EncourageActRulePB> {
    private static readonly pb::MessageParser<EncourageActRulePB> _parser = new pb::MessageParser<EncourageActRulePB>(() => new EncourageActRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncourageActRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanEncourageActRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActRulePB(EncourageActRulePB other) : this() {
      id_ = other.id_;
      actType_ = other.actType_;
      pro_ = other.pro_;
      power_ = other.power_;
      departmentLevel_ = other.departmentLevel_;
      title_ = other.title_;
      needTime_ = other.needTime_;
      fans_ = other.fans_.Clone();
      consume_ = other.consume_.Clone();
      awards_ = other.awards_.Clone();
      randomeFansNum_ = other.randomeFansNum_;
      order_ = other.order_;
      movieId_ = other.movieId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActRulePB Clone() {
      return new EncourageActRulePB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///应援活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "act_type" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private int actType_;
    /// <summary>
    ///应援活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "pro" field.</summary>
    public const int ProFieldNumber = 3;
    private int pro_;
    /// <summary>
    ///权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pro {
      get { return pro_; }
      set {
        pro_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    /// <summary>
    ///需要花费的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "department_level" field.</summary>
    public const int DepartmentLevelFieldNumber = 5;
    private int departmentLevel_;
    /// <summary>
    ///解锁等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DepartmentLevel {
      get { return departmentLevel_; }
      set {
        departmentLevel_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 6;
    private string title_ = "";
    /// <summary>
    ///应援活动标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "need_time" field.</summary>
    public const int NeedTimeFieldNumber = 7;
    private int needTime_;
    /// <summary>
    ///完成需要时间(单位分钟)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedTime {
      get { return needTime_; }
      set {
        needTime_ = value;
      }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 8;
    private static readonly pbc::MapField<int, int>.Codec _map_fans_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 66);
    private readonly pbc::MapField<int, int> fans_ = new pbc::MapField<int, int>();
    /// <summary>
    ///需要的粉丝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Fans {
      get { return fans_; }
    }

    /// <summary>Field number for the "consume" field.</summary>
    public const int ConsumeFieldNumber = 9;
    private static readonly pbc::MapField<int, int>.Codec _map_consume_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 74);
    private readonly pbc::MapField<int, int> consume_ = new pbc::MapField<int, int>();
    /// <summary>
    ///应援道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Consume {
      get { return consume_; }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(82, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "randome_fans_num" field.</summary>
    public const int RandomeFansNumFieldNumber = 11;
    private int randomeFansNum_;
    /// <summary>
    ///奖励随机粉丝数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomeFansNum {
      get { return randomeFansNum_; }
      set {
        randomeFansNum_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 12;
    private int order_;
    /// <summary>
    ///奖励量级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "movie_id" field.</summary>
    public const int MovieIdFieldNumber = 13;
    private int movieId_;
    /// <summary>
    ///动画ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovieId {
      get { return movieId_; }
      set {
        movieId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncourageActRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncourageActRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActType != other.ActType) return false;
      if (Pro != other.Pro) return false;
      if (Power != other.Power) return false;
      if (DepartmentLevel != other.DepartmentLevel) return false;
      if (Title != other.Title) return false;
      if (NeedTime != other.NeedTime) return false;
      if (!Fans.Equals(other.Fans)) return false;
      if (!Consume.Equals(other.Consume)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (RandomeFansNum != other.RandomeFansNum) return false;
      if (Order != other.Order) return false;
      if (MovieId != other.MovieId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (Pro != 0) hash ^= Pro.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (DepartmentLevel != 0) hash ^= DepartmentLevel.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (NeedTime != 0) hash ^= NeedTime.GetHashCode();
      hash ^= Fans.GetHashCode();
      hash ^= Consume.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (RandomeFansNum != 0) hash ^= RandomeFansNum.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (MovieId != 0) hash ^= MovieId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Id);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ActType);
      }
      if (Pro != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Pro);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Power);
      }
      if (DepartmentLevel != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(DepartmentLevel);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (NeedTime != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(NeedTime);
      }
      fans_.WriteTo(output, _map_fans_codec);
      consume_.WriteTo(output, _map_consume_codec);
      awards_.WriteTo(output, _repeated_awards_codec);
      if (RandomeFansNum != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(RandomeFansNum);
      }
      if (Order != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(Order);
      }
      if (MovieId != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(MovieId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActType);
      }
      if (Pro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Pro);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Power);
      }
      if (DepartmentLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DepartmentLevel);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (NeedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NeedTime);
      }
      size += fans_.CalculateSize(_map_fans_codec);
      size += consume_.CalculateSize(_map_consume_codec);
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (RandomeFansNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RandomeFansNum);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Order);
      }
      if (MovieId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MovieId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncourageActRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.Pro != 0) {
        Pro = other.Pro;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.DepartmentLevel != 0) {
        DepartmentLevel = other.DepartmentLevel;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.NeedTime != 0) {
        NeedTime = other.NeedTime;
      }
      fans_.Add(other.fans_);
      consume_.Add(other.consume_);
      awards_.Add(other.awards_);
      if (other.RandomeFansNum != 0) {
        RandomeFansNum = other.RandomeFansNum;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.MovieId != 0) {
        MovieId = other.MovieId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadSInt32();
            break;
          }
          case 16: {
            ActType = input.ReadSInt32();
            break;
          }
          case 24: {
            Pro = input.ReadSInt32();
            break;
          }
          case 32: {
            Power = input.ReadSInt32();
            break;
          }
          case 40: {
            DepartmentLevel = input.ReadSInt32();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 56: {
            NeedTime = input.ReadSInt32();
            break;
          }
          case 66: {
            fans_.AddEntriesFrom(input, _map_fans_codec);
            break;
          }
          case 74: {
            consume_.AddEntriesFrom(input, _map_consume_codec);
            break;
          }
          case 82: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 88: {
            RandomeFansNum = input.ReadSInt32();
            break;
          }
          case 96: {
            Order = input.ReadSInt32();
            break;
          }
          case 104: {
            MovieId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///DepartmentActivityRulePBPB EncourageActRefreshRule
  /// </summary>
  public sealed partial class EncourageActRefreshRulePB : pb::IMessage<EncourageActRefreshRulePB> {
    private static readonly pb::MessageParser<EncourageActRefreshRulePB> _parser = new pb::MessageParser<EncourageActRefreshRulePB>(() => new EncourageActRefreshRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncourageActRefreshRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanEncourageActRuleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActRefreshRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActRefreshRulePB(EncourageActRefreshRulePB other) : this() {
      count_ = other.count_;
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActRefreshRulePB Clone() {
      return new EncourageActRefreshRulePB(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///刷新次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    /// <summary>
    ///花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncourageActRefreshRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncourageActRefreshRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Count);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Count);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncourageActRefreshRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadSInt32();
            break;
          }
          case 16: {
            Gold = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EncourageActDoneRulePB EncourageActDoneRulePB
  /// </summary>
  public sealed partial class EncourageActDoneRulePB : pb::IMessage<EncourageActDoneRulePB> {
    private static readonly pb::MessageParser<EncourageActDoneRulePB> _parser = new pb::MessageParser<EncourageActDoneRulePB>(() => new EncourageActDoneRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncourageActDoneRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanEncourageActRuleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActDoneRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActDoneRulePB(EncourageActDoneRulePB other) : this() {
      time_ = other.time_;
      gem_ = other.gem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActDoneRulePB Clone() {
      return new EncourageActDoneRulePB(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    /// <summary>
    ///剩余时间（分钟）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "gem" field.</summary>
    public const int GemFieldNumber = 2;
    private int gem_;
    /// <summary>
    ///花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gem {
      get { return gem_; }
      set {
        gem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncourageActDoneRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncourageActDoneRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Gem != other.Gem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Gem != 0) hash ^= Gem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Time);
      }
      if (Gem != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Time);
      }
      if (Gem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncourageActDoneRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Gem != 0) {
        Gem = other.Gem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadSInt32();
            break;
          }
          case 16: {
            Gem = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EncourageActBuyRulePB EncourageActBuyRulePB
  /// </summary>
  public sealed partial class EncourageActBuyRulePB : pb::IMessage<EncourageActBuyRulePB> {
    private static readonly pb::MessageParser<EncourageActBuyRulePB> _parser = new pb::MessageParser<EncourageActBuyRulePB>(() => new EncourageActBuyRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncourageActBuyRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanEncourageActRuleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActBuyRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActBuyRulePB(EncourageActBuyRulePB other) : this() {
      count_ = other.count_;
      gem_ = other.gem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncourageActBuyRulePB Clone() {
      return new EncourageActBuyRulePB(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "gem" field.</summary>
    public const int GemFieldNumber = 2;
    private int gem_;
    /// <summary>
    ///花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gem {
      get { return gem_; }
      set {
        gem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncourageActBuyRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncourageActBuyRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Gem != other.Gem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Gem != 0) hash ^= Gem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Count);
      }
      if (Gem != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Count);
      }
      if (Gem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncourageActBuyRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Gem != 0) {
        Gem = other.Gem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadSInt32();
            break;
          }
          case 16: {
            Gem = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
