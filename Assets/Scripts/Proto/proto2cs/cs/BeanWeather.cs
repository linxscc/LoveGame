// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_weather.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_weather.proto</summary>
  public static partial class BeanWeatherReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_weather.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanWeatherReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJiZWFuX3dlYXRoZXIucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90byJv",
            "CglXZWF0aGVyUEISEgoKd2VhdGhlcl9pZBgBIAEoERIMCgRuYW1lGAIgASgJ",
            "EhQKDHZpc2l0aW5nX251bRgDIAEoERIMCgRiZXN0GAQgASgREg4KBmJldHRl",
            "chgFIAEoERIMCgRzYW1lGAYgASgRIs8BCg5XZWF0aGVyQmxlc3NQQhISCgp3",
            "ZWF0aGVyX2lkGAEgASgREhEKCWJsZXNzX251bRgCIAEoERJHChBibGVzc19y",
            "YW5kb21fcHJvGAMgAygLMi0uY29tLnByb3RvLldlYXRoZXJCbGVzc1BCLkJs",
            "ZXNzUmFuZG9tUHJvRW50cnkSFgoOYmxlc3Nfc2hvd19wcm8YBCABKBEaNQoT",
            "Qmxlc3NSYW5kb21Qcm9FbnRyeRILCgNrZXkYASABKBESDQoFdmFsdWUYAiAB",
            "KBE6AjgBIjsKEldlYXRoZXJCbGVzc0Nvc3RQQhIRCglibGVzc19udW0YASAB",
            "KBESEgoKYmxlc3NfY29zdBgCIAEoEUIwCh9uZXQuZ2FsYXNwb3J0cy5iaWdz",
            "dGFyLnByb3RvY29sQg1XZWF0aGVyUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.WeatherPB), global::Com.Proto.WeatherPB.Parser, new[]{ "WeatherId", "Name", "VisitingNum", "Best", "Better", "Same" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.WeatherBlessPB), global::Com.Proto.WeatherBlessPB.Parser, new[]{ "WeatherId", "BlessNum", "BlessRandomPro", "BlessShowPro" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.WeatherBlessCostPB), global::Com.Proto.WeatherBlessCostPB.Parser, new[]{ "BlessNum", "BlessCost" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///WeatherPB Weather
  /// </summary>
  public sealed partial class WeatherPB : pb::IMessage<WeatherPB> {
    private static readonly pb::MessageParser<WeatherPB> _parser = new pb::MessageParser<WeatherPB>(() => new WeatherPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanWeatherReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherPB(WeatherPB other) : this() {
      weatherId_ = other.weatherId_;
      name_ = other.name_;
      visitingNum_ = other.visitingNum_;
      best_ = other.best_;
      better_ = other.better_;
      same_ = other.same_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherPB Clone() {
      return new WeatherPB(this);
    }

    /// <summary>Field number for the "weather_id" field.</summary>
    public const int WeatherIdFieldNumber = 1;
    private int weatherId_;
    /// <summary>
    ///天气id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeatherId {
      get { return weatherId_; }
      set {
        weatherId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visiting_num" field.</summary>
    public const int VisitingNumFieldNumber = 3;
    private int visitingNum_;
    /// <summary>
    ///关卡探班次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VisitingNum {
      get { return visitingNum_; }
      set {
        visitingNum_ = value;
      }
    }

    /// <summary>Field number for the "best" field.</summary>
    public const int BestFieldNumber = 4;
    private int best_;
    /// <summary>
    ///最好
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Best {
      get { return best_; }
      set {
        best_ = value;
      }
    }

    /// <summary>Field number for the "better" field.</summary>
    public const int BetterFieldNumber = 5;
    private int better_;
    /// <summary>
    ///更好
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Better {
      get { return better_; }
      set {
        better_ = value;
      }
    }

    /// <summary>Field number for the "same" field.</summary>
    public const int SameFieldNumber = 6;
    private int same_;
    /// <summary>
    ///不变
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Same {
      get { return same_; }
      set {
        same_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeatherId != other.WeatherId) return false;
      if (Name != other.Name) return false;
      if (VisitingNum != other.VisitingNum) return false;
      if (Best != other.Best) return false;
      if (Better != other.Better) return false;
      if (Same != other.Same) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeatherId != 0) hash ^= WeatherId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (VisitingNum != 0) hash ^= VisitingNum.GetHashCode();
      if (Best != 0) hash ^= Best.GetHashCode();
      if (Better != 0) hash ^= Better.GetHashCode();
      if (Same != 0) hash ^= Same.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeatherId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(WeatherId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (VisitingNum != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(VisitingNum);
      }
      if (Best != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Best);
      }
      if (Better != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Better);
      }
      if (Same != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Same);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeatherId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WeatherId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (VisitingNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VisitingNum);
      }
      if (Best != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Best);
      }
      if (Better != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Better);
      }
      if (Same != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Same);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherPB other) {
      if (other == null) {
        return;
      }
      if (other.WeatherId != 0) {
        WeatherId = other.WeatherId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.VisitingNum != 0) {
        VisitingNum = other.VisitingNum;
      }
      if (other.Best != 0) {
        Best = other.Best;
      }
      if (other.Better != 0) {
        Better = other.Better;
      }
      if (other.Same != 0) {
        Same = other.Same;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WeatherId = input.ReadSInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            VisitingNum = input.ReadSInt32();
            break;
          }
          case 32: {
            Best = input.ReadSInt32();
            break;
          }
          case 40: {
            Better = input.ReadSInt32();
            break;
          }
          case 48: {
            Same = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///WeatherBlessPB WeatherBless
  /// </summary>
  public sealed partial class WeatherBlessPB : pb::IMessage<WeatherBlessPB> {
    private static readonly pb::MessageParser<WeatherBlessPB> _parser = new pb::MessageParser<WeatherBlessPB>(() => new WeatherBlessPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherBlessPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanWeatherReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBlessPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBlessPB(WeatherBlessPB other) : this() {
      weatherId_ = other.weatherId_;
      blessNum_ = other.blessNum_;
      blessRandomPro_ = other.blessRandomPro_.Clone();
      blessShowPro_ = other.blessShowPro_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBlessPB Clone() {
      return new WeatherBlessPB(this);
    }

    /// <summary>Field number for the "weather_id" field.</summary>
    public const int WeatherIdFieldNumber = 1;
    private int weatherId_;
    /// <summary>
    ///天气id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeatherId {
      get { return weatherId_; }
      set {
        weatherId_ = value;
      }
    }

    /// <summary>Field number for the "bless_num" field.</summary>
    public const int BlessNumFieldNumber = 2;
    private int blessNum_;
    /// <summary>
    ///祈福次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlessNum {
      get { return blessNum_; }
      set {
        blessNum_ = value;
      }
    }

    /// <summary>Field number for the "bless_random_pro" field.</summary>
    public const int BlessRandomProFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_blessRandomPro_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 26);
    private readonly pbc::MapField<int, int> blessRandomPro_ = new pbc::MapField<int, int>();
    /// <summary>
    ///祈福随机权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> BlessRandomPro {
      get { return blessRandomPro_; }
    }

    /// <summary>Field number for the "bless_show_pro" field.</summary>
    public const int BlessShowProFieldNumber = 4;
    private int blessShowPro_;
    /// <summary>
    ///前端展示成功率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlessShowPro {
      get { return blessShowPro_; }
      set {
        blessShowPro_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherBlessPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherBlessPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeatherId != other.WeatherId) return false;
      if (BlessNum != other.BlessNum) return false;
      if (!BlessRandomPro.Equals(other.BlessRandomPro)) return false;
      if (BlessShowPro != other.BlessShowPro) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeatherId != 0) hash ^= WeatherId.GetHashCode();
      if (BlessNum != 0) hash ^= BlessNum.GetHashCode();
      hash ^= BlessRandomPro.GetHashCode();
      if (BlessShowPro != 0) hash ^= BlessShowPro.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeatherId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(WeatherId);
      }
      if (BlessNum != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(BlessNum);
      }
      blessRandomPro_.WriteTo(output, _map_blessRandomPro_codec);
      if (BlessShowPro != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(BlessShowPro);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeatherId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WeatherId);
      }
      if (BlessNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BlessNum);
      }
      size += blessRandomPro_.CalculateSize(_map_blessRandomPro_codec);
      if (BlessShowPro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BlessShowPro);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherBlessPB other) {
      if (other == null) {
        return;
      }
      if (other.WeatherId != 0) {
        WeatherId = other.WeatherId;
      }
      if (other.BlessNum != 0) {
        BlessNum = other.BlessNum;
      }
      blessRandomPro_.Add(other.blessRandomPro_);
      if (other.BlessShowPro != 0) {
        BlessShowPro = other.BlessShowPro;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WeatherId = input.ReadSInt32();
            break;
          }
          case 16: {
            BlessNum = input.ReadSInt32();
            break;
          }
          case 26: {
            blessRandomPro_.AddEntriesFrom(input, _map_blessRandomPro_codec);
            break;
          }
          case 32: {
            BlessShowPro = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///WeatherBlessCostPB WeatherBlessCost
  /// </summary>
  public sealed partial class WeatherBlessCostPB : pb::IMessage<WeatherBlessCostPB> {
    private static readonly pb::MessageParser<WeatherBlessCostPB> _parser = new pb::MessageParser<WeatherBlessCostPB>(() => new WeatherBlessCostPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherBlessCostPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanWeatherReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBlessCostPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBlessCostPB(WeatherBlessCostPB other) : this() {
      blessNum_ = other.blessNum_;
      blessCost_ = other.blessCost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherBlessCostPB Clone() {
      return new WeatherBlessCostPB(this);
    }

    /// <summary>Field number for the "bless_num" field.</summary>
    public const int BlessNumFieldNumber = 1;
    private int blessNum_;
    /// <summary>
    ///祈福次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlessNum {
      get { return blessNum_; }
      set {
        blessNum_ = value;
      }
    }

    /// <summary>Field number for the "bless_cost" field.</summary>
    public const int BlessCostFieldNumber = 2;
    private int blessCost_;
    /// <summary>
    ///祈福消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlessCost {
      get { return blessCost_; }
      set {
        blessCost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherBlessCostPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherBlessCostPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlessNum != other.BlessNum) return false;
      if (BlessCost != other.BlessCost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlessNum != 0) hash ^= BlessNum.GetHashCode();
      if (BlessCost != 0) hash ^= BlessCost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlessNum != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(BlessNum);
      }
      if (BlessCost != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(BlessCost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlessNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BlessNum);
      }
      if (BlessCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BlessCost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherBlessCostPB other) {
      if (other == null) {
        return;
      }
      if (other.BlessNum != 0) {
        BlessNum = other.BlessNum;
      }
      if (other.BlessCost != 0) {
        BlessCost = other.BlessCost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlessNum = input.ReadSInt32();
            break;
          }
          case 16: {
            BlessCost = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
