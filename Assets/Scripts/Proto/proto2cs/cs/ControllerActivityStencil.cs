// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_activity_stencil.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_activity_stencil.proto</summary>
  public static partial class ControllerActivityStencilReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_activity_stencil.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerActivityStencilReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFjb250cm9sbGVyX2FjdGl2aXR5X3N0ZW5jaWwucHJvdG8SCWNvbS5wcm90",
            "bxoKYmFzZS5wcm90bxogYmVhbl91c2VyX2FjdGl2aXR5X21pc3Npb24ucHJv",
            "dG8aIGJlYW5fYWN0aXZpdHlfbWlzc2lvbl9ydWxlLnByb3RvGh1iZWFuX2Fj",
            "dGl2aXR5X21hbGxfcnVsZS5wcm90bxohYmVhbl91c2VyX2J1eV9hY3Rpdml0",
            "eV9tYWxsLnByb3RvGh1iZWFuX2FjdGl2aXR5X3Bsb3RfcnVsZS5wcm90bxoU",
            "YmVhbl91c2VyX2l0ZW0ucHJvdG8aEGJlYW5fYXdhcmQucHJvdG8aJ2JlYW5f",
            "dXNlcl9hY3Rpdml0eV9wbG90X2luZm9fcnVsZS5wcm90bxojYmVhbl91c2Vy",
            "X2FjdGl2aXR5X2xldmVsX2luZm8ucHJvdG8aHmJlYW5fYWN0aXZpdHlfbGV2",
            "ZWxfcnVsZS5wcm90bxoWYmVhbl9nYW1lX3Jlc3VsdC5wcm90bxoVYmVhbl91",
            "c2VyX21vbmV5LnByb3RvIpoCChNBY3Rpdml0eVJ1bGVMaXN0UmVzEgsKA3Jl",
            "dBgBIAEoERJAChZhY3Rpdml0eV9taXNzaW9uX3J1bGVzGAIgAygLMiAuY29t",
            "LnByb3RvLkFjdGl2aXR5TWlzc2lvblJ1bGVQQhI6ChNhY3Rpdml0eV9tYWxs",
            "X3J1bGVzGAMgAygLMh0uY29tLnByb3RvLkFjdGl2aXR5TWFsbFJ1bGVQQhI6",
            "ChNhY3Rpdml0eV9wbG90X3J1bGVzGAQgAygLMh0uY29tLnByb3RvLkFjdGl2",
            "aXR5UGxvdFJ1bGVQQhI8ChRhY3Rpdml0eV9sZXZlbF9ydWxlcxgFIAMoCzIe",
            "LmNvbS5wcm90by5BY3Rpdml0eUxldmVsUnVsZVBCIiYKD0FjdGl2aXR5TGlz",
            "dFJlcRITCgthY3Rpdml0eV9pZBgBIAEoESKvAgoPQWN0aXZpdHlMaXN0UmVz",
            "EgsKA3JldBgBIAEoERJAChZ1c2VyX2FjdGl2aXR5X21pc3Npb25zGAIgAygL",
            "MiAuY29tLnByb3RvLlVzZXJBY3Rpdml0eU1pc3Npb25QQhJBChd1c2VyX2J1",
            "eV9hY3Rpdml0eV9tYWxscxgDIAMoCzIgLmNvbS5wcm90by5Vc2VyQnV5QWN0",
            "aXZpdHlNYWxsUEISQwoYdXNlcl9hY3Rpdml0eV9wbG90X2luZm9zGAQgAygL",
            "MiEuY29tLnByb3RvLlVzZXJBY3Rpdml0eVBsb3RJbmZvUEISRQoZdXNlcl9h",
            "Y3Rpdml0eV9sZXZlbF9pbmZvcxgFIAMoCzIiLmNvbS5wcm90by5Vc2VyQWN0",
            "aXZpdHlMZXZlbEluZm9QQiJQChxHYWluQWN0aXZpdHlNaXNzaW9uQXdhcmRz",
            "UmVxEhMKC2FjdGl2aXR5X2lkGAEgASgREhsKE2FjdGl2aXR5X21pc3Npb25f",
            "aWQYAiABKBEikAEKHEdhaW5BY3Rpdml0eU1pc3Npb25Bd2FyZHNSZXMSCwoD",
            "cmV0GAEgASgREiIKBmF3YXJkcxgCIAMoCzISLmNvbS5wcm90by5Bd2FyZFBC",
            "Ej8KFXVzZXJfYWN0aXZpdHlfbWlzc2lvbhgDIAEoCzIgLmNvbS5wcm90by5V",
            "c2VyQWN0aXZpdHlNaXNzaW9uUEIiTAoXQWN0aXZpdHlFeGNoYW5nZU1hbGxS",
            "ZXESEwoLYWN0aXZpdHlfaWQYASABKBESDwoHbWFsbF9pZBgCIAEoERILCgNu",
            "dW0YAyABKBEitgEKF0FjdGl2aXR5RXhjaGFuZ2VNYWxsUmVzEgsKA3JldBgB",
            "IAEoERIiCgZhd2FyZHMYAiADKAsyEi5jb20ucHJvdG8uQXdhcmRQQhIoCgl1",
            "c2VyX2l0ZW0YAyABKAsyFS5jb20ucHJvdG8uVXNlckl0ZW1QQhJAChZ1c2Vy",
            "X2J1eV9hY3Rpdml0eV9tYWxsGAQgASgLMiAuY29tLnByb3RvLlVzZXJCdXlB",
            "Y3Rpdml0eU1hbGxQQiI8ChRXYXRjaEFjdGl2aXR5UGxvdFJlcRITCgthY3Rp",
            "dml0eV9pZBgBIAEoERIPCgdwbG90X2lkGAIgASgJImcKFFdhdGNoQWN0aXZp",
            "dHlQbG90UmVzEgsKA3JldBgBIAEoERJCChd1c2VyX2FjdGl2aXR5X3Bsb3Rf",
            "aW5mbxgCIAEoCzIhLmNvbS5wcm90by5Vc2VyQWN0aXZpdHlQbG90SW5mb1BC",
            "Iq0CChlDaGFsbGVuZ2VBY3Rpdml0eUxldmVsUmVxEhMKC2FjdGl2aXR5X2lk",
            "GAEgASgREhAKCGxldmVsX2lkGAIgASgREhAKCGNhcmRfaWRzGAMgAygREj4K",
            "BWl0ZW1zGAQgAygLMi8uY29tLnByb3RvLkNoYWxsZW5nZUFjdGl2aXR5TGV2",
            "ZWxSZXEuSXRlbXNFbnRyeRI8CgRmYW5zGAUgAygLMi4uY29tLnByb3RvLkNo",
            "YWxsZW5nZUFjdGl2aXR5TGV2ZWxSZXEuRmFuc0VudHJ5GiwKCkl0ZW1zRW50",
            "cnkSCwoDa2V5GAEgASgREg0KBXZhbHVlGAIgASgROgI4ARorCglGYW5zRW50",
            "cnkSCwoDa2V5GAEgASgREg0KBXZhbHVlGAIgASgROgI4ASLFAQoZQ2hhbGxl",
            "bmdlQWN0aXZpdHlMZXZlbFJlcxILCgNyZXQYASABKBESKwoKZ2FtZVJlc3Vs",
            "dBgCIAEoCzIXLmNvbS5wcm90by5HYW1lUmVzdWx0UEISKAoJdXNlcl9JdGVt",
            "GAMgAygLMhUuY29tLnByb3RvLlVzZXJJdGVtUEISRAoYdXNlcl9hY3Rpdml0",
            "eV9sZXZlbF9pbmZvGAQgASgLMiIuY29tLnByb3RvLlVzZXJBY3Rpdml0eUxl",
            "dmVsSW5mb1BCIksKFUFjdGl2aXR5TGV2ZWxTd2VlcFJlcRITCgthY3Rpdml0",
            "eV9pZBgBIAEoERIQCghsZXZlbF9pZBgCIAEoERILCgNudW0YAyABKBEilwEK",
            "FUFjdGl2aXR5TGV2ZWxTd2VlcFJlcxILCgNyZXQYASABKBESKwoKZ2FtZVJl",
            "c3VsdBgCIAMoCzIXLmNvbS5wcm90by5HYW1lUmVzdWx0UEISRAoYdXNlcl9h",
            "Y3Rpdml0eV9sZXZlbF9pbmZvGAMgASgLMiIuY29tLnByb3RvLlVzZXJBY3Rp",
            "dml0eUxldmVsSW5mb1BCIlQKGEJ1eUFjdGl2aXR5TGV2ZWxDb3VudFJlcRIT",
            "CgthY3Rpdml0eV9pZBgBIAEoERIQCghsZXZlbF9pZBgCIAEoERIRCglidXlf",
            "Y291bnQYAyABKBEinAEKGEJ1eUFjdGl2aXR5TGV2ZWxDb3VudFJlcxILCgNy",
            "ZXQYASABKBESRAoYdXNlcl9hY3Rpdml0eV9sZXZlbF9pbmZvGAIgASgLMiIu",
            "Y29tLnByb3RvLlVzZXJBY3Rpdml0eUxldmVsSW5mb1BCEi0KDXVzZXJfbW9u",
            "ZXlfUEIYAyABKAsyFi5jb20ucHJvdG8uVXNlck1vbmV5UEJCQgofbmV0Lmdh",
            "bGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIfQWN0aXZpdHlTdGVuY2lsQ29u",
            "dHJvbGxlclByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanUserActivityMissionReflection.Descriptor, global::Com.Proto.BeanActivityMissionRuleReflection.Descriptor, global::Com.Proto.BeanActivityMallRuleReflection.Descriptor, global::Com.Proto.BeanUserBuyActivityMallReflection.Descriptor, global::Com.Proto.BeanActivityPlotRuleReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanUserActivityPlotInfoRuleReflection.Descriptor, global::Com.Proto.BeanUserActivityLevelInfoReflection.Descriptor, global::Com.Proto.BeanActivityLevelRuleReflection.Descriptor, global::Com.Proto.BeanGameResultReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityRuleListRes), global::Com.Proto.ActivityRuleListRes.Parser, new[]{ "Ret", "ActivityMissionRules", "ActivityMallRules", "ActivityPlotRules", "ActivityLevelRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityListReq), global::Com.Proto.ActivityListReq.Parser, new[]{ "ActivityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityListRes), global::Com.Proto.ActivityListRes.Parser, new[]{ "Ret", "UserActivityMissions", "UserBuyActivityMalls", "UserActivityPlotInfos", "UserActivityLevelInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GainActivityMissionAwardsReq), global::Com.Proto.GainActivityMissionAwardsReq.Parser, new[]{ "ActivityId", "ActivityMissionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GainActivityMissionAwardsRes), global::Com.Proto.GainActivityMissionAwardsRes.Parser, new[]{ "Ret", "Awards", "UserActivityMission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityExchangeMallReq), global::Com.Proto.ActivityExchangeMallReq.Parser, new[]{ "ActivityId", "MallId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityExchangeMallRes), global::Com.Proto.ActivityExchangeMallRes.Parser, new[]{ "Ret", "Awards", "UserItem", "UserBuyActivityMall" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.WatchActivityPlotReq), global::Com.Proto.WatchActivityPlotReq.Parser, new[]{ "ActivityId", "PlotId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.WatchActivityPlotRes), global::Com.Proto.WatchActivityPlotRes.Parser, new[]{ "Ret", "UserActivityPlotInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChallengeActivityLevelReq), global::Com.Proto.ChallengeActivityLevelReq.Parser, new[]{ "ActivityId", "LevelId", "CardIds", "Items", "Fans" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChallengeActivityLevelRes), global::Com.Proto.ChallengeActivityLevelRes.Parser, new[]{ "Ret", "GameResult", "UserItem", "UserActivityLevelInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityLevelSweepReq), global::Com.Proto.ActivityLevelSweepReq.Parser, new[]{ "ActivityId", "LevelId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityLevelSweepRes), global::Com.Proto.ActivityLevelSweepRes.Parser, new[]{ "Ret", "GameResult", "UserActivityLevelInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BuyActivityLevelCountReq), global::Com.Proto.BuyActivityLevelCountReq.Parser, new[]{ "ActivityId", "LevelId", "BuyCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BuyActivityLevelCountRes), global::Com.Proto.BuyActivityLevelCountRes.Parser, new[]{ "Ret", "UserActivityLevelInfo", "UserMoneyPB" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActivityRuleListRes : pb::IMessage<ActivityRuleListRes> {
    private static readonly pb::MessageParser<ActivityRuleListRes> _parser = new pb::MessageParser<ActivityRuleListRes>(() => new ActivityRuleListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityRuleListRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityRuleListRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityRuleListRes(ActivityRuleListRes other) : this() {
      ret_ = other.ret_;
      activityMissionRules_ = other.activityMissionRules_.Clone();
      activityMallRules_ = other.activityMallRules_.Clone();
      activityPlotRules_ = other.activityPlotRules_.Clone();
      activityLevelRules_ = other.activityLevelRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityRuleListRes Clone() {
      return new ActivityRuleListRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "activity_mission_rules" field.</summary>
    public const int ActivityMissionRulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.ActivityMissionRulePB> _repeated_activityMissionRules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.ActivityMissionRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ActivityMissionRulePB> activityMissionRules_ = new pbc::RepeatedField<global::Com.Proto.ActivityMissionRulePB>();
    /// <summary>
    ///活动任务规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ActivityMissionRulePB> ActivityMissionRules {
      get { return activityMissionRules_; }
    }

    /// <summary>Field number for the "activity_mall_rules" field.</summary>
    public const int ActivityMallRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.ActivityMallRulePB> _repeated_activityMallRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.ActivityMallRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ActivityMallRulePB> activityMallRules_ = new pbc::RepeatedField<global::Com.Proto.ActivityMallRulePB>();
    /// <summary>
    ///活动兑换商城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ActivityMallRulePB> ActivityMallRules {
      get { return activityMallRules_; }
    }

    /// <summary>Field number for the "activity_plot_rules" field.</summary>
    public const int ActivityPlotRulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.ActivityPlotRulePB> _repeated_activityPlotRules_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.ActivityPlotRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ActivityPlotRulePB> activityPlotRules_ = new pbc::RepeatedField<global::Com.Proto.ActivityPlotRulePB>();
    /// <summary>
    ///活动剧情规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ActivityPlotRulePB> ActivityPlotRules {
      get { return activityPlotRules_; }
    }

    /// <summary>Field number for the "activity_level_rules" field.</summary>
    public const int ActivityLevelRulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.ActivityLevelRulePB> _repeated_activityLevelRules_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.ActivityLevelRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ActivityLevelRulePB> activityLevelRules_ = new pbc::RepeatedField<global::Com.Proto.ActivityLevelRulePB>();
    /// <summary>
    ///活动副本规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ActivityLevelRulePB> ActivityLevelRules {
      get { return activityLevelRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityRuleListRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityRuleListRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!activityMissionRules_.Equals(other.activityMissionRules_)) return false;
      if(!activityMallRules_.Equals(other.activityMallRules_)) return false;
      if(!activityPlotRules_.Equals(other.activityPlotRules_)) return false;
      if(!activityLevelRules_.Equals(other.activityLevelRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= activityMissionRules_.GetHashCode();
      hash ^= activityMallRules_.GetHashCode();
      hash ^= activityPlotRules_.GetHashCode();
      hash ^= activityLevelRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      activityMissionRules_.WriteTo(output, _repeated_activityMissionRules_codec);
      activityMallRules_.WriteTo(output, _repeated_activityMallRules_codec);
      activityPlotRules_.WriteTo(output, _repeated_activityPlotRules_codec);
      activityLevelRules_.WriteTo(output, _repeated_activityLevelRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += activityMissionRules_.CalculateSize(_repeated_activityMissionRules_codec);
      size += activityMallRules_.CalculateSize(_repeated_activityMallRules_codec);
      size += activityPlotRules_.CalculateSize(_repeated_activityPlotRules_codec);
      size += activityLevelRules_.CalculateSize(_repeated_activityLevelRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityRuleListRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      activityMissionRules_.Add(other.activityMissionRules_);
      activityMallRules_.Add(other.activityMallRules_);
      activityPlotRules_.Add(other.activityPlotRules_);
      activityLevelRules_.Add(other.activityLevelRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            activityMissionRules_.AddEntriesFrom(input, _repeated_activityMissionRules_codec);
            break;
          }
          case 26: {
            activityMallRules_.AddEntriesFrom(input, _repeated_activityMallRules_codec);
            break;
          }
          case 34: {
            activityPlotRules_.AddEntriesFrom(input, _repeated_activityPlotRules_codec);
            break;
          }
          case 42: {
            activityLevelRules_.AddEntriesFrom(input, _repeated_activityLevelRules_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivityListReq : pb::IMessage<ActivityListReq> {
    private static readonly pb::MessageParser<ActivityListReq> _parser = new pb::MessageParser<ActivityListReq>(() => new ActivityListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityListReq(ActivityListReq other) : this() {
      activityId_ = other.activityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityListReq Clone() {
      return new ActivityListReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityListReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivityListRes : pb::IMessage<ActivityListRes> {
    private static readonly pb::MessageParser<ActivityListRes> _parser = new pb::MessageParser<ActivityListRes>(() => new ActivityListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityListRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityListRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityListRes(ActivityListRes other) : this() {
      ret_ = other.ret_;
      userActivityMissions_ = other.userActivityMissions_.Clone();
      userBuyActivityMalls_ = other.userBuyActivityMalls_.Clone();
      userActivityPlotInfos_ = other.userActivityPlotInfos_.Clone();
      userActivityLevelInfos_ = other.userActivityLevelInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityListRes Clone() {
      return new ActivityListRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_activity_missions" field.</summary>
    public const int UserActivityMissionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserActivityMissionPB> _repeated_userActivityMissions_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserActivityMissionPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserActivityMissionPB> userActivityMissions_ = new pbc::RepeatedField<global::Com.Proto.UserActivityMissionPB>();
    /// <summary>
    ///活动任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserActivityMissionPB> UserActivityMissions {
      get { return userActivityMissions_; }
    }

    /// <summary>Field number for the "user_buy_activity_malls" field.</summary>
    public const int UserBuyActivityMallsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserBuyActivityMallPB> _repeated_userBuyActivityMalls_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserBuyActivityMallPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserBuyActivityMallPB> userBuyActivityMalls_ = new pbc::RepeatedField<global::Com.Proto.UserBuyActivityMallPB>();
    /// <summary>
    ///活动兑换商城信息表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserBuyActivityMallPB> UserBuyActivityMalls {
      get { return userBuyActivityMalls_; }
    }

    /// <summary>Field number for the "user_activity_plot_infos" field.</summary>
    public const int UserActivityPlotInfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.UserActivityPlotInfoPB> _repeated_userActivityPlotInfos_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.UserActivityPlotInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserActivityPlotInfoPB> userActivityPlotInfos_ = new pbc::RepeatedField<global::Com.Proto.UserActivityPlotInfoPB>();
    /// <summary>
    ///活动剧情信息表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserActivityPlotInfoPB> UserActivityPlotInfos {
      get { return userActivityPlotInfos_; }
    }

    /// <summary>Field number for the "user_activity_level_infos" field.</summary>
    public const int UserActivityLevelInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.UserActivityLevelInfoPB> _repeated_userActivityLevelInfos_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.UserActivityLevelInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserActivityLevelInfoPB> userActivityLevelInfos_ = new pbc::RepeatedField<global::Com.Proto.UserActivityLevelInfoPB>();
    /// <summary>
    ///玩家活动副本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserActivityLevelInfoPB> UserActivityLevelInfos {
      get { return userActivityLevelInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityListRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityListRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userActivityMissions_.Equals(other.userActivityMissions_)) return false;
      if(!userBuyActivityMalls_.Equals(other.userBuyActivityMalls_)) return false;
      if(!userActivityPlotInfos_.Equals(other.userActivityPlotInfos_)) return false;
      if(!userActivityLevelInfos_.Equals(other.userActivityLevelInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userActivityMissions_.GetHashCode();
      hash ^= userBuyActivityMalls_.GetHashCode();
      hash ^= userActivityPlotInfos_.GetHashCode();
      hash ^= userActivityLevelInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userActivityMissions_.WriteTo(output, _repeated_userActivityMissions_codec);
      userBuyActivityMalls_.WriteTo(output, _repeated_userBuyActivityMalls_codec);
      userActivityPlotInfos_.WriteTo(output, _repeated_userActivityPlotInfos_codec);
      userActivityLevelInfos_.WriteTo(output, _repeated_userActivityLevelInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userActivityMissions_.CalculateSize(_repeated_userActivityMissions_codec);
      size += userBuyActivityMalls_.CalculateSize(_repeated_userBuyActivityMalls_codec);
      size += userActivityPlotInfos_.CalculateSize(_repeated_userActivityPlotInfos_codec);
      size += userActivityLevelInfos_.CalculateSize(_repeated_userActivityLevelInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityListRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userActivityMissions_.Add(other.userActivityMissions_);
      userBuyActivityMalls_.Add(other.userBuyActivityMalls_);
      userActivityPlotInfos_.Add(other.userActivityPlotInfos_);
      userActivityLevelInfos_.Add(other.userActivityLevelInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userActivityMissions_.AddEntriesFrom(input, _repeated_userActivityMissions_codec);
            break;
          }
          case 26: {
            userBuyActivityMalls_.AddEntriesFrom(input, _repeated_userBuyActivityMalls_codec);
            break;
          }
          case 34: {
            userActivityPlotInfos_.AddEntriesFrom(input, _repeated_userActivityPlotInfos_codec);
            break;
          }
          case 42: {
            userActivityLevelInfos_.AddEntriesFrom(input, _repeated_userActivityLevelInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GainActivityMissionAwardsReq : pb::IMessage<GainActivityMissionAwardsReq> {
    private static readonly pb::MessageParser<GainActivityMissionAwardsReq> _parser = new pb::MessageParser<GainActivityMissionAwardsReq>(() => new GainActivityMissionAwardsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GainActivityMissionAwardsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainActivityMissionAwardsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainActivityMissionAwardsReq(GainActivityMissionAwardsReq other) : this() {
      activityId_ = other.activityId_;
      activityMissionId_ = other.activityMissionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainActivityMissionAwardsReq Clone() {
      return new GainActivityMissionAwardsReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "activity_mission_id" field.</summary>
    public const int ActivityMissionIdFieldNumber = 2;
    private int activityMissionId_;
    /// <summary>
    ///missionId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityMissionId {
      get { return activityMissionId_; }
      set {
        activityMissionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GainActivityMissionAwardsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GainActivityMissionAwardsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (ActivityMissionId != other.ActivityMissionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (ActivityMissionId != 0) hash ^= ActivityMissionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (ActivityMissionId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ActivityMissionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (ActivityMissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityMissionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GainActivityMissionAwardsReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.ActivityMissionId != 0) {
        ActivityMissionId = other.ActivityMissionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            ActivityMissionId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GainActivityMissionAwardsRes : pb::IMessage<GainActivityMissionAwardsRes> {
    private static readonly pb::MessageParser<GainActivityMissionAwardsRes> _parser = new pb::MessageParser<GainActivityMissionAwardsRes>(() => new GainActivityMissionAwardsRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GainActivityMissionAwardsRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainActivityMissionAwardsRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainActivityMissionAwardsRes(GainActivityMissionAwardsRes other) : this() {
      ret_ = other.ret_;
      awards_ = other.awards_.Clone();
      UserActivityMission = other.userActivityMission_ != null ? other.UserActivityMission.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GainActivityMissionAwardsRes Clone() {
      return new GainActivityMissionAwardsRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "user_activity_mission" field.</summary>
    public const int UserActivityMissionFieldNumber = 3;
    private global::Com.Proto.UserActivityMissionPB userActivityMission_;
    /// <summary>
    ///活动任务情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserActivityMissionPB UserActivityMission {
      get { return userActivityMission_; }
      set {
        userActivityMission_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GainActivityMissionAwardsRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GainActivityMissionAwardsRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (!object.Equals(UserActivityMission, other.UserActivityMission)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (userActivityMission_ != null) hash ^= UserActivityMission.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (userActivityMission_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserActivityMission);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (userActivityMission_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserActivityMission);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GainActivityMissionAwardsRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      awards_.Add(other.awards_);
      if (other.userActivityMission_ != null) {
        if (userActivityMission_ == null) {
          userActivityMission_ = new global::Com.Proto.UserActivityMissionPB();
        }
        UserActivityMission.MergeFrom(other.UserActivityMission);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 26: {
            if (userActivityMission_ == null) {
              userActivityMission_ = new global::Com.Proto.UserActivityMissionPB();
            }
            input.ReadMessage(userActivityMission_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivityExchangeMallReq : pb::IMessage<ActivityExchangeMallReq> {
    private static readonly pb::MessageParser<ActivityExchangeMallReq> _parser = new pb::MessageParser<ActivityExchangeMallReq>(() => new ActivityExchangeMallReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityExchangeMallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExchangeMallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExchangeMallReq(ActivityExchangeMallReq other) : this() {
      activityId_ = other.activityId_;
      mallId_ = other.mallId_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExchangeMallReq Clone() {
      return new ActivityExchangeMallReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "mall_id" field.</summary>
    public const int MallIdFieldNumber = 2;
    private int mallId_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MallId {
      get { return mallId_; }
      set {
        mallId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityExchangeMallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityExchangeMallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (MallId != other.MallId) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (MallId != 0) hash ^= MallId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (MallId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(MallId);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (MallId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MallId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityExchangeMallReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.MallId != 0) {
        MallId = other.MallId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            MallId = input.ReadSInt32();
            break;
          }
          case 24: {
            Num = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivityExchangeMallRes : pb::IMessage<ActivityExchangeMallRes> {
    private static readonly pb::MessageParser<ActivityExchangeMallRes> _parser = new pb::MessageParser<ActivityExchangeMallRes>(() => new ActivityExchangeMallRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityExchangeMallRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExchangeMallRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExchangeMallRes(ActivityExchangeMallRes other) : this() {
      ret_ = other.ret_;
      awards_ = other.awards_.Clone();
      UserItem = other.userItem_ != null ? other.UserItem.Clone() : null;
      UserBuyActivityMall = other.userBuyActivityMall_ != null ? other.UserBuyActivityMall.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityExchangeMallRes Clone() {
      return new ActivityExchangeMallRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "user_item" field.</summary>
    public const int UserItemFieldNumber = 3;
    private global::Com.Proto.UserItemPB userItem_;
    /// <summary>
    ///用户道具信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserItemPB UserItem {
      get { return userItem_; }
      set {
        userItem_ = value;
      }
    }

    /// <summary>Field number for the "user_buy_activity_mall" field.</summary>
    public const int UserBuyActivityMallFieldNumber = 4;
    private global::Com.Proto.UserBuyActivityMallPB userBuyActivityMall_;
    /// <summary>
    ///兑换商品信息表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserBuyActivityMallPB UserBuyActivityMall {
      get { return userBuyActivityMall_; }
      set {
        userBuyActivityMall_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityExchangeMallRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityExchangeMallRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (!object.Equals(UserItem, other.UserItem)) return false;
      if (!object.Equals(UserBuyActivityMall, other.UserBuyActivityMall)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (userItem_ != null) hash ^= UserItem.GetHashCode();
      if (userBuyActivityMall_ != null) hash ^= UserBuyActivityMall.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (userItem_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserItem);
      }
      if (userBuyActivityMall_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserBuyActivityMall);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (userItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserItem);
      }
      if (userBuyActivityMall_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBuyActivityMall);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityExchangeMallRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      awards_.Add(other.awards_);
      if (other.userItem_ != null) {
        if (userItem_ == null) {
          userItem_ = new global::Com.Proto.UserItemPB();
        }
        UserItem.MergeFrom(other.UserItem);
      }
      if (other.userBuyActivityMall_ != null) {
        if (userBuyActivityMall_ == null) {
          userBuyActivityMall_ = new global::Com.Proto.UserBuyActivityMallPB();
        }
        UserBuyActivityMall.MergeFrom(other.UserBuyActivityMall);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 26: {
            if (userItem_ == null) {
              userItem_ = new global::Com.Proto.UserItemPB();
            }
            input.ReadMessage(userItem_);
            break;
          }
          case 34: {
            if (userBuyActivityMall_ == null) {
              userBuyActivityMall_ = new global::Com.Proto.UserBuyActivityMallPB();
            }
            input.ReadMessage(userBuyActivityMall_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///观看活动剧情请求包
  /// </summary>
  public sealed partial class WatchActivityPlotReq : pb::IMessage<WatchActivityPlotReq> {
    private static readonly pb::MessageParser<WatchActivityPlotReq> _parser = new pb::MessageParser<WatchActivityPlotReq>(() => new WatchActivityPlotReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchActivityPlotReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchActivityPlotReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchActivityPlotReq(WatchActivityPlotReq other) : this() {
      activityId_ = other.activityId_;
      plotId_ = other.plotId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchActivityPlotReq Clone() {
      return new WatchActivityPlotReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "plot_id" field.</summary>
    public const int PlotIdFieldNumber = 2;
    private string plotId_ = "";
    /// <summary>
    ///剧情id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlotId {
      get { return plotId_; }
      set {
        plotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchActivityPlotReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchActivityPlotReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (PlotId != other.PlotId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (PlotId.Length != 0) hash ^= PlotId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (PlotId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlotId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (PlotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlotId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchActivityPlotReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.PlotId.Length != 0) {
        PlotId = other.PlotId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 18: {
            PlotId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///观看活动剧情回包
  /// </summary>
  public sealed partial class WatchActivityPlotRes : pb::IMessage<WatchActivityPlotRes> {
    private static readonly pb::MessageParser<WatchActivityPlotRes> _parser = new pb::MessageParser<WatchActivityPlotRes>(() => new WatchActivityPlotRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchActivityPlotRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchActivityPlotRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchActivityPlotRes(WatchActivityPlotRes other) : this() {
      ret_ = other.ret_;
      UserActivityPlotInfo = other.userActivityPlotInfo_ != null ? other.UserActivityPlotInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchActivityPlotRes Clone() {
      return new WatchActivityPlotRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_activity_plot_info" field.</summary>
    public const int UserActivityPlotInfoFieldNumber = 2;
    private global::Com.Proto.UserActivityPlotInfoPB userActivityPlotInfo_;
    /// <summary>
    ///活动剧情信息表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserActivityPlotInfoPB UserActivityPlotInfo {
      get { return userActivityPlotInfo_; }
      set {
        userActivityPlotInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchActivityPlotRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchActivityPlotRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserActivityPlotInfo, other.UserActivityPlotInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userActivityPlotInfo_ != null) hash ^= UserActivityPlotInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userActivityPlotInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserActivityPlotInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userActivityPlotInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserActivityPlotInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchActivityPlotRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userActivityPlotInfo_ != null) {
        if (userActivityPlotInfo_ == null) {
          userActivityPlotInfo_ = new global::Com.Proto.UserActivityPlotInfoPB();
        }
        UserActivityPlotInfo.MergeFrom(other.UserActivityPlotInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userActivityPlotInfo_ == null) {
              userActivityPlotInfo_ = new global::Com.Proto.UserActivityPlotInfoPB();
            }
            input.ReadMessage(userActivityPlotInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///挑战扭蛋副本  /activityStencilC/challenge
  /// </summary>
  public sealed partial class ChallengeActivityLevelReq : pb::IMessage<ChallengeActivityLevelReq> {
    private static readonly pb::MessageParser<ChallengeActivityLevelReq> _parser = new pb::MessageParser<ChallengeActivityLevelReq>(() => new ChallengeActivityLevelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeActivityLevelReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeActivityLevelReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeActivityLevelReq(ChallengeActivityLevelReq other) : this() {
      activityId_ = other.activityId_;
      levelId_ = other.levelId_;
      cardIds_ = other.cardIds_.Clone();
      items_ = other.items_.Clone();
      fans_ = other.fans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeActivityLevelReq Clone() {
      return new ChallengeActivityLevelReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "card_ids" field.</summary>
    public const int CardIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForSInt32(26);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private static readonly pbc::MapField<int, int>.Codec _map_items_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 34);
    private readonly pbc::MapField<int, int> items_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 5;
    private static readonly pbc::MapField<int, int>.Codec _map_fans_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 42);
    private readonly pbc::MapField<int, int> fans_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Fans {
      get { return fans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeActivityLevelReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeActivityLevelReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (LevelId != other.LevelId) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (!Items.Equals(other.Items)) return false;
      if (!Fans.Equals(other.Fans)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      hash ^= Items.GetHashCode();
      hash ^= Fans.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LevelId);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      items_.WriteTo(output, _map_items_codec);
      fans_.WriteTo(output, _map_fans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      size += items_.CalculateSize(_map_items_codec);
      size += fans_.CalculateSize(_map_fans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeActivityLevelReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      cardIds_.Add(other.cardIds_);
      items_.Add(other.items_);
      fans_.Add(other.fans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 26:
          case 24: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 34: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
          case 42: {
            fans_.AddEntriesFrom(input, _map_fans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///挑战扭蛋副本  /activityStencilC/challenge
  /// </summary>
  public sealed partial class ChallengeActivityLevelRes : pb::IMessage<ChallengeActivityLevelRes> {
    private static readonly pb::MessageParser<ChallengeActivityLevelRes> _parser = new pb::MessageParser<ChallengeActivityLevelRes>(() => new ChallengeActivityLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeActivityLevelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeActivityLevelRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeActivityLevelRes(ChallengeActivityLevelRes other) : this() {
      ret_ = other.ret_;
      GameResult = other.gameResult_ != null ? other.GameResult.Clone() : null;
      userItem_ = other.userItem_.Clone();
      UserActivityLevelInfo = other.userActivityLevelInfo_ != null ? other.UserActivityLevelInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeActivityLevelRes Clone() {
      return new ChallengeActivityLevelRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "gameResult" field.</summary>
    public const int GameResultFieldNumber = 2;
    private global::Com.Proto.GameResultPB gameResult_;
    /// <summary>
    ///比赛结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.GameResultPB GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    /// <summary>Field number for the "user_Item" field.</summary>
    public const int UserItemFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItem_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItem_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    /// <summary>
    ///道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItem {
      get { return userItem_; }
    }

    /// <summary>Field number for the "user_activity_level_info" field.</summary>
    public const int UserActivityLevelInfoFieldNumber = 4;
    private global::Com.Proto.UserActivityLevelInfoPB userActivityLevelInfo_;
    /// <summary>
    ///玩家活动副本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserActivityLevelInfoPB UserActivityLevelInfo {
      get { return userActivityLevelInfo_; }
      set {
        userActivityLevelInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeActivityLevelRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeActivityLevelRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(GameResult, other.GameResult)) return false;
      if(!userItem_.Equals(other.userItem_)) return false;
      if (!object.Equals(UserActivityLevelInfo, other.UserActivityLevelInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (gameResult_ != null) hash ^= GameResult.GetHashCode();
      hash ^= userItem_.GetHashCode();
      if (userActivityLevelInfo_ != null) hash ^= UserActivityLevelInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (gameResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameResult);
      }
      userItem_.WriteTo(output, _repeated_userItem_codec);
      if (userActivityLevelInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserActivityLevelInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      size += userItem_.CalculateSize(_repeated_userItem_codec);
      if (userActivityLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserActivityLevelInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeActivityLevelRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.gameResult_ != null) {
        if (gameResult_ == null) {
          gameResult_ = new global::Com.Proto.GameResultPB();
        }
        GameResult.MergeFrom(other.GameResult);
      }
      userItem_.Add(other.userItem_);
      if (other.userActivityLevelInfo_ != null) {
        if (userActivityLevelInfo_ == null) {
          userActivityLevelInfo_ = new global::Com.Proto.UserActivityLevelInfoPB();
        }
        UserActivityLevelInfo.MergeFrom(other.UserActivityLevelInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (gameResult_ == null) {
              gameResult_ = new global::Com.Proto.GameResultPB();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 26: {
            userItem_.AddEntriesFrom(input, _repeated_userItem_codec);
            break;
          }
          case 34: {
            if (userActivityLevelInfo_ == null) {
              userActivityLevelInfo_ = new global::Com.Proto.UserActivityLevelInfoPB();
            }
            input.ReadMessage(userActivityLevelInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///扫荡   activityCapsuleC/sweep
  /// </summary>
  public sealed partial class ActivityLevelSweepReq : pb::IMessage<ActivityLevelSweepReq> {
    private static readonly pb::MessageParser<ActivityLevelSweepReq> _parser = new pb::MessageParser<ActivityLevelSweepReq>(() => new ActivityLevelSweepReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityLevelSweepReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityLevelSweepReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityLevelSweepReq(ActivityLevelSweepReq other) : this() {
      activityId_ = other.activityId_;
      levelId_ = other.levelId_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityLevelSweepReq Clone() {
      return new ActivityLevelSweepReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    ///扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityLevelSweepReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityLevelSweepReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (LevelId != other.LevelId) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LevelId);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityLevelSweepReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 24: {
            Num = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///扫荡   activityCapsuleC/sweep
  /// </summary>
  public sealed partial class ActivityLevelSweepRes : pb::IMessage<ActivityLevelSweepRes> {
    private static readonly pb::MessageParser<ActivityLevelSweepRes> _parser = new pb::MessageParser<ActivityLevelSweepRes>(() => new ActivityLevelSweepRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityLevelSweepRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityLevelSweepRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityLevelSweepRes(ActivityLevelSweepRes other) : this() {
      ret_ = other.ret_;
      gameResult_ = other.gameResult_.Clone();
      UserActivityLevelInfo = other.userActivityLevelInfo_ != null ? other.UserActivityLevelInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityLevelSweepRes Clone() {
      return new ActivityLevelSweepRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "gameResult" field.</summary>
    public const int GameResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.GameResultPB> _repeated_gameResult_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.GameResultPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameResultPB> gameResult_ = new pbc::RepeatedField<global::Com.Proto.GameResultPB>();
    /// <summary>
    ///比赛结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameResultPB> GameResult {
      get { return gameResult_; }
    }

    /// <summary>Field number for the "user_activity_level_info" field.</summary>
    public const int UserActivityLevelInfoFieldNumber = 3;
    private global::Com.Proto.UserActivityLevelInfoPB userActivityLevelInfo_;
    /// <summary>
    ///关卡数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserActivityLevelInfoPB UserActivityLevelInfo {
      get { return userActivityLevelInfo_; }
      set {
        userActivityLevelInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityLevelSweepRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityLevelSweepRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!gameResult_.Equals(other.gameResult_)) return false;
      if (!object.Equals(UserActivityLevelInfo, other.UserActivityLevelInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= gameResult_.GetHashCode();
      if (userActivityLevelInfo_ != null) hash ^= UserActivityLevelInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      gameResult_.WriteTo(output, _repeated_gameResult_codec);
      if (userActivityLevelInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserActivityLevelInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += gameResult_.CalculateSize(_repeated_gameResult_codec);
      if (userActivityLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserActivityLevelInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityLevelSweepRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      gameResult_.Add(other.gameResult_);
      if (other.userActivityLevelInfo_ != null) {
        if (userActivityLevelInfo_ == null) {
          userActivityLevelInfo_ = new global::Com.Proto.UserActivityLevelInfoPB();
        }
        UserActivityLevelInfo.MergeFrom(other.UserActivityLevelInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            gameResult_.AddEntriesFrom(input, _repeated_gameResult_codec);
            break;
          }
          case 26: {
            if (userActivityLevelInfo_ == null) {
              userActivityLevelInfo_ = new global::Com.Proto.UserActivityLevelInfoPB();
            }
            input.ReadMessage(userActivityLevelInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买关卡次数   /activityStencilC/buyCount
  /// </summary>
  public sealed partial class BuyActivityLevelCountReq : pb::IMessage<BuyActivityLevelCountReq> {
    private static readonly pb::MessageParser<BuyActivityLevelCountReq> _parser = new pb::MessageParser<BuyActivityLevelCountReq>(() => new BuyActivityLevelCountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyActivityLevelCountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyActivityLevelCountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyActivityLevelCountReq(BuyActivityLevelCountReq other) : this() {
      activityId_ = other.activityId_;
      levelId_ = other.levelId_;
      buyCount_ = other.buyCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyActivityLevelCountReq Clone() {
      return new BuyActivityLevelCountReq(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    /// <summary>
    ///副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "buy_count" field.</summary>
    public const int BuyCountFieldNumber = 3;
    private int buyCount_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyActivityLevelCountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyActivityLevelCountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (LevelId != other.LevelId) return false;
      if (BuyCount != other.BuyCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (BuyCount != 0) hash ^= BuyCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LevelId);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(BuyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BuyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyActivityLevelCountReq other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.BuyCount != 0) {
        BuyCount = other.BuyCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 24: {
            BuyCount = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买关卡次数   /activityStencilC/buyCount
  /// </summary>
  public sealed partial class BuyActivityLevelCountRes : pb::IMessage<BuyActivityLevelCountRes> {
    private static readonly pb::MessageParser<BuyActivityLevelCountRes> _parser = new pb::MessageParser<BuyActivityLevelCountRes>(() => new BuyActivityLevelCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyActivityLevelCountRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerActivityStencilReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyActivityLevelCountRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyActivityLevelCountRes(BuyActivityLevelCountRes other) : this() {
      ret_ = other.ret_;
      UserActivityLevelInfo = other.userActivityLevelInfo_ != null ? other.UserActivityLevelInfo.Clone() : null;
      UserMoneyPB = other.userMoneyPB_ != null ? other.UserMoneyPB.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyActivityLevelCountRes Clone() {
      return new BuyActivityLevelCountRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_activity_level_info" field.</summary>
    public const int UserActivityLevelInfoFieldNumber = 2;
    private global::Com.Proto.UserActivityLevelInfoPB userActivityLevelInfo_;
    /// <summary>
    ///玩家活动副本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserActivityLevelInfoPB UserActivityLevelInfo {
      get { return userActivityLevelInfo_; }
      set {
        userActivityLevelInfo_ = value;
      }
    }

    /// <summary>Field number for the "user_money_PB" field.</summary>
    public const int UserMoneyPBFieldNumber = 3;
    private global::Com.Proto.UserMoneyPB userMoneyPB_;
    /// <summary>
    ///资源信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoneyPB {
      get { return userMoneyPB_; }
      set {
        userMoneyPB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyActivityLevelCountRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyActivityLevelCountRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserActivityLevelInfo, other.UserActivityLevelInfo)) return false;
      if (!object.Equals(UserMoneyPB, other.UserMoneyPB)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userActivityLevelInfo_ != null) hash ^= UserActivityLevelInfo.GetHashCode();
      if (userMoneyPB_ != null) hash ^= UserMoneyPB.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userActivityLevelInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserActivityLevelInfo);
      }
      if (userMoneyPB_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserMoneyPB);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userActivityLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserActivityLevelInfo);
      }
      if (userMoneyPB_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoneyPB);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyActivityLevelCountRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userActivityLevelInfo_ != null) {
        if (userActivityLevelInfo_ == null) {
          userActivityLevelInfo_ = new global::Com.Proto.UserActivityLevelInfoPB();
        }
        UserActivityLevelInfo.MergeFrom(other.UserActivityLevelInfo);
      }
      if (other.userMoneyPB_ != null) {
        if (userMoneyPB_ == null) {
          userMoneyPB_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoneyPB.MergeFrom(other.UserMoneyPB);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userActivityLevelInfo_ == null) {
              userActivityLevelInfo_ = new global::Com.Proto.UserActivityLevelInfoPB();
            }
            input.ReadMessage(userActivityLevelInfo_);
            break;
          }
          case 26: {
            if (userMoneyPB_ == null) {
              userMoneyPB_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoneyPB_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
