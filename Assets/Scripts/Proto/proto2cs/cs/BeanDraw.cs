// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_draw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_draw.proto</summary>
  public static partial class BeanDrawReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_draw.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanDrawReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9iZWFuX2RyYXcucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90byKLAQoK",
            "RHJhd1Byb2JQQhInCg5kcmF3X3Bvb2xfdHlwZRgBIAEoDjIPLkRyYXdQb29s",
            "VHlwZVBCEiAKCmRyYXdfZXZlbnQYAiABKA4yDC5EcmF3RXZlbnRQQhIdCghy",
            "ZXNvdXJjZRgDIAEoDjILLlJlc291cmNlUEISEwoLcmVzb3VyY2VfaWQYBCAB",
            "KBFCMQofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIORHJhd1By",
            "b2JQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawProbPB), global::Com.Proto.DrawProbPB.Parser, new[]{ "DrawPoolType", "DrawEvent", "Resource", "ResourceId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DrawProbPB : pb::IMessage<DrawProbPB> {
    private static readonly pb::MessageParser<DrawProbPB> _parser = new pb::MessageParser<DrawProbPB>(() => new DrawProbPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawProbPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanDrawReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbPB(DrawProbPB other) : this() {
      drawPoolType_ = other.drawPoolType_;
      drawEvent_ = other.drawEvent_;
      resource_ = other.resource_;
      resourceId_ = other.resourceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbPB Clone() {
      return new DrawProbPB(this);
    }

    /// <summary>Field number for the "draw_pool_type" field.</summary>
    public const int DrawPoolTypeFieldNumber = 1;
    private global::DrawPoolTypePB drawPoolType_ = 0;
    /// <summary>
    ///星盘类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DrawPoolTypePB DrawPoolType {
      get { return drawPoolType_; }
      set {
        drawPoolType_ = value;
      }
    }

    /// <summary>Field number for the "draw_event" field.</summary>
    public const int DrawEventFieldNumber = 2;
    private global::DrawEventPB drawEvent_ = 0;
    /// <summary>
    ///抽卡事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DrawEventPB DrawEvent {
      get { return drawEvent_; }
      set {
        drawEvent_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private global::ResourcePB resource_ = 0;
    /// <summary>
    ///资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ResourcePB Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "resource_id" field.</summary>
    public const int ResourceIdFieldNumber = 4;
    private int resourceId_;
    /// <summary>
    ///资源id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResourceId {
      get { return resourceId_; }
      set {
        resourceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawProbPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawProbPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawPoolType != other.DrawPoolType) return false;
      if (DrawEvent != other.DrawEvent) return false;
      if (Resource != other.Resource) return false;
      if (ResourceId != other.ResourceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrawPoolType != 0) hash ^= DrawPoolType.GetHashCode();
      if (DrawEvent != 0) hash ^= DrawEvent.GetHashCode();
      if (Resource != 0) hash ^= Resource.GetHashCode();
      if (ResourceId != 0) hash ^= ResourceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawPoolType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DrawPoolType);
      }
      if (DrawEvent != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DrawEvent);
      }
      if (Resource != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Resource);
      }
      if (ResourceId != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(ResourceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawPoolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawPoolType);
      }
      if (DrawEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawEvent);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Resource);
      }
      if (ResourceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResourceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawProbPB other) {
      if (other == null) {
        return;
      }
      if (other.DrawPoolType != 0) {
        DrawPoolType = other.DrawPoolType;
      }
      if (other.DrawEvent != 0) {
        DrawEvent = other.DrawEvent;
      }
      if (other.Resource != 0) {
        Resource = other.Resource;
      }
      if (other.ResourceId != 0) {
        ResourceId = other.ResourceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            drawPoolType_ = (global::DrawPoolTypePB) input.ReadEnum();
            break;
          }
          case 16: {
            drawEvent_ = (global::DrawEventPB) input.ReadEnum();
            break;
          }
          case 24: {
            resource_ = (global::ResourcePB) input.ReadEnum();
            break;
          }
          case 32: {
            ResourceId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
