// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_draw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_draw.proto</summary>
  public static partial class ControllerDrawReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_draw.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerDrawReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVjb250cm9sbGVyX2RyYXcucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90",
            "bxoVYmVhbl91c2VyX21vbmV5LnByb3RvGhBiZWFuX2F3YXJkLnByb3RvGg9i",
            "ZWFuX2RyYXcucHJvdG8aFGJlYW5fdXNlcl9kcmF3LnByb3RvGhliZWFuX3Vz",
            "ZXJfZHJhd19pbmZvLnByb3RvGhRiZWFuX3VzZXJfaXRlbS5wcm90byJSCgdE",
            "cmF3UmVxEicKDmRyYXdfcG9vbF90eXBlGAEgASgOMg8uRHJhd1Bvb2xUeXBl",
            "UEISHgoJZHJhd190eXBlGAIgASgOMgsuRHJhd1R5cGVQQiLtAQoHRHJhd1Jl",
            "cxILCgNyZXQYASABKBESKgoKdXNlcl9tb25leRgCIAEoCzIWLmNvbS5wcm90",
            "by5Vc2VyTW9uZXlQQhIoCgl1c2VyX2RyYXcYAyABKAsyFS5jb20ucHJvdG8u",
            "VXNlckRyYXdQQhIiCgZhd2FyZHMYBCADKAsyEi5jb20ucHJvdG8uQXdhcmRQ",
            "QhIxCg51c2VyX2RyYXdfaW5mbxgFIAEoCzIZLmNvbS5wcm90by5Vc2VyRHJh",
            "d0luZm9QQhIoCgl1c2VyX2l0ZW0YBiABKAsyFS5jb20ucHJvdG8uVXNlckl0",
            "ZW1QQiINCgtEcmF3UHJvYlJlcSJFCgtEcmF3UHJvYlJlcxILCgNyZXQYASAB",
            "KBESKQoKZHJhd19wcm9icxgCIAMoCzIVLmNvbS5wcm90by5EcmF3UHJvYlBC",
            "IncKC0RyYXdJbmZvUmVzEgsKA3JldBgBIAEoERIoCgl1c2VyX2RyYXcYAiAD",
            "KAsyFS5jb20ucHJvdG8uVXNlckRyYXdQQhIxCg51c2VyX2RyYXdfaW5mbxgD",
            "IAEoCzIZLmNvbS5wcm90by5Vc2VyRHJhd0luZm9QQkI3Ch9uZXQuZ2FsYXNw",
            "b3J0cy5iaWdzdGFyLnByb3RvY29sQhREcmF3Q29udHJvbGxlclByb3Rvc2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanDrawReflection.Descriptor, global::Com.Proto.BeanUserDrawReflection.Descriptor, global::Com.Proto.BeanUserDrawInfoReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawReq), global::Com.Proto.DrawReq.Parser, new[]{ "DrawPoolType", "DrawType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawRes), global::Com.Proto.DrawRes.Parser, new[]{ "Ret", "UserMoney", "UserDraw", "Awards", "UserDrawInfo", "UserItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawProbReq), global::Com.Proto.DrawProbReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawProbRes), global::Com.Proto.DrawProbRes.Parser, new[]{ "Ret", "DrawProbs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.DrawInfoRes), global::Com.Proto.DrawInfoRes.Parser, new[]{ "Ret", "UserDraw", "UserDrawInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DrawReq : pb::IMessage<DrawReq> {
    private static readonly pb::MessageParser<DrawReq> _parser = new pb::MessageParser<DrawReq>(() => new DrawReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDrawReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawReq(DrawReq other) : this() {
      drawPoolType_ = other.drawPoolType_;
      drawType_ = other.drawType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawReq Clone() {
      return new DrawReq(this);
    }

    /// <summary>Field number for the "draw_pool_type" field.</summary>
    public const int DrawPoolTypeFieldNumber = 1;
    private global::DrawPoolTypePB drawPoolType_ = 0;
    /// <summary>
    ///选择星盘type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DrawPoolTypePB DrawPoolType {
      get { return drawPoolType_; }
      set {
        drawPoolType_ = value;
      }
    }

    /// <summary>Field number for the "draw_type" field.</summary>
    public const int DrawTypeFieldNumber = 2;
    private global::DrawTypePB drawType_ = 0;
    /// <summary>
    ///抽卡类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DrawTypePB DrawType {
      get { return drawType_; }
      set {
        drawType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawPoolType != other.DrawPoolType) return false;
      if (DrawType != other.DrawType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrawPoolType != 0) hash ^= DrawPoolType.GetHashCode();
      if (DrawType != 0) hash ^= DrawType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawPoolType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DrawPoolType);
      }
      if (DrawType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DrawType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawPoolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawPoolType);
      }
      if (DrawType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawReq other) {
      if (other == null) {
        return;
      }
      if (other.DrawPoolType != 0) {
        DrawPoolType = other.DrawPoolType;
      }
      if (other.DrawType != 0) {
        DrawType = other.DrawType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            drawPoolType_ = (global::DrawPoolTypePB) input.ReadEnum();
            break;
          }
          case 16: {
            drawType_ = (global::DrawTypePB) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawRes : pb::IMessage<DrawRes> {
    private static readonly pb::MessageParser<DrawRes> _parser = new pb::MessageParser<DrawRes>(() => new DrawRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDrawReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawRes(DrawRes other) : this() {
      ret_ = other.ret_;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
      UserDraw = other.userDraw_ != null ? other.UserDraw.Clone() : null;
      awards_ = other.awards_.Clone();
      UserDrawInfo = other.userDrawInfo_ != null ? other.UserDrawInfo.Clone() : null;
      UserItem = other.userItem_ != null ? other.UserItem.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawRes Clone() {
      return new DrawRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 2;
    private global::Com.Proto.UserMoneyPB userMoney_;
    /// <summary>
    ///用户金钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "user_draw" field.</summary>
    public const int UserDrawFieldNumber = 3;
    private global::Com.Proto.UserDrawPB userDraw_;
    /// <summary>
    ///用户抽奖信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserDrawPB UserDraw {
      get { return userDraw_; }
      set {
        userDraw_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///用户奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "user_draw_info" field.</summary>
    public const int UserDrawInfoFieldNumber = 5;
    private global::Com.Proto.UserDrawInfoPB userDrawInfo_;
    /// <summary>
    ///用户抽奖上限信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserDrawInfoPB UserDrawInfo {
      get { return userDrawInfo_; }
      set {
        userDrawInfo_ = value;
      }
    }

    /// <summary>Field number for the "user_item" field.</summary>
    public const int UserItemFieldNumber = 6;
    private global::Com.Proto.UserItemPB userItem_;
    /// <summary>
    ///用户道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserItemPB UserItem {
      get { return userItem_; }
      set {
        userItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      if (!object.Equals(UserDraw, other.UserDraw)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (!object.Equals(UserDrawInfo, other.UserDrawInfo)) return false;
      if (!object.Equals(UserItem, other.UserItem)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      if (userDraw_ != null) hash ^= UserDraw.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (userDrawInfo_ != null) hash ^= UserDrawInfo.GetHashCode();
      if (userItem_ != null) hash ^= UserItem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserMoney);
      }
      if (userDraw_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserDraw);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (userDrawInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserDrawInfo);
      }
      if (userItem_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UserItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      if (userDraw_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDraw);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (userDrawInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDrawInfo);
      }
      if (userItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserItem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
      if (other.userDraw_ != null) {
        if (userDraw_ == null) {
          userDraw_ = new global::Com.Proto.UserDrawPB();
        }
        UserDraw.MergeFrom(other.UserDraw);
      }
      awards_.Add(other.awards_);
      if (other.userDrawInfo_ != null) {
        if (userDrawInfo_ == null) {
          userDrawInfo_ = new global::Com.Proto.UserDrawInfoPB();
        }
        UserDrawInfo.MergeFrom(other.UserDrawInfo);
      }
      if (other.userItem_ != null) {
        if (userItem_ == null) {
          userItem_ = new global::Com.Proto.UserItemPB();
        }
        UserItem.MergeFrom(other.UserItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
          case 26: {
            if (userDraw_ == null) {
              userDraw_ = new global::Com.Proto.UserDrawPB();
            }
            input.ReadMessage(userDraw_);
            break;
          }
          case 34: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 42: {
            if (userDrawInfo_ == null) {
              userDrawInfo_ = new global::Com.Proto.UserDrawInfoPB();
            }
            input.ReadMessage(userDrawInfo_);
            break;
          }
          case 50: {
            if (userItem_ == null) {
              userItem_ = new global::Com.Proto.UserItemPB();
            }
            input.ReadMessage(userItem_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawProbReq : pb::IMessage<DrawProbReq> {
    private static readonly pb::MessageParser<DrawProbReq> _parser = new pb::MessageParser<DrawProbReq>(() => new DrawProbReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawProbReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDrawReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbReq(DrawProbReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbReq Clone() {
      return new DrawProbReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawProbReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawProbReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawProbReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DrawProbRes : pb::IMessage<DrawProbRes> {
    private static readonly pb::MessageParser<DrawProbRes> _parser = new pb::MessageParser<DrawProbRes>(() => new DrawProbRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawProbRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDrawReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbRes(DrawProbRes other) : this() {
      ret_ = other.ret_;
      drawProbs_ = other.drawProbs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawProbRes Clone() {
      return new DrawProbRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "draw_probs" field.</summary>
    public const int DrawProbsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.DrawProbPB> _repeated_drawProbs_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.DrawProbPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.DrawProbPB> drawProbs_ = new pbc::RepeatedField<global::Com.Proto.DrawProbPB>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.DrawProbPB> DrawProbs {
      get { return drawProbs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawProbRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawProbRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!drawProbs_.Equals(other.drawProbs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= drawProbs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      drawProbs_.WriteTo(output, _repeated_drawProbs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += drawProbs_.CalculateSize(_repeated_drawProbs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawProbRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      drawProbs_.Add(other.drawProbs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            drawProbs_.AddEntriesFrom(input, _repeated_drawProbs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawInfoRes : pb::IMessage<DrawInfoRes> {
    private static readonly pb::MessageParser<DrawInfoRes> _parser = new pb::MessageParser<DrawInfoRes>(() => new DrawInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawInfoRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerDrawReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawInfoRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawInfoRes(DrawInfoRes other) : this() {
      ret_ = other.ret_;
      userDraw_ = other.userDraw_.Clone();
      UserDrawInfo = other.userDrawInfo_ != null ? other.UserDrawInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawInfoRes Clone() {
      return new DrawInfoRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_draw" field.</summary>
    public const int UserDrawFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserDrawPB> _repeated_userDraw_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserDrawPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserDrawPB> userDraw_ = new pbc::RepeatedField<global::Com.Proto.UserDrawPB>();
    /// <summary>
    ///用户抽奖信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserDrawPB> UserDraw {
      get { return userDraw_; }
    }

    /// <summary>Field number for the "user_draw_info" field.</summary>
    public const int UserDrawInfoFieldNumber = 3;
    private global::Com.Proto.UserDrawInfoPB userDrawInfo_;
    /// <summary>
    ///用户抽奖上限信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserDrawInfoPB UserDrawInfo {
      get { return userDrawInfo_; }
      set {
        userDrawInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawInfoRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawInfoRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userDraw_.Equals(other.userDraw_)) return false;
      if (!object.Equals(UserDrawInfo, other.UserDrawInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userDraw_.GetHashCode();
      if (userDrawInfo_ != null) hash ^= UserDrawInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userDraw_.WriteTo(output, _repeated_userDraw_codec);
      if (userDrawInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserDrawInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userDraw_.CalculateSize(_repeated_userDraw_codec);
      if (userDrawInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDrawInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawInfoRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userDraw_.Add(other.userDraw_);
      if (other.userDrawInfo_ != null) {
        if (userDrawInfo_ == null) {
          userDrawInfo_ = new global::Com.Proto.UserDrawInfoPB();
        }
        UserDrawInfo.MergeFrom(other.UserDrawInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userDraw_.AddEntriesFrom(input, _repeated_userDraw_codec);
            break;
          }
          case 26: {
            if (userDrawInfo_ == null) {
              userDrawInfo_ = new global::Com.Proto.UserDrawInfoPB();
            }
            input.ReadMessage(userDrawInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
