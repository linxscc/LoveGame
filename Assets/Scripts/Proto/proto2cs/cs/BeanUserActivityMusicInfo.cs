// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_user_activity_music_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_user_activity_music_info.proto</summary>
  public static partial class BeanUserActivityMusicInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_user_activity_music_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanUserActivityMusicInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNiZWFuX3VzZXJfYWN0aXZpdHlfbXVzaWNfaW5mby5wcm90bxIJY29tLnBy",
            "b3RvGgpiYXNlLnByb3RvGhBiZWFuX2F3YXJkLnByb3RvIo0BChdVc2VyQWN0",
            "aXZpdHlNdXNpY0luZm9QQhIPCgd1c2VyX2lkGAEgASgREhMKC2FjdGl2aXR5",
            "X2lkGAIgASgREhAKCG11c2ljX2lkGAMgASgREicKCWRpZmZfdHlwZRgEIAEo",
            "DjIULk11c2ljR2FtZURpZmZUeXBlUEISEQoJbWF4X3Njb3JlGAUgASgRQj4K",
            "H25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9jb2xCG1VzZXJBY3Rpdml0",
            "eU11c2ljSW5mb1Byb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserActivityMusicInfoPB), global::Com.Proto.UserActivityMusicInfoPB.Parser, new[]{ "UserId", "ActivityId", "MusicId", "DiffType", "MaxScore" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///UserActivityMusicInfoPB UserActivityMusicInfo
  /// </summary>
  public sealed partial class UserActivityMusicInfoPB : pb::IMessage<UserActivityMusicInfoPB> {
    private static readonly pb::MessageParser<UserActivityMusicInfoPB> _parser = new pb::MessageParser<UserActivityMusicInfoPB>(() => new UserActivityMusicInfoPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivityMusicInfoPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserActivityMusicInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityMusicInfoPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityMusicInfoPB(UserActivityMusicInfoPB other) : this() {
      userId_ = other.userId_;
      activityId_ = other.activityId_;
      musicId_ = other.musicId_;
      diffType_ = other.diffType_;
      maxScore_ = other.maxScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivityMusicInfoPB Clone() {
      return new UserActivityMusicInfoPB(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private int activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "music_id" field.</summary>
    public const int MusicIdFieldNumber = 3;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    /// <summary>Field number for the "diff_type" field.</summary>
    public const int DiffTypeFieldNumber = 4;
    private global::MusicGameDiffTypePB diffType_ = 0;
    /// <summary>
    ///难度类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MusicGameDiffTypePB DiffType {
      get { return diffType_; }
      set {
        diffType_ = value;
      }
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 5;
    private int maxScore_;
    /// <summary>
    ///最大分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivityMusicInfoPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivityMusicInfoPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ActivityId != other.ActivityId) return false;
      if (MusicId != other.MusicId) return false;
      if (DiffType != other.DiffType) return false;
      if (MaxScore != other.MaxScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      if (DiffType != 0) hash ^= DiffType.GetHashCode();
      if (MaxScore != 0) hash ^= MaxScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserId);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ActivityId);
      }
      if (MusicId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(MusicId);
      }
      if (DiffType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DiffType);
      }
      if (MaxScore != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(MaxScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserId);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      if (DiffType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiffType);
      }
      if (MaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MaxScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivityMusicInfoPB other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
      if (other.DiffType != 0) {
        DiffType = other.DiffType;
      }
      if (other.MaxScore != 0) {
        MaxScore = other.MaxScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 24: {
            MusicId = input.ReadSInt32();
            break;
          }
          case 32: {
            diffType_ = (global::MusicGameDiffTypePB) input.ReadEnum();
            break;
          }
          case 40: {
            MaxScore = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
