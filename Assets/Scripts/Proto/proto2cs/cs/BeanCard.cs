// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_card.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_card.proto</summary>
  public static partial class BeanCardReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_card.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanCardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9iZWFuX2NhcmQucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90byLvAwoG",
            "Q2FyZFBCEg8KB2NhcmRfaWQYASABKBESGQoGcGxheWVyGAIgASgOMgkuUGxh",
            "eWVyUEISGQoGY3JlZGl0GAMgASgOMgkuQ3JlZGl0UEISDwoHc2luZ2luZxgE",
            "IAEoERIPCgdkYW5jaW5nGAUgASgREhEKCWNvbXBvc2luZxgGIAEoERISCgpw",
            "b3B1bGFyaXR5GAcgASgREg0KBWNoYXJtGAggASgREhQKDHBlcnNldmVyYW5j",
            "ZRgJIAEoERIOCgZwdXp6bGUYCiABKBESEQoJY2FyZF9uYW1lGAsgASgJEgwK",
            "BGdvbGQYDCABKBESFQoNZ3Jvd3RoX3JhdGVfcxgNIAEoAhIVCg1ncm93dGhf",
            "cmF0ZV9kGA4gASgCEhUKDWdyb3d0aF9yYXRlX2MYDyABKAISFgoOZ3Jvd3Ro",
            "X3JhdGVfcG8YECABKAISFgoOZ3Jvd3RoX3JhdGVfY2gYESABKAISFgoOZ3Jv",
            "d3RoX3JhdGVfcGUYEiABKAISFAoMZ2FpblNjZW5lSWRzGBMgAygREhMKC2V2",
            "b1NjZW5lSWRzGBQgAygREiIKDG5ld192aWV3X2V2bxgVIAEoDjIMLkV2b2x1",
            "dGlvblBCEhUKDW1lbW9yaWVzX2l0ZW0YFiABKBESDAoEdXNlZBgXIAEoEUIt",
            "Ch9uZXQuZ2FsYXNwb3J0cy5iaWdzdGFyLnByb3RvY29sQgpDYXJkUHJvdG9z",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CardPB), global::Com.Proto.CardPB.Parser, new[]{ "CardId", "Player", "Credit", "Singing", "Dancing", "Composing", "Popularity", "Charm", "Perseverance", "Puzzle", "CardName", "Gold", "GrowthRateS", "GrowthRateD", "GrowthRateC", "GrowthRatePo", "GrowthRateCh", "GrowthRatePe", "GainSceneIds", "EvoSceneIds", "NewViewEvo", "MemoriesItem", "Used" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///CardPB Card
  /// </summary>
  public sealed partial class CardPB : pb::IMessage<CardPB> {
    private static readonly pb::MessageParser<CardPB> _parser = new pb::MessageParser<CardPB>(() => new CardPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanCardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardPB(CardPB other) : this() {
      cardId_ = other.cardId_;
      player_ = other.player_;
      credit_ = other.credit_;
      singing_ = other.singing_;
      dancing_ = other.dancing_;
      composing_ = other.composing_;
      popularity_ = other.popularity_;
      charm_ = other.charm_;
      perseverance_ = other.perseverance_;
      puzzle_ = other.puzzle_;
      cardName_ = other.cardName_;
      gold_ = other.gold_;
      growthRateS_ = other.growthRateS_;
      growthRateD_ = other.growthRateD_;
      growthRateC_ = other.growthRateC_;
      growthRatePo_ = other.growthRatePo_;
      growthRateCh_ = other.growthRateCh_;
      growthRatePe_ = other.growthRatePe_;
      gainSceneIds_ = other.gainSceneIds_.Clone();
      evoSceneIds_ = other.evoSceneIds_.Clone();
      newViewEvo_ = other.newViewEvo_;
      memoriesItem_ = other.memoriesItem_;
      used_ = other.used_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardPB Clone() {
      return new CardPB(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::PlayerPB player_ = 0;
    /// <summary>
    ///角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "credit" field.</summary>
    public const int CreditFieldNumber = 3;
    private global::CreditPB credit_ = 0;
    /// <summary>
    ///评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CreditPB Credit {
      get { return credit_; }
      set {
        credit_ = value;
      }
    }

    /// <summary>Field number for the "singing" field.</summary>
    public const int SingingFieldNumber = 4;
    private int singing_;
    /// <summary>
    ///singing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Singing {
      get { return singing_; }
      set {
        singing_ = value;
      }
    }

    /// <summary>Field number for the "dancing" field.</summary>
    public const int DancingFieldNumber = 5;
    private int dancing_;
    /// <summary>
    ///dancing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dancing {
      get { return dancing_; }
      set {
        dancing_ = value;
      }
    }

    /// <summary>Field number for the "composing" field.</summary>
    public const int ComposingFieldNumber = 6;
    private int composing_;
    /// <summary>
    ///composing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Composing {
      get { return composing_; }
      set {
        composing_ = value;
      }
    }

    /// <summary>Field number for the "popularity" field.</summary>
    public const int PopularityFieldNumber = 7;
    private int popularity_;
    /// <summary>
    ///popularity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Popularity {
      get { return popularity_; }
      set {
        popularity_ = value;
      }
    }

    /// <summary>Field number for the "charm" field.</summary>
    public const int CharmFieldNumber = 8;
    private int charm_;
    /// <summary>
    ///charm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Charm {
      get { return charm_; }
      set {
        charm_ = value;
      }
    }

    /// <summary>Field number for the "perseverance" field.</summary>
    public const int PerseveranceFieldNumber = 9;
    private int perseverance_;
    /// <summary>
    ///perseverance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Perseverance {
      get { return perseverance_; }
      set {
        perseverance_ = value;
      }
    }

    /// <summary>Field number for the "puzzle" field.</summary>
    public const int PuzzleFieldNumber = 10;
    private int puzzle_;
    /// <summary>
    ///合成需要的碎片数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Puzzle {
      get { return puzzle_; }
      set {
        puzzle_ = value;
      }
    }

    /// <summary>Field number for the "card_name" field.</summary>
    public const int CardNameFieldNumber = 11;
    private string cardName_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardName {
      get { return cardName_; }
      set {
        cardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 12;
    private int gold_;
    /// <summary>
    ///合成需要的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "growth_rate_s" field.</summary>
    public const int GrowthRateSFieldNumber = 13;
    private float growthRateS_;
    /// <summary>
    ///singing rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthRateS {
      get { return growthRateS_; }
      set {
        growthRateS_ = value;
      }
    }

    /// <summary>Field number for the "growth_rate_d" field.</summary>
    public const int GrowthRateDFieldNumber = 14;
    private float growthRateD_;
    /// <summary>
    ///dancing rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthRateD {
      get { return growthRateD_; }
      set {
        growthRateD_ = value;
      }
    }

    /// <summary>Field number for the "growth_rate_c" field.</summary>
    public const int GrowthRateCFieldNumber = 15;
    private float growthRateC_;
    /// <summary>
    ///singing rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthRateC {
      get { return growthRateC_; }
      set {
        growthRateC_ = value;
      }
    }

    /// <summary>Field number for the "growth_rate_po" field.</summary>
    public const int GrowthRatePoFieldNumber = 16;
    private float growthRatePo_;
    /// <summary>
    ///popularity rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthRatePo {
      get { return growthRatePo_; }
      set {
        growthRatePo_ = value;
      }
    }

    /// <summary>Field number for the "growth_rate_ch" field.</summary>
    public const int GrowthRateChFieldNumber = 17;
    private float growthRateCh_;
    /// <summary>
    ///charm rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthRateCh {
      get { return growthRateCh_; }
      set {
        growthRateCh_ = value;
      }
    }

    /// <summary>Field number for the "growth_rate_pe" field.</summary>
    public const int GrowthRatePeFieldNumber = 18;
    private float growthRatePe_;
    /// <summary>
    ///perseverance rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthRatePe {
      get { return growthRatePe_; }
      set {
        growthRatePe_ = value;
      }
    }

    /// <summary>Field number for the "gainSceneIds" field.</summary>
    public const int GainSceneIdsFieldNumber = 19;
    private static readonly pb::FieldCodec<int> _repeated_gainSceneIds_codec
        = pb::FieldCodec.ForSInt32(154);
    private readonly pbc::RepeatedField<int> gainSceneIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///卡牌获得时触发的手机情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GainSceneIds {
      get { return gainSceneIds_; }
    }

    /// <summary>Field number for the "evoSceneIds" field.</summary>
    public const int EvoSceneIdsFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_evoSceneIds_codec
        = pb::FieldCodec.ForSInt32(162);
    private readonly pbc::RepeatedField<int> evoSceneIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///卡片进化时触发的手机情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EvoSceneIds {
      get { return evoSceneIds_; }
    }

    /// <summary>Field number for the "new_view_evo" field.</summary>
    public const int NewViewEvoFieldNumber = 21;
    private global::EvolutionPB newViewEvo_ = 0;
    /// <summary>
    ///解锁新卡面的进化等级，0代表没有新卡面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EvolutionPB NewViewEvo {
      get { return newViewEvo_; }
      set {
        newViewEvo_ = value;
      }
    }

    /// <summary>Field number for the "memories_item" field.</summary>
    public const int MemoriesItemFieldNumber = 22;
    private int memoriesItem_;
    /// <summary>
    ///回忆掉落道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemoriesItem {
      get { return memoriesItem_; }
      set {
        memoriesItem_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 23;
    private int used_;
    /// <summary>
    ///是否开放(0：开放 1不开放)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (Player != other.Player) return false;
      if (Credit != other.Credit) return false;
      if (Singing != other.Singing) return false;
      if (Dancing != other.Dancing) return false;
      if (Composing != other.Composing) return false;
      if (Popularity != other.Popularity) return false;
      if (Charm != other.Charm) return false;
      if (Perseverance != other.Perseverance) return false;
      if (Puzzle != other.Puzzle) return false;
      if (CardName != other.CardName) return false;
      if (Gold != other.Gold) return false;
      if (GrowthRateS != other.GrowthRateS) return false;
      if (GrowthRateD != other.GrowthRateD) return false;
      if (GrowthRateC != other.GrowthRateC) return false;
      if (GrowthRatePo != other.GrowthRatePo) return false;
      if (GrowthRateCh != other.GrowthRateCh) return false;
      if (GrowthRatePe != other.GrowthRatePe) return false;
      if(!gainSceneIds_.Equals(other.gainSceneIds_)) return false;
      if(!evoSceneIds_.Equals(other.evoSceneIds_)) return false;
      if (NewViewEvo != other.NewViewEvo) return false;
      if (MemoriesItem != other.MemoriesItem) return false;
      if (Used != other.Used) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Credit != 0) hash ^= Credit.GetHashCode();
      if (Singing != 0) hash ^= Singing.GetHashCode();
      if (Dancing != 0) hash ^= Dancing.GetHashCode();
      if (Composing != 0) hash ^= Composing.GetHashCode();
      if (Popularity != 0) hash ^= Popularity.GetHashCode();
      if (Charm != 0) hash ^= Charm.GetHashCode();
      if (Perseverance != 0) hash ^= Perseverance.GetHashCode();
      if (Puzzle != 0) hash ^= Puzzle.GetHashCode();
      if (CardName.Length != 0) hash ^= CardName.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (GrowthRateS != 0F) hash ^= GrowthRateS.GetHashCode();
      if (GrowthRateD != 0F) hash ^= GrowthRateD.GetHashCode();
      if (GrowthRateC != 0F) hash ^= GrowthRateC.GetHashCode();
      if (GrowthRatePo != 0F) hash ^= GrowthRatePo.GetHashCode();
      if (GrowthRateCh != 0F) hash ^= GrowthRateCh.GetHashCode();
      if (GrowthRatePe != 0F) hash ^= GrowthRatePe.GetHashCode();
      hash ^= gainSceneIds_.GetHashCode();
      hash ^= evoSceneIds_.GetHashCode();
      if (NewViewEvo != 0) hash ^= NewViewEvo.GetHashCode();
      if (MemoriesItem != 0) hash ^= MemoriesItem.GetHashCode();
      if (Used != 0) hash ^= Used.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (Credit != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Credit);
      }
      if (Singing != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Singing);
      }
      if (Dancing != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Dancing);
      }
      if (Composing != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Composing);
      }
      if (Popularity != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Popularity);
      }
      if (Charm != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Charm);
      }
      if (Perseverance != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Perseverance);
      }
      if (Puzzle != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Puzzle);
      }
      if (CardName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CardName);
      }
      if (Gold != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(Gold);
      }
      if (GrowthRateS != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(GrowthRateS);
      }
      if (GrowthRateD != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(GrowthRateD);
      }
      if (GrowthRateC != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(GrowthRateC);
      }
      if (GrowthRatePo != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(GrowthRatePo);
      }
      if (GrowthRateCh != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(GrowthRateCh);
      }
      if (GrowthRatePe != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(GrowthRatePe);
      }
      gainSceneIds_.WriteTo(output, _repeated_gainSceneIds_codec);
      evoSceneIds_.WriteTo(output, _repeated_evoSceneIds_codec);
      if (NewViewEvo != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) NewViewEvo);
      }
      if (MemoriesItem != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(MemoriesItem);
      }
      if (Used != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(Used);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (Credit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Credit);
      }
      if (Singing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Singing);
      }
      if (Dancing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Dancing);
      }
      if (Composing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Composing);
      }
      if (Popularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Popularity);
      }
      if (Charm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Charm);
      }
      if (Perseverance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Perseverance);
      }
      if (Puzzle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Puzzle);
      }
      if (CardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardName);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gold);
      }
      if (GrowthRateS != 0F) {
        size += 1 + 4;
      }
      if (GrowthRateD != 0F) {
        size += 1 + 4;
      }
      if (GrowthRateC != 0F) {
        size += 1 + 4;
      }
      if (GrowthRatePo != 0F) {
        size += 2 + 4;
      }
      if (GrowthRateCh != 0F) {
        size += 2 + 4;
      }
      if (GrowthRatePe != 0F) {
        size += 2 + 4;
      }
      size += gainSceneIds_.CalculateSize(_repeated_gainSceneIds_codec);
      size += evoSceneIds_.CalculateSize(_repeated_evoSceneIds_codec);
      if (NewViewEvo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NewViewEvo);
      }
      if (MemoriesItem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MemoriesItem);
      }
      if (Used != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Used);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardPB other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Credit != 0) {
        Credit = other.Credit;
      }
      if (other.Singing != 0) {
        Singing = other.Singing;
      }
      if (other.Dancing != 0) {
        Dancing = other.Dancing;
      }
      if (other.Composing != 0) {
        Composing = other.Composing;
      }
      if (other.Popularity != 0) {
        Popularity = other.Popularity;
      }
      if (other.Charm != 0) {
        Charm = other.Charm;
      }
      if (other.Perseverance != 0) {
        Perseverance = other.Perseverance;
      }
      if (other.Puzzle != 0) {
        Puzzle = other.Puzzle;
      }
      if (other.CardName.Length != 0) {
        CardName = other.CardName;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.GrowthRateS != 0F) {
        GrowthRateS = other.GrowthRateS;
      }
      if (other.GrowthRateD != 0F) {
        GrowthRateD = other.GrowthRateD;
      }
      if (other.GrowthRateC != 0F) {
        GrowthRateC = other.GrowthRateC;
      }
      if (other.GrowthRatePo != 0F) {
        GrowthRatePo = other.GrowthRatePo;
      }
      if (other.GrowthRateCh != 0F) {
        GrowthRateCh = other.GrowthRateCh;
      }
      if (other.GrowthRatePe != 0F) {
        GrowthRatePe = other.GrowthRatePe;
      }
      gainSceneIds_.Add(other.gainSceneIds_);
      evoSceneIds_.Add(other.evoSceneIds_);
      if (other.NewViewEvo != 0) {
        NewViewEvo = other.NewViewEvo;
      }
      if (other.MemoriesItem != 0) {
        MemoriesItem = other.MemoriesItem;
      }
      if (other.Used != 0) {
        Used = other.Used;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
          case 16: {
            player_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
          case 24: {
            credit_ = (global::CreditPB) input.ReadEnum();
            break;
          }
          case 32: {
            Singing = input.ReadSInt32();
            break;
          }
          case 40: {
            Dancing = input.ReadSInt32();
            break;
          }
          case 48: {
            Composing = input.ReadSInt32();
            break;
          }
          case 56: {
            Popularity = input.ReadSInt32();
            break;
          }
          case 64: {
            Charm = input.ReadSInt32();
            break;
          }
          case 72: {
            Perseverance = input.ReadSInt32();
            break;
          }
          case 80: {
            Puzzle = input.ReadSInt32();
            break;
          }
          case 90: {
            CardName = input.ReadString();
            break;
          }
          case 96: {
            Gold = input.ReadSInt32();
            break;
          }
          case 109: {
            GrowthRateS = input.ReadFloat();
            break;
          }
          case 117: {
            GrowthRateD = input.ReadFloat();
            break;
          }
          case 125: {
            GrowthRateC = input.ReadFloat();
            break;
          }
          case 133: {
            GrowthRatePo = input.ReadFloat();
            break;
          }
          case 141: {
            GrowthRateCh = input.ReadFloat();
            break;
          }
          case 149: {
            GrowthRatePe = input.ReadFloat();
            break;
          }
          case 154:
          case 152: {
            gainSceneIds_.AddEntriesFrom(input, _repeated_gainSceneIds_codec);
            break;
          }
          case 162:
          case 160: {
            evoSceneIds_.AddEntriesFrom(input, _repeated_evoSceneIds_codec);
            break;
          }
          case 168: {
            newViewEvo_ = (global::EvolutionPB) input.ReadEnum();
            break;
          }
          case 176: {
            MemoriesItem = input.ReadSInt32();
            break;
          }
          case 184: {
            Used = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
