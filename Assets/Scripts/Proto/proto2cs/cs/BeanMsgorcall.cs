// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_msgorcall.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_msgorcall.proto</summary>
  public static partial class BeanMsgorcallReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_msgorcall.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanMsgorcallReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRiZWFuX21zZ29yY2FsbC5wcm90bxIJY29tLnByb3RvGgpiYXNlLnByb3Rv",
            "IsgBCg9Nc2dPckNhbGxSdWxlUEISEAoIc2NlbmVfaWQYASABKBESDwoHdGFs",
            "a19pZBgCIAEoERINCgViZ19pZBgDIAEoERIQCghtdXNpY19pZBgEIAEoCRIM",
            "CgR0eXBlGAUgASgREg8KB2NvbnRlbnQYBiABKAkSEgoKc2VsZWN0X2lkcxgH",
            "IAMoBRIXCg9zZWxlY3RfY29udGVudHMYCCADKAkSEQoJbXVzaWNfbGVuGAkg",
            "ASgCEhIKCnNjZW5lX25hbWUYCiABKAlCMgofbmV0LmdhbGFzcG9ydHMuYmln",
            "c3Rhci5wcm90b2NvbEIPTXNnT3JDYWxsUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MsgOrCallRulePB), global::Com.Proto.MsgOrCallRulePB.Parser, new[]{ "SceneId", "TalkId", "BgId", "MusicId", "Type", "Content", "SelectIds", "SelectContents", "MusicLen", "SceneName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///MsgOrCallRulePB MsgOrCallRule  短信或者电话
  /// </summary>
  public sealed partial class MsgOrCallRulePB : pb::IMessage<MsgOrCallRulePB> {
    private static readonly pb::MessageParser<MsgOrCallRulePB> _parser = new pb::MessageParser<MsgOrCallRulePB>(() => new MsgOrCallRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgOrCallRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMsgorcallReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOrCallRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOrCallRulePB(MsgOrCallRulePB other) : this() {
      sceneId_ = other.sceneId_;
      talkId_ = other.talkId_;
      bgId_ = other.bgId_;
      musicId_ = other.musicId_;
      type_ = other.type_;
      content_ = other.content_;
      selectIds_ = other.selectIds_.Clone();
      selectContents_ = other.selectContents_.Clone();
      musicLen_ = other.musicLen_;
      sceneName_ = other.sceneName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOrCallRulePB Clone() {
      return new MsgOrCallRulePB(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    /// <summary>
    ///情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "talk_id" field.</summary>
    public const int TalkIdFieldNumber = 2;
    private int talkId_;
    /// <summary>
    ///对话ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalkId {
      get { return talkId_; }
      set {
        talkId_ = value;
      }
    }

    /// <summary>Field number for the "bg_id" field.</summary>
    public const int BgIdFieldNumber = 3;
    private int bgId_;
    /// <summary>
    ///背景图ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BgId {
      get { return bgId_; }
      set {
        bgId_ = value;
      }
    }

    /// <summary>Field number for the "music_id" field.</summary>
    public const int MusicIdFieldNumber = 4;
    private string musicId_ = "";
    /// <summary>
    ///音频ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicId {
      get { return musicId_; }
      set {
        musicId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    ///人物类型（玩家0，林尹默1，李赫2，谭飞3，方以乔4）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    ///对话文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "select_ids" field.</summary>
    public const int SelectIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_selectIds_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> selectIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///选项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SelectIds {
      get { return selectIds_; }
    }

    /// <summary>Field number for the "select_contents" field.</summary>
    public const int SelectContentsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_selectContents_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> selectContents_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///选项文案（按钮文案）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SelectContents {
      get { return selectContents_; }
    }

    /// <summary>Field number for the "music_len" field.</summary>
    public const int MusicLenFieldNumber = 9;
    private float musicLen_;
    /// <summary>
    ///音频长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MusicLen {
      get { return musicLen_; }
      set {
        musicLen_ = value;
      }
    }

    /// <summary>Field number for the "scene_name" field.</summary>
    public const int SceneNameFieldNumber = 10;
    private string sceneName_ = "";
    /// <summary>
    ///情景名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgOrCallRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgOrCallRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (TalkId != other.TalkId) return false;
      if (BgId != other.BgId) return false;
      if (MusicId != other.MusicId) return false;
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if(!selectIds_.Equals(other.selectIds_)) return false;
      if(!selectContents_.Equals(other.selectContents_)) return false;
      if (MusicLen != other.MusicLen) return false;
      if (SceneName != other.SceneName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (TalkId != 0) hash ^= TalkId.GetHashCode();
      if (BgId != 0) hash ^= BgId.GetHashCode();
      if (MusicId.Length != 0) hash ^= MusicId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= selectIds_.GetHashCode();
      hash ^= selectContents_.GetHashCode();
      if (MusicLen != 0F) hash ^= MusicLen.GetHashCode();
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SceneId);
      }
      if (TalkId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TalkId);
      }
      if (BgId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(BgId);
      }
      if (MusicId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MusicId);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Type);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      selectIds_.WriteTo(output, _repeated_selectIds_codec);
      selectContents_.WriteTo(output, _repeated_selectContents_codec);
      if (MusicLen != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MusicLen);
      }
      if (SceneName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SceneName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SceneId);
      }
      if (TalkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TalkId);
      }
      if (BgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BgId);
      }
      if (MusicId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MusicId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += selectIds_.CalculateSize(_repeated_selectIds_codec);
      size += selectContents_.CalculateSize(_repeated_selectContents_codec);
      if (MusicLen != 0F) {
        size += 1 + 4;
      }
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgOrCallRulePB other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.TalkId != 0) {
        TalkId = other.TalkId;
      }
      if (other.BgId != 0) {
        BgId = other.BgId;
      }
      if (other.MusicId.Length != 0) {
        MusicId = other.MusicId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      selectIds_.Add(other.selectIds_);
      selectContents_.Add(other.selectContents_);
      if (other.MusicLen != 0F) {
        MusicLen = other.MusicLen;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SceneId = input.ReadSInt32();
            break;
          }
          case 16: {
            TalkId = input.ReadSInt32();
            break;
          }
          case 24: {
            BgId = input.ReadSInt32();
            break;
          }
          case 34: {
            MusicId = input.ReadString();
            break;
          }
          case 40: {
            Type = input.ReadSInt32();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            selectIds_.AddEntriesFrom(input, _repeated_selectIds_codec);
            break;
          }
          case 66: {
            selectContents_.AddEntriesFrom(input, _repeated_selectContents_codec);
            break;
          }
          case 77: {
            MusicLen = input.ReadFloat();
            break;
          }
          case 82: {
            SceneName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
