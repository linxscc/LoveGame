// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_activity_music_pool.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_activity_music_pool.proto</summary>
  public static partial class BeanActivityMusicPoolReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_activity_music_pool.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanActivityMusicPoolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5iZWFuX2FjdGl2aXR5X211c2ljX3Bvb2wucHJvdG8SCWNvbS5wcm90bxoK",
            "YmFzZS5wcm90bxoQYmVhbl9hd2FyZC5wcm90byJQChNBY3Rpdml0eU11c2lj",
            "UG9vbFBCEhMKC2FjdGl2aXR5X2lkGAEgASgREhAKCG11c2ljX2lkGAIgASgR",
            "EhIKCm11c2ljX25hbWUYAyABKAlCOgofbmV0LmdhbGFzcG9ydHMuYmlnc3Rh",
            "ci5wcm90b2NvbEIXQWN0aXZpdHlNdXNpY1Bvb2xQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActivityMusicPoolPB), global::Com.Proto.ActivityMusicPoolPB.Parser, new[]{ "ActivityId", "MusicId", "MusicName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///ActivityMusicPoolPB ActivityMusicPool
  /// </summary>
  public sealed partial class ActivityMusicPoolPB : pb::IMessage<ActivityMusicPoolPB> {
    private static readonly pb::MessageParser<ActivityMusicPoolPB> _parser = new pb::MessageParser<ActivityMusicPoolPB>(() => new ActivityMusicPoolPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityMusicPoolPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanActivityMusicPoolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityMusicPoolPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityMusicPoolPB(ActivityMusicPoolPB other) : this() {
      activityId_ = other.activityId_;
      musicId_ = other.musicId_;
      musicName_ = other.musicName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityMusicPoolPB Clone() {
      return new ActivityMusicPoolPB(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    ///活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "music_id" field.</summary>
    public const int MusicIdFieldNumber = 2;
    private int musicId_;
    /// <summary>
    ///音乐id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MusicId {
      get { return musicId_; }
      set {
        musicId_ = value;
      }
    }

    /// <summary>Field number for the "music_name" field.</summary>
    public const int MusicNameFieldNumber = 3;
    private string musicName_ = "";
    /// <summary>
    ///音乐名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicName {
      get { return musicName_; }
      set {
        musicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityMusicPoolPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityMusicPoolPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (MusicId != other.MusicId) return false;
      if (MusicName != other.MusicName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (MusicId != 0) hash ^= MusicId.GetHashCode();
      if (MusicName.Length != 0) hash ^= MusicName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActivityId);
      }
      if (MusicId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(MusicId);
      }
      if (MusicName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MusicName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActivityId);
      }
      if (MusicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MusicId);
      }
      if (MusicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MusicName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityMusicPoolPB other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.MusicId != 0) {
        MusicId = other.MusicId;
      }
      if (other.MusicName.Length != 0) {
        MusicName = other.MusicName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadSInt32();
            break;
          }
          case 16: {
            MusicId = input.ReadSInt32();
            break;
          }
          case 26: {
            MusicName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
