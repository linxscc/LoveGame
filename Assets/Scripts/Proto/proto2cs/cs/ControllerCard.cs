// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_card.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_card.proto</summary>
  public static partial class ControllerCardReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_card.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerCardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVjb250cm9sbGVyX2NhcmQucHJvdG8SCWNvbS5wcm90bxoKYmFzZS5wcm90",
            "bxoPYmVhbl9jYXJkLnByb3RvGhpiZWFuX2NhcmRfbGV2ZWxfcnVsZS5wcm90",
            "bxoZYmVhbl9jYXJkX3N0YXJfcnVsZS5wcm90bxoYYmVhbl9jYXJkX2V2b19y",
            "dWxlLnByb3RvGhxiZWFuX2NhcmRfc3Rhcl91cF9ydWxlLnByb3RvGhxiZWFu",
            "X2NhcmRfcmVzb2x2ZV9ydWxlLnByb3RvGhRiZWFuX3VzZXJfY2FyZC5wcm90",
            "bxoWYmVhbl91c2VyX3B1enpsZS5wcm90bxoUYmVhbl91c2VyX2l0ZW0ucHJv",
            "dG8aFWJlYW5fdXNlcl9tb25leS5wcm90bxoZYmVhbl9zaWduYXR1cmVfcnVs",
            "ZS5wcm90bxoeYmVhbl91c2VyX3NpZ25hdHVyZV9ydWxlLnByb3RvIm0KB0Nh",
            "cmRSZXMSCwoDcmV0GAEgASgREiAKBWNhcmRzGAIgAygLMhEuY29tLnByb3Rv",
            "LkNhcmRQQhIzCg9zaWduYXR1cmVfcnVsZXMYAyADKAsyGi5jb20ucHJvdG8u",
            "U2lnbmF0dXJlUnVsZVBCIqkCCgtDYXJkUnVsZVJlcxILCgNyZXQYASABKBES",
            "NAoQY2FyZF9sZXZlbF9ydWxlcxgCIAMoCzIaLmNvbS5wcm90by5DYXJkTGV2",
            "ZWxSdWxlUEISMgoPY2FyZF9zdGFyX3J1bGVzGAMgAygLMhkuY29tLnByb3Rv",
            "LkNhcmRTdGFyUnVsZVBCEjcKEmNhcmRfc3Rhcl91cF9ydWxlcxgEIAMoCzIb",
            "LmNvbS5wcm90by5DYXJkU3RhclVwUnVsZVBCEjAKDmNhcmRfZXZvX3J1bGVz",
            "GAUgAygLMhguY29tLnByb3RvLkNhcmRFdm9SdWxlUEISOAoSY2FyZF9yZXNv",
            "bHZlX3J1bGVzGAYgAygLMhwuY29tLnByb3RvLkNhcmRSZXNvbHZlUnVsZVBC",
            "IlIKDk15U2lnbmF0dXJlUmVzEgsKA3JldBgBIAEoERIzCg91c2VyX3NpZ25h",
            "dHVyZXMYAiADKAsyGi5jb20ucHJvdG8uVXNlclNpZ25hdHVyZVBCIkMKCU15",
            "Q2FyZFJlcxILCgNyZXQYASABKBESKQoKdXNlcl9jYXJkcxgCIAMoCzIVLmNv",
            "bS5wcm90by5Vc2VyQ2FyZFBCIkkKC015UHV6emxlUmVzEgsKA3JldBgBIAEo",
            "ERItCgx1c2VyX3B1enpsZXMYAiADKAsyFy5jb20ucHJvdG8uVXNlclB1enps",
            "ZVBCIhwKCVN0YXJVcFJlcRIPCgdjYXJkX2lkGAEgASgRIpkBCglTdGFyVXBS",
            "ZXMSCwoDcmV0GAEgASgREigKCXVzZXJfY2FyZBgCIAEoCzIVLmNvbS5wcm90",
            "by5Vc2VyQ2FyZFBCEikKCnVzZXJfaXRlbXMYAyADKAsyFS5jb20ucHJvdG8u",
            "VXNlckl0ZW1QQhIqCgp1c2VyX21vbmV5GAQgASgLMhYuY29tLnByb3RvLlVz",
            "ZXJNb25leVBCIjUKDEV2b2x1dGlvblJlcRIPCgdjYXJkX2lkGAEgASgREhQK",
            "DGNvbnN1bWVfdHlwZRgCIAEoESKcAQoMRXZvbHV0aW9uUmVzEgsKA3JldBgB",
            "IAEoERIoCgl1c2VyX2NhcmQYAiABKAsyFS5jb20ucHJvdG8uVXNlckNhcmRQ",
            "QhIqCgp1c2VyX21vbmV5GAMgASgLMhYuY29tLnByb3RvLlVzZXJNb25leVBC",
            "EikKCnVzZXJfaXRlbXMYBCADKAsyFS5jb20ucHJvdG8uVXNlckl0ZW1QQiI9",
            "CgpSZXNvbHZlUmVxEi8KCnVzZXJfY2FyZHMYASADKAsyGy5jb20ucHJvdG8u",
            "VXNlckNhcmRTaW1wbGVQQiJvCgpSZXNvbHZlUmVzEgsKA3JldBgBIAEoERIp",
            "Cgp1c2VyX2l0ZW1zGAIgAygLMhUuY29tLnByb3RvLlVzZXJJdGVtUEISKQoK",
            "dXNlcl9jYXJkcxgDIAMoCzIVLmNvbS5wcm90by5Vc2VyQ2FyZFBCIisKC0Nv",
            "bXBvdW5kUmVxEg8KB2NhcmRfaWQYASABKBESCwoDbnVtGAIgASgRIp8BCgtD",
            "b21wb3VuZFJlcxILCgNyZXQYASABKBESLAoLdXNlcl9wdXp6bGUYAiABKAsy",
            "Fy5jb20ucHJvdG8uVXNlclB1enpsZVBCEikKCnVzZXJfY2FyZHMYAyADKAsy",
            "FS5jb20ucHJvdG8uVXNlckNhcmRQQhIqCgp1c2VyX21vbmV5GAQgASgLMhYu",
            "Y29tLnByb3RvLlVzZXJNb25leVBCIkAKDENob29zZUV2b1JlcRIPCgdjYXJk",
            "X2lkGAEgASgREh8KCWV2b2x1dGlvbhgCIAEoDjIMLkV2b2x1dGlvblBCIkUK",
            "DENob29zZUV2b1JlcxILCgNyZXQYASABKBESKAoJdXNlcl9jYXJkGAIgASgL",
            "MhUuY29tLnByb3RvLlVzZXJDYXJkUEIiPwoJQWRkRXhwUmVxEg8KB2NhcmRf",
            "aWQYASABKBESDwoHaXRlbV9pZBgCIAEoERIQCghpdGVtX251bRgDIAEoESJs",
            "CglBZGRFeHBSZXMSCwoDcmV0GAEgASgREigKCXVzZXJfY2FyZBgCIAEoCzIV",
            "LmNvbS5wcm90by5Vc2VyQ2FyZFBCEigKCXVzZXJfaXRlbRgDIAEoCzIVLmNv",
            "bS5wcm90by5Vc2VySXRlbVBCIh0KClVwZ3JhZGVSZXESDwoHY2FyZF9pZBgB",
            "IAEoESJuCgpVcGdyYWRlUmVzEgsKA3JldBgBIAEoERIoCgl1c2VyX2NhcmQY",
            "AiABKAsyFS5jb20ucHJvdG8uVXNlckNhcmRQQhIpCgp1c2VyX2l0ZW1zGAMg",
            "AygLMhUuY29tLnByb3RvLlVzZXJJdGVtUEJCNwofbmV0LmdhbGFzcG9ydHMu",
            "Ymlnc3Rhci5wcm90b2NvbEIUQ2FyZENvbnRyb2xsZXJQcm90b3NiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanCardReflection.Descriptor, global::Com.Proto.BeanCardLevelRuleReflection.Descriptor, global::Com.Proto.BeanCardStarRuleReflection.Descriptor, global::Com.Proto.BeanCardEvoRuleReflection.Descriptor, global::Com.Proto.BeanCardStarUpRuleReflection.Descriptor, global::Com.Proto.BeanCardResolveRuleReflection.Descriptor, global::Com.Proto.BeanUserCardReflection.Descriptor, global::Com.Proto.BeanUserPuzzleReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, global::Com.Proto.BeanSignatureRuleReflection.Descriptor, global::Com.Proto.BeanUserSignatureRuleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CardRes), global::Com.Proto.CardRes.Parser, new[]{ "Ret", "Cards", "SignatureRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CardRuleRes), global::Com.Proto.CardRuleRes.Parser, new[]{ "Ret", "CardLevelRules", "CardStarRules", "CardStarUpRules", "CardEvoRules", "CardResolveRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MySignatureRes), global::Com.Proto.MySignatureRes.Parser, new[]{ "Ret", "UserSignatures" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyCardRes), global::Com.Proto.MyCardRes.Parser, new[]{ "Ret", "UserCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyPuzzleRes), global::Com.Proto.MyPuzzleRes.Parser, new[]{ "Ret", "UserPuzzles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.StarUpReq), global::Com.Proto.StarUpReq.Parser, new[]{ "CardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.StarUpRes), global::Com.Proto.StarUpRes.Parser, new[]{ "Ret", "UserCard", "UserItems", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EvolutionReq), global::Com.Proto.EvolutionReq.Parser, new[]{ "CardId", "ConsumeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.EvolutionRes), global::Com.Proto.EvolutionRes.Parser, new[]{ "Ret", "UserCard", "UserMoney", "UserItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ResolveReq), global::Com.Proto.ResolveReq.Parser, new[]{ "UserCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ResolveRes), global::Com.Proto.ResolveRes.Parser, new[]{ "Ret", "UserItems", "UserCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CompoundReq), global::Com.Proto.CompoundReq.Parser, new[]{ "CardId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CompoundRes), global::Com.Proto.CompoundRes.Parser, new[]{ "Ret", "UserPuzzle", "UserCards", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChooseEvoReq), global::Com.Proto.ChooseEvoReq.Parser, new[]{ "CardId", "Evolution" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChooseEvoRes), global::Com.Proto.ChooseEvoRes.Parser, new[]{ "Ret", "UserCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.AddExpReq), global::Com.Proto.AddExpReq.Parser, new[]{ "CardId", "ItemId", "ItemNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.AddExpRes), global::Com.Proto.AddExpRes.Parser, new[]{ "Ret", "UserCard", "UserItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UpgradeReq), global::Com.Proto.UpgradeReq.Parser, new[]{ "CardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UpgradeRes), global::Com.Proto.UpgradeRes.Parser, new[]{ "Ret", "UserCard", "UserItems" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CardRes : pb::IMessage<CardRes> {
    private static readonly pb::MessageParser<CardRes> _parser = new pb::MessageParser<CardRes>(() => new CardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRes(CardRes other) : this() {
      ret_ = other.ret_;
      cards_ = other.cards_.Clone();
      signatureRules_ = other.signatureRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRes Clone() {
      return new CardRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.CardPB> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.CardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CardPB> cards_ = new pbc::RepeatedField<global::Com.Proto.CardPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CardPB> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "signature_rules" field.</summary>
    public const int SignatureRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.SignatureRulePB> _repeated_signatureRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.SignatureRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.SignatureRulePB> signatureRules_ = new pbc::RepeatedField<global::Com.Proto.SignatureRulePB>();
    /// <summary>
    ///签名道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.SignatureRulePB> SignatureRules {
      get { return signatureRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!signatureRules_.Equals(other.signatureRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= signatureRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      signatureRules_.WriteTo(output, _repeated_signatureRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += signatureRules_.CalculateSize(_repeated_signatureRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      cards_.Add(other.cards_);
      signatureRules_.Add(other.signatureRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 26: {
            signatureRules_.AddEntriesFrom(input, _repeated_signatureRules_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardRuleRes : pb::IMessage<CardRuleRes> {
    private static readonly pb::MessageParser<CardRuleRes> _parser = new pb::MessageParser<CardRuleRes>(() => new CardRuleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardRuleRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRuleRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRuleRes(CardRuleRes other) : this() {
      ret_ = other.ret_;
      cardLevelRules_ = other.cardLevelRules_.Clone();
      cardStarRules_ = other.cardStarRules_.Clone();
      cardStarUpRules_ = other.cardStarUpRules_.Clone();
      cardEvoRules_ = other.cardEvoRules_.Clone();
      cardResolveRules_ = other.cardResolveRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRuleRes Clone() {
      return new CardRuleRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "card_level_rules" field.</summary>
    public const int CardLevelRulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.CardLevelRulePB> _repeated_cardLevelRules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.CardLevelRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CardLevelRulePB> cardLevelRules_ = new pbc::RepeatedField<global::Com.Proto.CardLevelRulePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CardLevelRulePB> CardLevelRules {
      get { return cardLevelRules_; }
    }

    /// <summary>Field number for the "card_star_rules" field.</summary>
    public const int CardStarRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.CardStarRulePB> _repeated_cardStarRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.CardStarRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CardStarRulePB> cardStarRules_ = new pbc::RepeatedField<global::Com.Proto.CardStarRulePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CardStarRulePB> CardStarRules {
      get { return cardStarRules_; }
    }

    /// <summary>Field number for the "card_star_up_rules" field.</summary>
    public const int CardStarUpRulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.CardStarUpRulePB> _repeated_cardStarUpRules_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.CardStarUpRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CardStarUpRulePB> cardStarUpRules_ = new pbc::RepeatedField<global::Com.Proto.CardStarUpRulePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CardStarUpRulePB> CardStarUpRules {
      get { return cardStarUpRules_; }
    }

    /// <summary>Field number for the "card_evo_rules" field.</summary>
    public const int CardEvoRulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.CardEvoRulePB> _repeated_cardEvoRules_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.CardEvoRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CardEvoRulePB> cardEvoRules_ = new pbc::RepeatedField<global::Com.Proto.CardEvoRulePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CardEvoRulePB> CardEvoRules {
      get { return cardEvoRules_; }
    }

    /// <summary>Field number for the "card_resolve_rules" field.</summary>
    public const int CardResolveRulesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Proto.CardResolveRulePB> _repeated_cardResolveRules_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Proto.CardResolveRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CardResolveRulePB> cardResolveRules_ = new pbc::RepeatedField<global::Com.Proto.CardResolveRulePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CardResolveRulePB> CardResolveRules {
      get { return cardResolveRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardRuleRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardRuleRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!cardLevelRules_.Equals(other.cardLevelRules_)) return false;
      if(!cardStarRules_.Equals(other.cardStarRules_)) return false;
      if(!cardStarUpRules_.Equals(other.cardStarUpRules_)) return false;
      if(!cardEvoRules_.Equals(other.cardEvoRules_)) return false;
      if(!cardResolveRules_.Equals(other.cardResolveRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= cardLevelRules_.GetHashCode();
      hash ^= cardStarRules_.GetHashCode();
      hash ^= cardStarUpRules_.GetHashCode();
      hash ^= cardEvoRules_.GetHashCode();
      hash ^= cardResolveRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      cardLevelRules_.WriteTo(output, _repeated_cardLevelRules_codec);
      cardStarRules_.WriteTo(output, _repeated_cardStarRules_codec);
      cardStarUpRules_.WriteTo(output, _repeated_cardStarUpRules_codec);
      cardEvoRules_.WriteTo(output, _repeated_cardEvoRules_codec);
      cardResolveRules_.WriteTo(output, _repeated_cardResolveRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += cardLevelRules_.CalculateSize(_repeated_cardLevelRules_codec);
      size += cardStarRules_.CalculateSize(_repeated_cardStarRules_codec);
      size += cardStarUpRules_.CalculateSize(_repeated_cardStarUpRules_codec);
      size += cardEvoRules_.CalculateSize(_repeated_cardEvoRules_codec);
      size += cardResolveRules_.CalculateSize(_repeated_cardResolveRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardRuleRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      cardLevelRules_.Add(other.cardLevelRules_);
      cardStarRules_.Add(other.cardStarRules_);
      cardStarUpRules_.Add(other.cardStarUpRules_);
      cardEvoRules_.Add(other.cardEvoRules_);
      cardResolveRules_.Add(other.cardResolveRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            cardLevelRules_.AddEntriesFrom(input, _repeated_cardLevelRules_codec);
            break;
          }
          case 26: {
            cardStarRules_.AddEntriesFrom(input, _repeated_cardStarRules_codec);
            break;
          }
          case 34: {
            cardStarUpRules_.AddEntriesFrom(input, _repeated_cardStarUpRules_codec);
            break;
          }
          case 42: {
            cardEvoRules_.AddEntriesFrom(input, _repeated_cardEvoRules_codec);
            break;
          }
          case 50: {
            cardResolveRules_.AddEntriesFrom(input, _repeated_cardResolveRules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户签名道具列表 cardC/mySignatures
  /// </summary>
  public sealed partial class MySignatureRes : pb::IMessage<MySignatureRes> {
    private static readonly pb::MessageParser<MySignatureRes> _parser = new pb::MessageParser<MySignatureRes>(() => new MySignatureRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MySignatureRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MySignatureRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MySignatureRes(MySignatureRes other) : this() {
      ret_ = other.ret_;
      userSignatures_ = other.userSignatures_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MySignatureRes Clone() {
      return new MySignatureRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_signatures" field.</summary>
    public const int UserSignaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserSignaturePB> _repeated_userSignatures_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserSignaturePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserSignaturePB> userSignatures_ = new pbc::RepeatedField<global::Com.Proto.UserSignaturePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserSignaturePB> UserSignatures {
      get { return userSignatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MySignatureRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MySignatureRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userSignatures_.Equals(other.userSignatures_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userSignatures_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userSignatures_.WriteTo(output, _repeated_userSignatures_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userSignatures_.CalculateSize(_repeated_userSignatures_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MySignatureRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userSignatures_.Add(other.userSignatures_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userSignatures_.AddEntriesFrom(input, _repeated_userSignatures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyCardRes : pb::IMessage<MyCardRes> {
    private static readonly pb::MessageParser<MyCardRes> _parser = new pb::MessageParser<MyCardRes>(() => new MyCardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyCardRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyCardRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyCardRes(MyCardRes other) : this() {
      ret_ = other.ret_;
      userCards_ = other.userCards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyCardRes Clone() {
      return new MyCardRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_cards" field.</summary>
    public const int UserCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserCardPB> _repeated_userCards_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserCardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserCardPB> userCards_ = new pbc::RepeatedField<global::Com.Proto.UserCardPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserCardPB> UserCards {
      get { return userCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyCardRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyCardRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userCards_.Equals(other.userCards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userCards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userCards_.WriteTo(output, _repeated_userCards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userCards_.CalculateSize(_repeated_userCards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyCardRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userCards_.Add(other.userCards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userCards_.AddEntriesFrom(input, _repeated_userCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyPuzzleRes : pb::IMessage<MyPuzzleRes> {
    private static readonly pb::MessageParser<MyPuzzleRes> _parser = new pb::MessageParser<MyPuzzleRes>(() => new MyPuzzleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyPuzzleRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyPuzzleRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyPuzzleRes(MyPuzzleRes other) : this() {
      ret_ = other.ret_;
      userPuzzles_ = other.userPuzzles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyPuzzleRes Clone() {
      return new MyPuzzleRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_puzzles" field.</summary>
    public const int UserPuzzlesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserPuzzlePB> _repeated_userPuzzles_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserPuzzlePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserPuzzlePB> userPuzzles_ = new pbc::RepeatedField<global::Com.Proto.UserPuzzlePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserPuzzlePB> UserPuzzles {
      get { return userPuzzles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyPuzzleRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyPuzzleRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userPuzzles_.Equals(other.userPuzzles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userPuzzles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userPuzzles_.WriteTo(output, _repeated_userPuzzles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userPuzzles_.CalculateSize(_repeated_userPuzzles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyPuzzleRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userPuzzles_.Add(other.userPuzzles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userPuzzles_.AddEntriesFrom(input, _repeated_userPuzzles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StarUpReq : pb::IMessage<StarUpReq> {
    private static readonly pb::MessageParser<StarUpReq> _parser = new pb::MessageParser<StarUpReq>(() => new StarUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StarUpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpReq(StarUpReq other) : this() {
      cardId_ = other.cardId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpReq Clone() {
      return new StarUpReq(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StarUpReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StarUpReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StarUpReq other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StarUpRes : pb::IMessage<StarUpRes> {
    private static readonly pb::MessageParser<StarUpRes> _parser = new pb::MessageParser<StarUpRes>(() => new StarUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StarUpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpRes(StarUpRes other) : this() {
      ret_ = other.ret_;
      UserCard = other.userCard_ != null ? other.UserCard.Clone() : null;
      userItems_ = other.userItems_.Clone();
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpRes Clone() {
      return new StarUpRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_card" field.</summary>
    public const int UserCardFieldNumber = 2;
    private global::Com.Proto.UserCardPB userCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserCardPB UserCard {
      get { return userCard_; }
      set {
        userCard_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItems_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItems {
      get { return userItems_; }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 4;
    private global::Com.Proto.UserMoneyPB userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StarUpRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StarUpRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserCard, other.UserCard)) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userCard_ != null) hash ^= UserCard.GetHashCode();
      hash ^= userItems_.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserCard);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
      if (userMoney_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCard);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StarUpRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userCard_ != null) {
        if (userCard_ == null) {
          userCard_ = new global::Com.Proto.UserCardPB();
        }
        UserCard.MergeFrom(other.UserCard);
      }
      userItems_.Add(other.userItems_);
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userCard_ == null) {
              userCard_ = new global::Com.Proto.UserCardPB();
            }
            input.ReadMessage(userCard_);
            break;
          }
          case 26: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
          case 34: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvolutionReq : pb::IMessage<EvolutionReq> {
    private static readonly pb::MessageParser<EvolutionReq> _parser = new pb::MessageParser<EvolutionReq>(() => new EvolutionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvolutionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvolutionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvolutionReq(EvolutionReq other) : this() {
      cardId_ = other.cardId_;
      consumeType_ = other.consumeType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvolutionReq Clone() {
      return new EvolutionReq(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "consume_type" field.</summary>
    public const int ConsumeTypeFieldNumber = 2;
    private int consumeType_;
    /// <summary>
    ///消耗类型  0是道具，1是星源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsumeType {
      get { return consumeType_; }
      set {
        consumeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvolutionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvolutionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (ConsumeType != other.ConsumeType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (ConsumeType != 0) hash ^= ConsumeType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
      if (ConsumeType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ConsumeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      if (ConsumeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ConsumeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvolutionReq other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.ConsumeType != 0) {
        ConsumeType = other.ConsumeType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
          case 16: {
            ConsumeType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvolutionRes : pb::IMessage<EvolutionRes> {
    private static readonly pb::MessageParser<EvolutionRes> _parser = new pb::MessageParser<EvolutionRes>(() => new EvolutionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvolutionRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvolutionRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvolutionRes(EvolutionRes other) : this() {
      ret_ = other.ret_;
      UserCard = other.userCard_ != null ? other.UserCard.Clone() : null;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
      userItems_ = other.userItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvolutionRes Clone() {
      return new EvolutionRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_card" field.</summary>
    public const int UserCardFieldNumber = 2;
    private global::Com.Proto.UserCardPB userCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserCardPB UserCard {
      get { return userCard_; }
      set {
        userCard_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private global::Com.Proto.UserMoneyPB userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItems_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItems {
      get { return userItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvolutionRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvolutionRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserCard, other.UserCard)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userCard_ != null) hash ^= UserCard.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      hash ^= userItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserCard);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserMoney);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCard);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvolutionRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userCard_ != null) {
        if (userCard_ == null) {
          userCard_ = new global::Com.Proto.UserCardPB();
        }
        UserCard.MergeFrom(other.UserCard);
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
      userItems_.Add(other.userItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userCard_ == null) {
              userCard_ = new global::Com.Proto.UserCardPB();
            }
            input.ReadMessage(userCard_);
            break;
          }
          case 26: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
          case 34: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolveReq : pb::IMessage<ResolveReq> {
    private static readonly pb::MessageParser<ResolveReq> _parser = new pb::MessageParser<ResolveReq>(() => new ResolveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveReq(ResolveReq other) : this() {
      userCards_ = other.userCards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveReq Clone() {
      return new ResolveReq(this);
    }

    /// <summary>Field number for the "user_cards" field.</summary>
    public const int UserCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Proto.UserCardSimplePB> _repeated_userCards_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Proto.UserCardSimplePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserCardSimplePB> userCards_ = new pbc::RepeatedField<global::Com.Proto.UserCardSimplePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserCardSimplePB> UserCards {
      get { return userCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolveReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolveReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userCards_.Equals(other.userCards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userCards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userCards_.WriteTo(output, _repeated_userCards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userCards_.CalculateSize(_repeated_userCards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolveReq other) {
      if (other == null) {
        return;
      }
      userCards_.Add(other.userCards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userCards_.AddEntriesFrom(input, _repeated_userCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolveRes : pb::IMessage<ResolveRes> {
    private static readonly pb::MessageParser<ResolveRes> _parser = new pb::MessageParser<ResolveRes>(() => new ResolveRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolveRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveRes(ResolveRes other) : this() {
      ret_ = other.ret_;
      userItems_ = other.userItems_.Clone();
      userCards_ = other.userCards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveRes Clone() {
      return new ResolveRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItems_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItems {
      get { return userItems_; }
    }

    /// <summary>Field number for the "user_cards" field.</summary>
    public const int UserCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserCardPB> _repeated_userCards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserCardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserCardPB> userCards_ = new pbc::RepeatedField<global::Com.Proto.UserCardPB>();
    /// <summary>
    ///改变后的卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserCardPB> UserCards {
      get { return userCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolveRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolveRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      if(!userCards_.Equals(other.userCards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userItems_.GetHashCode();
      hash ^= userCards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
      userCards_.WriteTo(output, _repeated_userCards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      size += userCards_.CalculateSize(_repeated_userCards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolveRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userItems_.Add(other.userItems_);
      userCards_.Add(other.userCards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
          case 26: {
            userCards_.AddEntriesFrom(input, _repeated_userCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompoundReq : pb::IMessage<CompoundReq> {
    private static readonly pb::MessageParser<CompoundReq> _parser = new pb::MessageParser<CompoundReq>(() => new CompoundReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompoundReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundReq(CompoundReq other) : this() {
      cardId_ = other.cardId_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundReq Clone() {
      return new CompoundReq(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompoundReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompoundReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompoundReq other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
          case 16: {
            Num = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompoundRes : pb::IMessage<CompoundRes> {
    private static readonly pb::MessageParser<CompoundRes> _parser = new pb::MessageParser<CompoundRes>(() => new CompoundRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompoundRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundRes(CompoundRes other) : this() {
      ret_ = other.ret_;
      UserPuzzle = other.userPuzzle_ != null ? other.UserPuzzle.Clone() : null;
      userCards_ = other.userCards_.Clone();
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompoundRes Clone() {
      return new CompoundRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_puzzle" field.</summary>
    public const int UserPuzzleFieldNumber = 2;
    private global::Com.Proto.UserPuzzlePB userPuzzle_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserPuzzlePB UserPuzzle {
      get { return userPuzzle_; }
      set {
        userPuzzle_ = value;
      }
    }

    /// <summary>Field number for the "user_cards" field.</summary>
    public const int UserCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserCardPB> _repeated_userCards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserCardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserCardPB> userCards_ = new pbc::RepeatedField<global::Com.Proto.UserCardPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserCardPB> UserCards {
      get { return userCards_; }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 4;
    private global::Com.Proto.UserMoneyPB userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompoundRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompoundRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserPuzzle, other.UserPuzzle)) return false;
      if(!userCards_.Equals(other.userCards_)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userPuzzle_ != null) hash ^= UserPuzzle.GetHashCode();
      hash ^= userCards_.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userPuzzle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserPuzzle);
      }
      userCards_.WriteTo(output, _repeated_userCards_codec);
      if (userMoney_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userPuzzle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPuzzle);
      }
      size += userCards_.CalculateSize(_repeated_userCards_codec);
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompoundRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userPuzzle_ != null) {
        if (userPuzzle_ == null) {
          userPuzzle_ = new global::Com.Proto.UserPuzzlePB();
        }
        UserPuzzle.MergeFrom(other.UserPuzzle);
      }
      userCards_.Add(other.userCards_);
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userPuzzle_ == null) {
              userPuzzle_ = new global::Com.Proto.UserPuzzlePB();
            }
            input.ReadMessage(userPuzzle_);
            break;
          }
          case 26: {
            userCards_.AddEntriesFrom(input, _repeated_userCards_codec);
            break;
          }
          case 34: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进化后选择哪个形象 cardC/chooseEvo
  /// </summary>
  public sealed partial class ChooseEvoReq : pb::IMessage<ChooseEvoReq> {
    private static readonly pb::MessageParser<ChooseEvoReq> _parser = new pb::MessageParser<ChooseEvoReq>(() => new ChooseEvoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChooseEvoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChooseEvoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChooseEvoReq(ChooseEvoReq other) : this() {
      cardId_ = other.cardId_;
      evolution_ = other.evolution_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChooseEvoReq Clone() {
      return new ChooseEvoReq(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    /// <summary>
    ///哪张卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "evolution" field.</summary>
    public const int EvolutionFieldNumber = 2;
    private global::EvolutionPB evolution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EvolutionPB Evolution {
      get { return evolution_; }
      set {
        evolution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChooseEvoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChooseEvoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (Evolution != other.Evolution) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (Evolution != 0) hash ^= Evolution.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
      if (Evolution != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Evolution);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      if (Evolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Evolution);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChooseEvoReq other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Evolution != 0) {
        Evolution = other.Evolution;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
          case 16: {
            evolution_ = (global::EvolutionPB) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChooseEvoRes : pb::IMessage<ChooseEvoRes> {
    private static readonly pb::MessageParser<ChooseEvoRes> _parser = new pb::MessageParser<ChooseEvoRes>(() => new ChooseEvoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChooseEvoRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChooseEvoRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChooseEvoRes(ChooseEvoRes other) : this() {
      ret_ = other.ret_;
      UserCard = other.userCard_ != null ? other.UserCard.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChooseEvoRes Clone() {
      return new ChooseEvoRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_card" field.</summary>
    public const int UserCardFieldNumber = 2;
    private global::Com.Proto.UserCardPB userCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserCardPB UserCard {
      get { return userCard_; }
      set {
        userCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChooseEvoRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChooseEvoRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserCard, other.UserCard)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userCard_ != null) hash ^= UserCard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCard);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChooseEvoRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userCard_ != null) {
        if (userCard_ == null) {
          userCard_ = new global::Com.Proto.UserCardPB();
        }
        UserCard.MergeFrom(other.UserCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userCard_ == null) {
              userCard_ = new global::Com.Proto.UserCardPB();
            }
            input.ReadMessage(userCard_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///消耗单个道具增加经验  cardC/addExp
  /// </summary>
  public sealed partial class AddExpReq : pb::IMessage<AddExpReq> {
    private static readonly pb::MessageParser<AddExpReq> _parser = new pb::MessageParser<AddExpReq>(() => new AddExpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddExpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpReq(AddExpReq other) : this() {
      cardId_ = other.cardId_;
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpReq Clone() {
      return new AddExpReq(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    /// <summary>
    ///哪张卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    ///道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_num" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private int itemNum_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddExpReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddExpReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddExpReq other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadSInt32();
            break;
          }
          case 24: {
            ItemNum = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddExpRes : pb::IMessage<AddExpRes> {
    private static readonly pb::MessageParser<AddExpRes> _parser = new pb::MessageParser<AddExpRes>(() => new AddExpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddExpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpRes(AddExpRes other) : this() {
      ret_ = other.ret_;
      UserCard = other.userCard_ != null ? other.UserCard.Clone() : null;
      UserItem = other.userItem_ != null ? other.UserItem.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddExpRes Clone() {
      return new AddExpRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_card" field.</summary>
    public const int UserCardFieldNumber = 2;
    private global::Com.Proto.UserCardPB userCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserCardPB UserCard {
      get { return userCard_; }
      set {
        userCard_ = value;
      }
    }

    /// <summary>Field number for the "user_item" field.</summary>
    public const int UserItemFieldNumber = 3;
    private global::Com.Proto.UserItemPB userItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserItemPB UserItem {
      get { return userItem_; }
      set {
        userItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddExpRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddExpRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserCard, other.UserCard)) return false;
      if (!object.Equals(UserItem, other.UserItem)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userCard_ != null) hash ^= UserCard.GetHashCode();
      if (userItem_ != null) hash ^= UserItem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserCard);
      }
      if (userItem_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCard);
      }
      if (userItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserItem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddExpRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userCard_ != null) {
        if (userCard_ == null) {
          userCard_ = new global::Com.Proto.UserCardPB();
        }
        UserCard.MergeFrom(other.UserCard);
      }
      if (other.userItem_ != null) {
        if (userItem_ == null) {
          userItem_ = new global::Com.Proto.UserItemPB();
        }
        UserItem.MergeFrom(other.UserItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userCard_ == null) {
              userCard_ = new global::Com.Proto.UserCardPB();
            }
            input.ReadMessage(userCard_);
            break;
          }
          case 26: {
            if (userItem_ == null) {
              userItem_ = new global::Com.Proto.UserItemPB();
            }
            input.ReadMessage(userItem_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升一级  cardC/upgrade
  /// </summary>
  public sealed partial class UpgradeReq : pb::IMessage<UpgradeReq> {
    private static readonly pb::MessageParser<UpgradeReq> _parser = new pb::MessageParser<UpgradeReq>(() => new UpgradeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeReq(UpgradeReq other) : this() {
      cardId_ = other.cardId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeReq Clone() {
      return new UpgradeReq(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    /// <summary>
    ///哪张卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0) hash ^= CardId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeReq other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpgradeRes : pb::IMessage<UpgradeRes> {
    private static readonly pb::MessageParser<UpgradeRes> _parser = new pb::MessageParser<UpgradeRes>(() => new UpgradeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCardReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeRes(UpgradeRes other) : this() {
      ret_ = other.ret_;
      UserCard = other.userCard_ != null ? other.UserCard.Clone() : null;
      userItems_ = other.userItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeRes Clone() {
      return new UpgradeRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_card" field.</summary>
    public const int UserCardFieldNumber = 2;
    private global::Com.Proto.UserCardPB userCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserCardPB UserCard {
      get { return userCard_; }
      set {
        userCard_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItems_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItems {
      get { return userItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserCard, other.UserCard)) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userCard_ != null) hash ^= UserCard.GetHashCode();
      hash ^= userItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserCard);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCard);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userCard_ != null) {
        if (userCard_ == null) {
          userCard_ = new global::Com.Proto.UserCardPB();
        }
        UserCard.MergeFrom(other.UserCard);
      }
      userItems_.Add(other.userItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userCard_ == null) {
              userCard_ = new global::Com.Proto.UserCardPB();
            }
            input.ReadMessage(userCard_);
            break;
          }
          case 26: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
