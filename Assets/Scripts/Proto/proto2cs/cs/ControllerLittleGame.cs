// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_little_game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_little_game.proto</summary>
  public static partial class ControllerLittleGameReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_little_game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerLittleGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxjb250cm9sbGVyX2xpdHRsZV9nYW1lLnByb3RvEgljb20ucHJvdG8aCmJh",
            "c2UucHJvdG8aFGJlYW5fZ2FtZV9qdW1wLnByb3RvGhBiZWFuX2F3YXJkLnBy",
            "b3RvIsYBChBHYW1lSnVtcEluZm9zUmVzEgsKA3JldBgBIAEoERIoCgVydWxl",
            "cxgCIAMoCzIZLmNvbS5wcm90by5HYW1lSnVtcFJ1bGVQQhIxCgppdGVtX3J1",
            "bGVzGAMgAygLMh0uY29tLnByb3RvLkdhbWVKdW1wSXRlbVJ1bGVQQhIzCgts",
            "ZXZlbF9ydWxlcxgEIAMoCzIeLmNvbS5wcm90by5HYW1lSnVtcExldmVsUnVs",
            "ZVBCEhMKC2RhaWx5X2NvdW50GAUgASgRIksKEk15R2FtZUp1bXBTdGFydFJl",
            "cxILCgNyZXQYASABKBESKAoFaXRlbXMYAiADKAsyGS5jb20ucHJvdG8uR2Ft",
            "ZUp1bXBJdGVtUEIiPAoQTXlHYW1lSnVtcEVuZFJlcRIoCgVpdGVtcxgBIAMo",
            "CzIZLmNvbS5wcm90by5HYW1lSnVtcEl0ZW1QQiJSChBNeUdhbWVKdW1wRW5k",
            "UmVzEgsKA3JldBgBIAEoERINCgVjb3VudBgCIAEoERIiCgZhd2FyZHMYAyAD",
            "KAsyEi5jb20ucHJvdG8uQXdhcmRQQkI9Ch9uZXQuZ2FsYXNwb3J0cy5iaWdz",
            "dGFyLnByb3RvY29sQhpMaXR0bGVHYW1lQ29udHJvbGxlclByb3Rvc2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanGameJumpReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GameJumpInfosRes), global::Com.Proto.GameJumpInfosRes.Parser, new[]{ "Ret", "Rules", "ItemRules", "LevelRules", "DailyCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyGameJumpStartRes), global::Com.Proto.MyGameJumpStartRes.Parser, new[]{ "Ret", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyGameJumpEndReq), global::Com.Proto.MyGameJumpEndReq.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyGameJumpEndRes), global::Com.Proto.MyGameJumpEndRes.Parser, new[]{ "Ret", "Count", "Awards" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///规则和数据一起请求   littleGameC/gameJumpInfos
  /// </summary>
  public sealed partial class GameJumpInfosRes : pb::IMessage<GameJumpInfosRes> {
    private static readonly pb::MessageParser<GameJumpInfosRes> _parser = new pb::MessageParser<GameJumpInfosRes>(() => new GameJumpInfosRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameJumpInfosRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerLittleGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameJumpInfosRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameJumpInfosRes(GameJumpInfosRes other) : this() {
      ret_ = other.ret_;
      rules_ = other.rules_.Clone();
      itemRules_ = other.itemRules_.Clone();
      levelRules_ = other.levelRules_.Clone();
      dailyCount_ = other.dailyCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameJumpInfosRes Clone() {
      return new GameJumpInfosRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.GameJumpRulePB> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.GameJumpRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameJumpRulePB> rules_ = new pbc::RepeatedField<global::Com.Proto.GameJumpRulePB>();
    /// <summary>
    ///游戏基本配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameJumpRulePB> Rules {
      get { return rules_; }
    }

    /// <summary>Field number for the "item_rules" field.</summary>
    public const int ItemRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.GameJumpItemRulePB> _repeated_itemRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.GameJumpItemRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameJumpItemRulePB> itemRules_ = new pbc::RepeatedField<global::Com.Proto.GameJumpItemRulePB>();
    /// <summary>
    ///道具信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameJumpItemRulePB> ItemRules {
      get { return itemRules_; }
    }

    /// <summary>Field number for the "level_rules" field.</summary>
    public const int LevelRulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.GameJumpLevelRulePB> _repeated_levelRules_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.GameJumpLevelRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameJumpLevelRulePB> levelRules_ = new pbc::RepeatedField<global::Com.Proto.GameJumpLevelRulePB>();
    /// <summary>
    ///量级信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameJumpLevelRulePB> LevelRules {
      get { return levelRules_; }
    }

    /// <summary>Field number for the "daily_count" field.</summary>
    public const int DailyCountFieldNumber = 5;
    private int dailyCount_;
    /// <summary>
    ///当日已经玩过的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyCount {
      get { return dailyCount_; }
      set {
        dailyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameJumpInfosRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameJumpInfosRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!rules_.Equals(other.rules_)) return false;
      if(!itemRules_.Equals(other.itemRules_)) return false;
      if(!levelRules_.Equals(other.levelRules_)) return false;
      if (DailyCount != other.DailyCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= rules_.GetHashCode();
      hash ^= itemRules_.GetHashCode();
      hash ^= levelRules_.GetHashCode();
      if (DailyCount != 0) hash ^= DailyCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      rules_.WriteTo(output, _repeated_rules_codec);
      itemRules_.WriteTo(output, _repeated_itemRules_codec);
      levelRules_.WriteTo(output, _repeated_levelRules_codec);
      if (DailyCount != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(DailyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += rules_.CalculateSize(_repeated_rules_codec);
      size += itemRules_.CalculateSize(_repeated_itemRules_codec);
      size += levelRules_.CalculateSize(_repeated_levelRules_codec);
      if (DailyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DailyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameJumpInfosRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      rules_.Add(other.rules_);
      itemRules_.Add(other.itemRules_);
      levelRules_.Add(other.levelRules_);
      if (other.DailyCount != 0) {
        DailyCount = other.DailyCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
          case 26: {
            itemRules_.AddEntriesFrom(input, _repeated_itemRules_codec);
            break;
          }
          case 34: {
            levelRules_.AddEntriesFrom(input, _repeated_levelRules_codec);
            break;
          }
          case 40: {
            DailyCount = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏开始 littleGameC/gameJumpStart
  /// </summary>
  public sealed partial class MyGameJumpStartRes : pb::IMessage<MyGameJumpStartRes> {
    private static readonly pb::MessageParser<MyGameJumpStartRes> _parser = new pb::MessageParser<MyGameJumpStartRes>(() => new MyGameJumpStartRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyGameJumpStartRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerLittleGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpStartRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpStartRes(MyGameJumpStartRes other) : this() {
      ret_ = other.ret_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpStartRes Clone() {
      return new MyGameJumpStartRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.GameJumpItemPB> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.GameJumpItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameJumpItemPB> items_ = new pbc::RepeatedField<global::Com.Proto.GameJumpItemPB>();
    /// <summary>
    ///随机的奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameJumpItemPB> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyGameJumpStartRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyGameJumpStartRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyGameJumpStartRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏结束 littleGameC/gameJumpEnd
  /// </summary>
  public sealed partial class MyGameJumpEndReq : pb::IMessage<MyGameJumpEndReq> {
    private static readonly pb::MessageParser<MyGameJumpEndReq> _parser = new pb::MessageParser<MyGameJumpEndReq>(() => new MyGameJumpEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyGameJumpEndReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerLittleGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpEndReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpEndReq(MyGameJumpEndReq other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpEndReq Clone() {
      return new MyGameJumpEndReq(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Proto.GameJumpItemPB> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Proto.GameJumpItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameJumpItemPB> items_ = new pbc::RepeatedField<global::Com.Proto.GameJumpItemPB>();
    /// <summary>
    ///本次获得的奖励，功能性道具就不传了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameJumpItemPB> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyGameJumpEndReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyGameJumpEndReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyGameJumpEndReq other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyGameJumpEndRes : pb::IMessage<MyGameJumpEndRes> {
    private static readonly pb::MessageParser<MyGameJumpEndRes> _parser = new pb::MessageParser<MyGameJumpEndRes>(() => new MyGameJumpEndRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyGameJumpEndRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerLittleGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpEndRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpEndRes(MyGameJumpEndRes other) : this() {
      ret_ = other.ret_;
      count_ = other.count_;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyGameJumpEndRes Clone() {
      return new MyGameJumpEndRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///当天已经参与次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///获得的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyGameJumpEndRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyGameJumpEndRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Count != other.Count) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Count);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Count);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyGameJumpEndRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 16: {
            Count = input.ReadSInt32();
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
