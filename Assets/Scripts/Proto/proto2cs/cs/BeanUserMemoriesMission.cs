// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_user_memories_mission.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_user_memories_mission.proto</summary>
  public static partial class BeanUserMemoriesMissionReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_user_memories_mission.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanUserMemoriesMissionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBiZWFuX3VzZXJfbWVtb3JpZXNfbWlzc2lvbi5wcm90bxIJY29tLnByb3Rv",
            "GgpiYXNlLnByb3RvIoABChVVc2VyTWVtb3JpZXNNaXNzaW9uUEISDwoHdXNl",
            "cl9pZBgBIAEoERISCgptaXNzaW9uX2lkGAIgASgREiAKBnN0YXR1cxgDIAEo",
            "DjIQLk1pc3Npb25TdGF0dXNQQhIQCghwcm9ncmVzcxgEIAEoEhIOCgZmaW5p",
            "c2gYBSABKBJCPAofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIZ",
            "VXNlck1lbW9yaWVzTWlzc2lvblByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UserMemoriesMissionPB), global::Com.Proto.UserMemoriesMissionPB.Parser, new[]{ "UserId", "MissionId", "Status", "Progress", "Finish" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///UserMemoriesMissionPB UserMemoriesMission
  /// </summary>
  public sealed partial class UserMemoriesMissionPB : pb::IMessage<UserMemoriesMissionPB> {
    private static readonly pb::MessageParser<UserMemoriesMissionPB> _parser = new pb::MessageParser<UserMemoriesMissionPB>(() => new UserMemoriesMissionPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserMemoriesMissionPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanUserMemoriesMissionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMemoriesMissionPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMemoriesMissionPB(UserMemoriesMissionPB other) : this() {
      userId_ = other.userId_;
      missionId_ = other.missionId_;
      status_ = other.status_;
      progress_ = other.progress_;
      finish_ = other.finish_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMemoriesMissionPB Clone() {
      return new UserMemoriesMissionPB(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 2;
    private int missionId_;
    /// <summary>
    ///任务序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::MissionStatusPB status_ = 0;
    /// <summary>
    ///任务状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MissionStatusPB Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 4;
    private long progress_;
    /// <summary>
    ///任务进度数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 5;
    private long finish_;
    /// <summary>
    ///任务完成数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserMemoriesMissionPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserMemoriesMissionPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (MissionId != other.MissionId) return false;
      if (Status != other.Status) return false;
      if (Progress != other.Progress) return false;
      if (Finish != other.Finish) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Progress != 0L) hash ^= Progress.GetHashCode();
      if (Finish != 0L) hash ^= Finish.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserId);
      }
      if (MissionId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(MissionId);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Progress != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Progress);
      }
      if (Finish != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(Finish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserId);
      }
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MissionId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Progress != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Progress);
      }
      if (Finish != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Finish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserMemoriesMissionPB other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Progress != 0L) {
        Progress = other.Progress;
      }
      if (other.Finish != 0L) {
        Finish = other.Finish;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadSInt32();
            break;
          }
          case 16: {
            MissionId = input.ReadSInt32();
            break;
          }
          case 24: {
            status_ = (global::MissionStatusPB) input.ReadEnum();
            break;
          }
          case 32: {
            Progress = input.ReadSInt64();
            break;
          }
          case 40: {
            Finish = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
