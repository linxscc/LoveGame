// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_visiting.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_visiting.proto</summary>
  public static partial class ControllerVisitingReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_visiting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerVisitingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chljb250cm9sbGVyX3Zpc2l0aW5nLnByb3RvEgljb20ucHJvdG8aCmJhc2Uu",
            "cHJvdG8aGWJlYW5fdmlzaXRpbmdfbGV2ZWwucHJvdG8aHmJlYW5fdXNlcl92",
            "aXNpdGluZ19sZXZlbC5wcm90bxoSYmVhbl93ZWF0aGVyLnByb3RvGhdiZWFu",
            "X3VzZXJfd2VhdGhlci5wcm90bxogYmVhbl9sZXZlbF9maXJzdF9wYXNzX3J1",
            "bGUucHJvdG8aImJlYW5fY2hhbGxlbmdlX2NhcmRfbnVtX3J1bGUucHJvdG8a",
            "FmJlYW5fZ2FtZV9yZXN1bHQucHJvdG8aEGJlYW5fYXdhcmQucHJvdG8aFWJl",
            "YW5fdXNlcl9wb3dlci5wcm90bxoVYmVhbl91c2VyX21vbmV5LnByb3RvGhRi",
            "ZWFuX3VzZXJfaXRlbS5wcm90byLwBAoPVmlzaXRpbmdSdWxlUmVzEgsKA3Jl",
            "dBgBIAEoERIrCg13ZWF0aGVyX3J1bGVzGAIgAygLMhQuY29tLnByb3RvLldl",
            "YXRoZXJQQhI2ChN3ZWF0aGVyX2JsZXNzX3J1bGVzGAMgAygLMhkuY29tLnBy",
            "b3RvLldlYXRoZXJCbGVzc1BCEjMKC2xldmVsX3J1bGVzGAQgAygLMh4uY29t",
            "LnByb3RvLlZpc2l0aW5nTGV2ZWxSdWxlUEISOwoWbGV2ZWxfZmlyc3RfcGFz",
            "c19ydWxlcxgFIAMoCzIbLmNvbS5wcm90by5MZXZlbEZpcnN0UGFzc1BCEjYK",
            "CnBsb3RfcnVsZXMYBiADKAsyIi5jb20ucHJvdG8uVmlzaXRpbmdMZXZlbFBs",
            "b3RSdWxlUEISPAoNY29tbWVudF9ydWxlcxgHIAMoCzIlLmNvbS5wcm90by5W",
            "aXNpdGluZ0xldmVsQ29tbWVudFJ1bGVQQhI2CgppbmZvX3J1bGVzGAggAygL",
            "MiIuY29tLnByb3RvLlZpc2l0aW5nTGV2ZWxJbmZvUnVsZVBCEjkKDmNhcmRf",
            "bnVtX3J1bGVzGAkgAygLMiEuY29tLnByb3RvLkNoYWxsZW5nZUNhcmROdW1S",
            "dWxlUEISPwoYd2VhdGhlcl9ibGVzc19jb3N0X3J1bGVzGAogAygLMh0uY29t",
            "LnByb3RvLldlYXRoZXJCbGVzc0Nvc3RQQhJPCiB2aXNpdGluZ19yZXNldF9j",
            "b25zdW1wdGlvbl9ydWxlcxgLIAMoCzIlLmNvbS5wcm90by5WaXNpdGluZ1Jl",
            "c2V0Q29uc3VtcHRpb25QQiKCAQoNTXlWaXNpdGluZ1JlcxILCgNyZXQYASAB",
            "KBESMwoLdXNlcl9sZXZlbHMYAiADKAsyHi5jb20ucHJvdG8uVXNlclZpc2l0",
            "aW5nTGV2ZWxQQhIvCg11c2VyX3dlYXRoZXJzGAMgAygLMhguY29tLnByb3Rv",
            "LlVzZXJXZWF0aGVyUEIiNAoIQmxlc3NSZXESGQoGcGxheWVyGAEgASgOMgku",
            "UGxheWVyUEISDQoFbGV2ZWwYAiABKBEicwoIQmxlc3NSZXMSCwoDcmV0GAEg",
            "ASgREi4KDHVzZXJfd2VhdGhlchgCIAEoCzIYLmNvbS5wcm90by5Vc2VyV2Vh",
            "dGhlclBCEioKCnVzZXJfbW9uZXkYAyABKAsyFi5jb20ucHJvdG8uVXNlck1v",
            "bmV5UEIiJwoTVmlzaXRpbmdCdXlDb3VudFJlcRIQCghsZXZlbF9pZBgBIAEo",
            "ESKCAQoTVmlzaXRpbmdCdXlDb3VudFJlcxILCgNyZXQYASABKBESMgoKdXNl",
            "cl9sZXZlbBgCIAEoCzIeLmNvbS5wcm90by5Vc2VyVmlzaXRpbmdMZXZlbFBC",
            "EioKCnVzZXJfbW9uZXkYAyABKAsyFi5jb20ucHJvdG8uVXNlck1vbmV5UEIi",
            "iQIKFFZpc2l0aW5nQ2hhbGxlbmdlUmVxEhAKCGxldmVsX2lkGAEgASgREhAK",
            "CGNhcmRfaWRzGAIgAygREjkKBWl0ZW1zGAMgAygLMiouY29tLnByb3RvLlZp",
            "c2l0aW5nQ2hhbGxlbmdlUmVxLkl0ZW1zRW50cnkSNwoEZmFucxgEIAMoCzIp",
            "LmNvbS5wcm90by5WaXNpdGluZ0NoYWxsZW5nZVJlcS5GYW5zRW50cnkaLAoK",
            "SXRlbXNFbnRyeRILCgNrZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBGisK",
            "CUZhbnNFbnRyeRILCgNrZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBItYB",
            "ChRWaXNpdGluZ0NoYWxsZW5nZVJlcxILCgNyZXQYASABKBESKwoKZ2FtZVJl",
            "c3VsdBgCIAEoCzIXLmNvbS5wcm90by5HYW1lUmVzdWx0UEISKgoKdXNlcl9w",
            "b3dlchgDIAEoCzIWLmNvbS5wcm90by5Vc2VyUG93ZXJQQhIoCgl1c2VyX0l0",
            "ZW0YBCADKAsyFS5jb20ucHJvdG8uVXNlckl0ZW1QQhIuCgx1c2VyX3dlYXRo",
            "ZXIYBSABKAsyGC5jb20ucHJvdG8uVXNlcldlYXRoZXJQQiIxChBWaXNpdGlu",
            "Z1N3ZWVwUmVxEhAKCGxldmVsX2lkGAEgASgREgsKA251bRgCIAEoESLcAQoQ",
            "VmlzaXRpbmdTd2VlcFJlcxILCgNyZXQYASABKBESKwoKZ2FtZVJlc3VsdBgC",
            "IAMoCzIXLmNvbS5wcm90by5HYW1lUmVzdWx0UEISKgoKdXNlcl9wb3dlchgD",
            "IAEoCzIWLmNvbS5wcm90by5Vc2VyUG93ZXJQQhIyCgp1c2VyX2xldmVsGAQg",
            "ASgLMh4uY29tLnByb3RvLlVzZXJWaXNpdGluZ0xldmVsUEISLgoMdXNlcl93",
            "ZWF0aGVyGAUgASgLMhguY29tLnByb3RvLlVzZXJXZWF0aGVyUEIiMQodR2V0",
            "VmlzaXRpbmdGaXJzdFBhc3NBd2FyZHNSZXESEAoIbGV2ZWxfaWQYASABKBEi",
            "hAEKHUdldFZpc2l0aW5nRmlyc3RQYXNzQXdhcmRzUmVzEgsKA3JldBgBIAEo",
            "ERIyCgp1c2VyX2xldmVsGAIgASgLMh4uY29tLnByb3RvLlVzZXJWaXNpdGlu",
            "Z0xldmVsUEISIgoGYXdhcmRzGAMgAygLMhIuY29tLnByb3RvLkF3YXJkUEJC",
            "OwofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIYVmlzaXRpbmdD",
            "b250cm9sbGVyUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanVisitingLevelReflection.Descriptor, global::Com.Proto.BeanUserVisitingLevelReflection.Descriptor, global::Com.Proto.BeanWeatherReflection.Descriptor, global::Com.Proto.BeanUserWeatherReflection.Descriptor, global::Com.Proto.BeanLevelFirstPassRuleReflection.Descriptor, global::Com.Proto.BeanChallengeCardNumRuleReflection.Descriptor, global::Com.Proto.BeanGameResultReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanUserPowerReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingRuleRes), global::Com.Proto.VisitingRuleRes.Parser, new[]{ "Ret", "WeatherRules", "WeatherBlessRules", "LevelRules", "LevelFirstPassRules", "PlotRules", "CommentRules", "InfoRules", "CardNumRules", "WeatherBlessCostRules", "VisitingResetConsumptionRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyVisitingRes), global::Com.Proto.MyVisitingRes.Parser, new[]{ "Ret", "UserLevels", "UserWeathers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BlessReq), global::Com.Proto.BlessReq.Parser, new[]{ "Player", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BlessRes), global::Com.Proto.BlessRes.Parser, new[]{ "Ret", "UserWeather", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingBuyCountReq), global::Com.Proto.VisitingBuyCountReq.Parser, new[]{ "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingBuyCountRes), global::Com.Proto.VisitingBuyCountRes.Parser, new[]{ "Ret", "UserLevel", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingChallengeReq), global::Com.Proto.VisitingChallengeReq.Parser, new[]{ "LevelId", "CardIds", "Items", "Fans" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingChallengeRes), global::Com.Proto.VisitingChallengeRes.Parser, new[]{ "Ret", "GameResult", "UserPower", "UserItem", "UserWeather" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingSweepReq), global::Com.Proto.VisitingSweepReq.Parser, new[]{ "LevelId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.VisitingSweepRes), global::Com.Proto.VisitingSweepRes.Parser, new[]{ "Ret", "GameResult", "UserPower", "UserLevel", "UserWeather" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GetVisitingFirstPassAwardsReq), global::Com.Proto.GetVisitingFirstPassAwardsReq.Parser, new[]{ "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GetVisitingFirstPassAwardsRes), global::Com.Proto.GetVisitingFirstPassAwardsRes.Parser, new[]{ "Ret", "UserLevel", "Awards" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///规则   visitingC/rules
  /// </summary>
  public sealed partial class VisitingRuleRes : pb::IMessage<VisitingRuleRes> {
    private static readonly pb::MessageParser<VisitingRuleRes> _parser = new pb::MessageParser<VisitingRuleRes>(() => new VisitingRuleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingRuleRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingRuleRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingRuleRes(VisitingRuleRes other) : this() {
      ret_ = other.ret_;
      weatherRules_ = other.weatherRules_.Clone();
      weatherBlessRules_ = other.weatherBlessRules_.Clone();
      levelRules_ = other.levelRules_.Clone();
      levelFirstPassRules_ = other.levelFirstPassRules_.Clone();
      plotRules_ = other.plotRules_.Clone();
      commentRules_ = other.commentRules_.Clone();
      infoRules_ = other.infoRules_.Clone();
      cardNumRules_ = other.cardNumRules_.Clone();
      weatherBlessCostRules_ = other.weatherBlessCostRules_.Clone();
      visitingResetConsumptionRules_ = other.visitingResetConsumptionRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingRuleRes Clone() {
      return new VisitingRuleRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "weather_rules" field.</summary>
    public const int WeatherRulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.WeatherPB> _repeated_weatherRules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.WeatherPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.WeatherPB> weatherRules_ = new pbc::RepeatedField<global::Com.Proto.WeatherPB>();
    /// <summary>
    ///天气规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.WeatherPB> WeatherRules {
      get { return weatherRules_; }
    }

    /// <summary>Field number for the "weather_bless_rules" field.</summary>
    public const int WeatherBlessRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.WeatherBlessPB> _repeated_weatherBlessRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.WeatherBlessPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.WeatherBlessPB> weatherBlessRules_ = new pbc::RepeatedField<global::Com.Proto.WeatherBlessPB>();
    /// <summary>
    ///祈福规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.WeatherBlessPB> WeatherBlessRules {
      get { return weatherBlessRules_; }
    }

    /// <summary>Field number for the "level_rules" field.</summary>
    public const int LevelRulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.VisitingLevelRulePB> _repeated_levelRules_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.VisitingLevelRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.VisitingLevelRulePB> levelRules_ = new pbc::RepeatedField<global::Com.Proto.VisitingLevelRulePB>();
    /// <summary>
    ///关卡规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.VisitingLevelRulePB> LevelRules {
      get { return levelRules_; }
    }

    /// <summary>Field number for the "level_first_pass_rules" field.</summary>
    public const int LevelFirstPassRulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.LevelFirstPassPB> _repeated_levelFirstPassRules_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.LevelFirstPassPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.LevelFirstPassPB> levelFirstPassRules_ = new pbc::RepeatedField<global::Com.Proto.LevelFirstPassPB>();
    /// <summary>
    ///关卡首通规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.LevelFirstPassPB> LevelFirstPassRules {
      get { return levelFirstPassRules_; }
    }

    /// <summary>Field number for the "plot_rules" field.</summary>
    public const int PlotRulesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Proto.VisitingLevelPlotRulePB> _repeated_plotRules_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Proto.VisitingLevelPlotRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.VisitingLevelPlotRulePB> plotRules_ = new pbc::RepeatedField<global::Com.Proto.VisitingLevelPlotRulePB>();
    /// <summary>
    ///关卡剧情文案规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.VisitingLevelPlotRulePB> PlotRules {
      get { return plotRules_; }
    }

    /// <summary>Field number for the "comment_rules" field.</summary>
    public const int CommentRulesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Proto.VisitingLevelCommentRulePB> _repeated_commentRules_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Proto.VisitingLevelCommentRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.VisitingLevelCommentRulePB> commentRules_ = new pbc::RepeatedField<global::Com.Proto.VisitingLevelCommentRulePB>();
    /// <summary>
    ///关卡评论规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.VisitingLevelCommentRulePB> CommentRules {
      get { return commentRules_; }
    }

    /// <summary>Field number for the "info_rules" field.</summary>
    public const int InfoRulesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Com.Proto.VisitingLevelInfoRulePB> _repeated_infoRules_codec
        = pb::FieldCodec.ForMessage(66, global::Com.Proto.VisitingLevelInfoRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.VisitingLevelInfoRulePB> infoRules_ = new pbc::RepeatedField<global::Com.Proto.VisitingLevelInfoRulePB>();
    /// <summary>
    ///关卡信息表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.VisitingLevelInfoRulePB> InfoRules {
      get { return infoRules_; }
    }

    /// <summary>Field number for the "card_num_rules" field.</summary>
    public const int CardNumRulesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Com.Proto.ChallengeCardNumRulePB> _repeated_cardNumRules_codec
        = pb::FieldCodec.ForMessage(74, global::Com.Proto.ChallengeCardNumRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ChallengeCardNumRulePB> cardNumRules_ = new pbc::RepeatedField<global::Com.Proto.ChallengeCardNumRulePB>();
    /// <summary>
    ///挑战开放卡牌数量规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ChallengeCardNumRulePB> CardNumRules {
      get { return cardNumRules_; }
    }

    /// <summary>Field number for the "weather_bless_cost_rules" field.</summary>
    public const int WeatherBlessCostRulesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Com.Proto.WeatherBlessCostPB> _repeated_weatherBlessCostRules_codec
        = pb::FieldCodec.ForMessage(82, global::Com.Proto.WeatherBlessCostPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.WeatherBlessCostPB> weatherBlessCostRules_ = new pbc::RepeatedField<global::Com.Proto.WeatherBlessCostPB>();
    /// <summary>
    ///祈福花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.WeatherBlessCostPB> WeatherBlessCostRules {
      get { return weatherBlessCostRules_; }
    }

    /// <summary>Field number for the "visiting_reset_consumption_rules" field.</summary>
    public const int VisitingResetConsumptionRulesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Com.Proto.VisitingResetConsumptionPB> _repeated_visitingResetConsumptionRules_codec
        = pb::FieldCodec.ForMessage(90, global::Com.Proto.VisitingResetConsumptionPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.VisitingResetConsumptionPB> visitingResetConsumptionRules_ = new pbc::RepeatedField<global::Com.Proto.VisitingResetConsumptionPB>();
    /// <summary>
    ///重置关卡消耗宝石规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.VisitingResetConsumptionPB> VisitingResetConsumptionRules {
      get { return visitingResetConsumptionRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingRuleRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingRuleRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!weatherRules_.Equals(other.weatherRules_)) return false;
      if(!weatherBlessRules_.Equals(other.weatherBlessRules_)) return false;
      if(!levelRules_.Equals(other.levelRules_)) return false;
      if(!levelFirstPassRules_.Equals(other.levelFirstPassRules_)) return false;
      if(!plotRules_.Equals(other.plotRules_)) return false;
      if(!commentRules_.Equals(other.commentRules_)) return false;
      if(!infoRules_.Equals(other.infoRules_)) return false;
      if(!cardNumRules_.Equals(other.cardNumRules_)) return false;
      if(!weatherBlessCostRules_.Equals(other.weatherBlessCostRules_)) return false;
      if(!visitingResetConsumptionRules_.Equals(other.visitingResetConsumptionRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= weatherRules_.GetHashCode();
      hash ^= weatherBlessRules_.GetHashCode();
      hash ^= levelRules_.GetHashCode();
      hash ^= levelFirstPassRules_.GetHashCode();
      hash ^= plotRules_.GetHashCode();
      hash ^= commentRules_.GetHashCode();
      hash ^= infoRules_.GetHashCode();
      hash ^= cardNumRules_.GetHashCode();
      hash ^= weatherBlessCostRules_.GetHashCode();
      hash ^= visitingResetConsumptionRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      weatherRules_.WriteTo(output, _repeated_weatherRules_codec);
      weatherBlessRules_.WriteTo(output, _repeated_weatherBlessRules_codec);
      levelRules_.WriteTo(output, _repeated_levelRules_codec);
      levelFirstPassRules_.WriteTo(output, _repeated_levelFirstPassRules_codec);
      plotRules_.WriteTo(output, _repeated_plotRules_codec);
      commentRules_.WriteTo(output, _repeated_commentRules_codec);
      infoRules_.WriteTo(output, _repeated_infoRules_codec);
      cardNumRules_.WriteTo(output, _repeated_cardNumRules_codec);
      weatherBlessCostRules_.WriteTo(output, _repeated_weatherBlessCostRules_codec);
      visitingResetConsumptionRules_.WriteTo(output, _repeated_visitingResetConsumptionRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += weatherRules_.CalculateSize(_repeated_weatherRules_codec);
      size += weatherBlessRules_.CalculateSize(_repeated_weatherBlessRules_codec);
      size += levelRules_.CalculateSize(_repeated_levelRules_codec);
      size += levelFirstPassRules_.CalculateSize(_repeated_levelFirstPassRules_codec);
      size += plotRules_.CalculateSize(_repeated_plotRules_codec);
      size += commentRules_.CalculateSize(_repeated_commentRules_codec);
      size += infoRules_.CalculateSize(_repeated_infoRules_codec);
      size += cardNumRules_.CalculateSize(_repeated_cardNumRules_codec);
      size += weatherBlessCostRules_.CalculateSize(_repeated_weatherBlessCostRules_codec);
      size += visitingResetConsumptionRules_.CalculateSize(_repeated_visitingResetConsumptionRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingRuleRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      weatherRules_.Add(other.weatherRules_);
      weatherBlessRules_.Add(other.weatherBlessRules_);
      levelRules_.Add(other.levelRules_);
      levelFirstPassRules_.Add(other.levelFirstPassRules_);
      plotRules_.Add(other.plotRules_);
      commentRules_.Add(other.commentRules_);
      infoRules_.Add(other.infoRules_);
      cardNumRules_.Add(other.cardNumRules_);
      weatherBlessCostRules_.Add(other.weatherBlessCostRules_);
      visitingResetConsumptionRules_.Add(other.visitingResetConsumptionRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            weatherRules_.AddEntriesFrom(input, _repeated_weatherRules_codec);
            break;
          }
          case 26: {
            weatherBlessRules_.AddEntriesFrom(input, _repeated_weatherBlessRules_codec);
            break;
          }
          case 34: {
            levelRules_.AddEntriesFrom(input, _repeated_levelRules_codec);
            break;
          }
          case 42: {
            levelFirstPassRules_.AddEntriesFrom(input, _repeated_levelFirstPassRules_codec);
            break;
          }
          case 50: {
            plotRules_.AddEntriesFrom(input, _repeated_plotRules_codec);
            break;
          }
          case 58: {
            commentRules_.AddEntriesFrom(input, _repeated_commentRules_codec);
            break;
          }
          case 66: {
            infoRules_.AddEntriesFrom(input, _repeated_infoRules_codec);
            break;
          }
          case 74: {
            cardNumRules_.AddEntriesFrom(input, _repeated_cardNumRules_codec);
            break;
          }
          case 82: {
            weatherBlessCostRules_.AddEntriesFrom(input, _repeated_weatherBlessCostRules_codec);
            break;
          }
          case 90: {
            visitingResetConsumptionRules_.AddEntriesFrom(input, _repeated_visitingResetConsumptionRules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户数据 visitingC/myVisitings
  /// </summary>
  public sealed partial class MyVisitingRes : pb::IMessage<MyVisitingRes> {
    private static readonly pb::MessageParser<MyVisitingRes> _parser = new pb::MessageParser<MyVisitingRes>(() => new MyVisitingRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyVisitingRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyVisitingRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyVisitingRes(MyVisitingRes other) : this() {
      ret_ = other.ret_;
      userLevels_ = other.userLevels_.Clone();
      userWeathers_ = other.userWeathers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyVisitingRes Clone() {
      return new MyVisitingRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_levels" field.</summary>
    public const int UserLevelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserVisitingLevelPB> _repeated_userLevels_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserVisitingLevelPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserVisitingLevelPB> userLevels_ = new pbc::RepeatedField<global::Com.Proto.UserVisitingLevelPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserVisitingLevelPB> UserLevels {
      get { return userLevels_; }
    }

    /// <summary>Field number for the "user_weathers" field.</summary>
    public const int UserWeathersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserWeatherPB> _repeated_userWeathers_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserWeatherPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserWeatherPB> userWeathers_ = new pbc::RepeatedField<global::Com.Proto.UserWeatherPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserWeatherPB> UserWeathers {
      get { return userWeathers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyVisitingRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyVisitingRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userLevels_.Equals(other.userLevels_)) return false;
      if(!userWeathers_.Equals(other.userWeathers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userLevels_.GetHashCode();
      hash ^= userWeathers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userLevels_.WriteTo(output, _repeated_userLevels_codec);
      userWeathers_.WriteTo(output, _repeated_userWeathers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userLevels_.CalculateSize(_repeated_userLevels_codec);
      size += userWeathers_.CalculateSize(_repeated_userWeathers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyVisitingRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userLevels_.Add(other.userLevels_);
      userWeathers_.Add(other.userWeathers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userLevels_.AddEntriesFrom(input, _repeated_userLevels_codec);
            break;
          }
          case 26: {
            userWeathers_.AddEntriesFrom(input, _repeated_userWeathers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///祈福 visitingC/bless
  /// </summary>
  public sealed partial class BlessReq : pb::IMessage<BlessReq> {
    private static readonly pb::MessageParser<BlessReq> _parser = new pb::MessageParser<BlessReq>(() => new BlessReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlessReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlessReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlessReq(BlessReq other) : this() {
      player_ = other.player_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlessReq Clone() {
      return new BlessReq(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::PlayerPB player_ = 0;
    /// <summary>
    ///男主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///操作等级 0最好  1是同样  2是随机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlessReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlessReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Player);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlessReq other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            player_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlessRes : pb::IMessage<BlessRes> {
    private static readonly pb::MessageParser<BlessRes> _parser = new pb::MessageParser<BlessRes>(() => new BlessRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlessRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlessRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlessRes(BlessRes other) : this() {
      ret_ = other.ret_;
      UserWeather = other.userWeather_ != null ? other.UserWeather.Clone() : null;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlessRes Clone() {
      return new BlessRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_weather" field.</summary>
    public const int UserWeatherFieldNumber = 2;
    private global::Com.Proto.UserWeatherPB userWeather_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserWeatherPB UserWeather {
      get { return userWeather_; }
      set {
        userWeather_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private global::Com.Proto.UserMoneyPB userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlessRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlessRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserWeather, other.UserWeather)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userWeather_ != null) hash ^= UserWeather.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userWeather_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserWeather);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userWeather_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserWeather);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlessRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userWeather_ != null) {
        if (userWeather_ == null) {
          userWeather_ = new global::Com.Proto.UserWeatherPB();
        }
        UserWeather.MergeFrom(other.UserWeather);
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userWeather_ == null) {
              userWeather_ = new global::Com.Proto.UserWeatherPB();
            }
            input.ReadMessage(userWeather_);
            break;
          }
          case 26: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置挑战次数 visitingC/resetLevel
  /// </summary>
  public sealed partial class VisitingBuyCountReq : pb::IMessage<VisitingBuyCountReq> {
    private static readonly pb::MessageParser<VisitingBuyCountReq> _parser = new pb::MessageParser<VisitingBuyCountReq>(() => new VisitingBuyCountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingBuyCountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingBuyCountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingBuyCountReq(VisitingBuyCountReq other) : this() {
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingBuyCountReq Clone() {
      return new VisitingBuyCountReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingBuyCountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingBuyCountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingBuyCountReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitingBuyCountRes : pb::IMessage<VisitingBuyCountRes> {
    private static readonly pb::MessageParser<VisitingBuyCountRes> _parser = new pb::MessageParser<VisitingBuyCountRes>(() => new VisitingBuyCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingBuyCountRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingBuyCountRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingBuyCountRes(VisitingBuyCountRes other) : this() {
      ret_ = other.ret_;
      UserLevel = other.userLevel_ != null ? other.UserLevel.Clone() : null;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingBuyCountRes Clone() {
      return new VisitingBuyCountRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 2;
    private global::Com.Proto.UserVisitingLevelPB userLevel_;
    /// <summary>
    ///关卡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserVisitingLevelPB UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private global::Com.Proto.UserMoneyPB userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingBuyCountRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingBuyCountRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserLevel, other.UserLevel)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userLevel_ != null) hash ^= UserLevel.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userLevel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserLevel);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevel);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingBuyCountRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userLevel_ != null) {
        if (userLevel_ == null) {
          userLevel_ = new global::Com.Proto.UserVisitingLevelPB();
        }
        UserLevel.MergeFrom(other.UserLevel);
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userLevel_ == null) {
              userLevel_ = new global::Com.Proto.UserVisitingLevelPB();
            }
            input.ReadMessage(userLevel_);
            break;
          }
          case 26: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///挑战 visitingC/challenge
  /// </summary>
  public sealed partial class VisitingChallengeReq : pb::IMessage<VisitingChallengeReq> {
    private static readonly pb::MessageParser<VisitingChallengeReq> _parser = new pb::MessageParser<VisitingChallengeReq>(() => new VisitingChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingChallengeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingChallengeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingChallengeReq(VisitingChallengeReq other) : this() {
      levelId_ = other.levelId_;
      cardIds_ = other.cardIds_.Clone();
      items_ = other.items_.Clone();
      fans_ = other.fans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingChallengeReq Clone() {
      return new VisitingChallengeReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "card_ids" field.</summary>
    public const int CardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_items_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 26);
    private readonly pbc::MapField<int, int> items_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 4;
    private static readonly pbc::MapField<int, int>.Codec _map_fans_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 34);
    private readonly pbc::MapField<int, int> fans_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Fans {
      get { return fans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingChallengeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingChallengeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (!Items.Equals(other.Items)) return false;
      if (!Fans.Equals(other.Fans)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      hash ^= Items.GetHashCode();
      hash ^= Fans.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      items_.WriteTo(output, _map_items_codec);
      fans_.WriteTo(output, _map_fans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      size += items_.CalculateSize(_map_items_codec);
      size += fans_.CalculateSize(_map_fans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingChallengeReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      cardIds_.Add(other.cardIds_);
      items_.Add(other.items_);
      fans_.Add(other.fans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 18:
          case 16: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
          case 34: {
            fans_.AddEntriesFrom(input, _map_fans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitingChallengeRes : pb::IMessage<VisitingChallengeRes> {
    private static readonly pb::MessageParser<VisitingChallengeRes> _parser = new pb::MessageParser<VisitingChallengeRes>(() => new VisitingChallengeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingChallengeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingChallengeRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingChallengeRes(VisitingChallengeRes other) : this() {
      ret_ = other.ret_;
      GameResult = other.gameResult_ != null ? other.GameResult.Clone() : null;
      UserPower = other.userPower_ != null ? other.UserPower.Clone() : null;
      userItem_ = other.userItem_.Clone();
      UserWeather = other.userWeather_ != null ? other.UserWeather.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingChallengeRes Clone() {
      return new VisitingChallengeRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "gameResult" field.</summary>
    public const int GameResultFieldNumber = 2;
    private global::Com.Proto.GameResultPB gameResult_;
    /// <summary>
    ///比赛结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.GameResultPB GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    /// <summary>Field number for the "user_power" field.</summary>
    public const int UserPowerFieldNumber = 3;
    private global::Com.Proto.UserPowerPB userPower_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserPowerPB UserPower {
      get { return userPower_; }
      set {
        userPower_ = value;
      }
    }

    /// <summary>Field number for the "user_Item" field.</summary>
    public const int UserItemFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItem_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItem_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    /// <summary>
    ///道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItem {
      get { return userItem_; }
    }

    /// <summary>Field number for the "user_weather" field.</summary>
    public const int UserWeatherFieldNumber = 5;
    private global::Com.Proto.UserWeatherPB userWeather_;
    /// <summary>
    ///天气挑战使用情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserWeatherPB UserWeather {
      get { return userWeather_; }
      set {
        userWeather_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingChallengeRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingChallengeRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(GameResult, other.GameResult)) return false;
      if (!object.Equals(UserPower, other.UserPower)) return false;
      if(!userItem_.Equals(other.userItem_)) return false;
      if (!object.Equals(UserWeather, other.UserWeather)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (gameResult_ != null) hash ^= GameResult.GetHashCode();
      if (userPower_ != null) hash ^= UserPower.GetHashCode();
      hash ^= userItem_.GetHashCode();
      if (userWeather_ != null) hash ^= UserWeather.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (gameResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameResult);
      }
      if (userPower_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserPower);
      }
      userItem_.WriteTo(output, _repeated_userItem_codec);
      if (userWeather_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserWeather);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPower);
      }
      size += userItem_.CalculateSize(_repeated_userItem_codec);
      if (userWeather_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserWeather);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingChallengeRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.gameResult_ != null) {
        if (gameResult_ == null) {
          gameResult_ = new global::Com.Proto.GameResultPB();
        }
        GameResult.MergeFrom(other.GameResult);
      }
      if (other.userPower_ != null) {
        if (userPower_ == null) {
          userPower_ = new global::Com.Proto.UserPowerPB();
        }
        UserPower.MergeFrom(other.UserPower);
      }
      userItem_.Add(other.userItem_);
      if (other.userWeather_ != null) {
        if (userWeather_ == null) {
          userWeather_ = new global::Com.Proto.UserWeatherPB();
        }
        UserWeather.MergeFrom(other.UserWeather);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (gameResult_ == null) {
              gameResult_ = new global::Com.Proto.GameResultPB();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 26: {
            if (userPower_ == null) {
              userPower_ = new global::Com.Proto.UserPowerPB();
            }
            input.ReadMessage(userPower_);
            break;
          }
          case 34: {
            userItem_.AddEntriesFrom(input, _repeated_userItem_codec);
            break;
          }
          case 42: {
            if (userWeather_ == null) {
              userWeather_ = new global::Com.Proto.UserWeatherPB();
            }
            input.ReadMessage(userWeather_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///扫荡 visitingC/sweepRes
  /// </summary>
  public sealed partial class VisitingSweepReq : pb::IMessage<VisitingSweepReq> {
    private static readonly pb::MessageParser<VisitingSweepReq> _parser = new pb::MessageParser<VisitingSweepReq>(() => new VisitingSweepReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingSweepReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingSweepReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingSweepReq(VisitingSweepReq other) : this() {
      levelId_ = other.levelId_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingSweepReq Clone() {
      return new VisitingSweepReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingSweepReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingSweepReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingSweepReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 16: {
            Num = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisitingSweepRes : pb::IMessage<VisitingSweepRes> {
    private static readonly pb::MessageParser<VisitingSweepRes> _parser = new pb::MessageParser<VisitingSweepRes>(() => new VisitingSweepRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisitingSweepRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingSweepRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingSweepRes(VisitingSweepRes other) : this() {
      ret_ = other.ret_;
      gameResult_ = other.gameResult_.Clone();
      UserPower = other.userPower_ != null ? other.UserPower.Clone() : null;
      UserLevel = other.userLevel_ != null ? other.UserLevel.Clone() : null;
      UserWeather = other.userWeather_ != null ? other.UserWeather.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisitingSweepRes Clone() {
      return new VisitingSweepRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "gameResult" field.</summary>
    public const int GameResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.GameResultPB> _repeated_gameResult_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.GameResultPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameResultPB> gameResult_ = new pbc::RepeatedField<global::Com.Proto.GameResultPB>();
    /// <summary>
    ///比赛结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameResultPB> GameResult {
      get { return gameResult_; }
    }

    /// <summary>Field number for the "user_power" field.</summary>
    public const int UserPowerFieldNumber = 3;
    private global::Com.Proto.UserPowerPB userPower_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserPowerPB UserPower {
      get { return userPower_; }
      set {
        userPower_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 4;
    private global::Com.Proto.UserVisitingLevelPB userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserVisitingLevelPB UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_weather" field.</summary>
    public const int UserWeatherFieldNumber = 5;
    private global::Com.Proto.UserWeatherPB userWeather_;
    /// <summary>
    ///天气挑战使用情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserWeatherPB UserWeather {
      get { return userWeather_; }
      set {
        userWeather_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisitingSweepRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisitingSweepRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!gameResult_.Equals(other.gameResult_)) return false;
      if (!object.Equals(UserPower, other.UserPower)) return false;
      if (!object.Equals(UserLevel, other.UserLevel)) return false;
      if (!object.Equals(UserWeather, other.UserWeather)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= gameResult_.GetHashCode();
      if (userPower_ != null) hash ^= UserPower.GetHashCode();
      if (userLevel_ != null) hash ^= UserLevel.GetHashCode();
      if (userWeather_ != null) hash ^= UserWeather.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      gameResult_.WriteTo(output, _repeated_gameResult_codec);
      if (userPower_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserPower);
      }
      if (userLevel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserLevel);
      }
      if (userWeather_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserWeather);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += gameResult_.CalculateSize(_repeated_gameResult_codec);
      if (userPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPower);
      }
      if (userLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevel);
      }
      if (userWeather_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserWeather);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisitingSweepRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      gameResult_.Add(other.gameResult_);
      if (other.userPower_ != null) {
        if (userPower_ == null) {
          userPower_ = new global::Com.Proto.UserPowerPB();
        }
        UserPower.MergeFrom(other.UserPower);
      }
      if (other.userLevel_ != null) {
        if (userLevel_ == null) {
          userLevel_ = new global::Com.Proto.UserVisitingLevelPB();
        }
        UserLevel.MergeFrom(other.UserLevel);
      }
      if (other.userWeather_ != null) {
        if (userWeather_ == null) {
          userWeather_ = new global::Com.Proto.UserWeatherPB();
        }
        UserWeather.MergeFrom(other.UserWeather);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            gameResult_.AddEntriesFrom(input, _repeated_gameResult_codec);
            break;
          }
          case 26: {
            if (userPower_ == null) {
              userPower_ = new global::Com.Proto.UserPowerPB();
            }
            input.ReadMessage(userPower_);
            break;
          }
          case 34: {
            if (userLevel_ == null) {
              userLevel_ = new global::Com.Proto.UserVisitingLevelPB();
            }
            input.ReadMessage(userLevel_);
            break;
          }
          case 42: {
            if (userWeather_ == null) {
              userWeather_ = new global::Com.Proto.UserWeatherPB();
            }
            input.ReadMessage(userWeather_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 领取首通奖励  visitingC/getFirstPassAwards
  /// </summary>
  public sealed partial class GetVisitingFirstPassAwardsReq : pb::IMessage<GetVisitingFirstPassAwardsReq> {
    private static readonly pb::MessageParser<GetVisitingFirstPassAwardsReq> _parser = new pb::MessageParser<GetVisitingFirstPassAwardsReq>(() => new GetVisitingFirstPassAwardsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVisitingFirstPassAwardsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVisitingFirstPassAwardsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVisitingFirstPassAwardsReq(GetVisitingFirstPassAwardsReq other) : this() {
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVisitingFirstPassAwardsReq Clone() {
      return new GetVisitingFirstPassAwardsReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVisitingFirstPassAwardsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVisitingFirstPassAwardsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVisitingFirstPassAwardsReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetVisitingFirstPassAwardsRes : pb::IMessage<GetVisitingFirstPassAwardsRes> {
    private static readonly pb::MessageParser<GetVisitingFirstPassAwardsRes> _parser = new pb::MessageParser<GetVisitingFirstPassAwardsRes>(() => new GetVisitingFirstPassAwardsRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVisitingFirstPassAwardsRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerVisitingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVisitingFirstPassAwardsRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVisitingFirstPassAwardsRes(GetVisitingFirstPassAwardsRes other) : this() {
      ret_ = other.ret_;
      UserLevel = other.userLevel_ != null ? other.UserLevel.Clone() : null;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVisitingFirstPassAwardsRes Clone() {
      return new GetVisitingFirstPassAwardsRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 2;
    private global::Com.Proto.UserVisitingLevelPB userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserVisitingLevelPB UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVisitingFirstPassAwardsRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVisitingFirstPassAwardsRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserLevel, other.UserLevel)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userLevel_ != null) hash ^= UserLevel.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userLevel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserLevel);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevel);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVisitingFirstPassAwardsRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userLevel_ != null) {
        if (userLevel_ == null) {
          userLevel_ = new global::Com.Proto.UserVisitingLevelPB();
        }
        UserLevel.MergeFrom(other.UserLevel);
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userLevel_ == null) {
              userLevel_ = new global::Com.Proto.UserVisitingLevelPB();
            }
            input.ReadMessage(userLevel_);
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
