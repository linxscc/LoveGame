// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_coax_sleep.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_coax_sleep.proto</summary>
  public static partial class ControllerCoaxSleepReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_coax_sleep.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerCoaxSleepReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtjb250cm9sbGVyX2NvYXhfc2xlZXAucHJvdG8SCWNvbS5wcm90bxoKYmFz",
            "ZS5wcm90bxofYmVhbl91c2VyX2NvYXhfc2xlZXBfaW5mby5wcm90bxogYmVh",
            "bl9jb2F4X3NsZWVwX2F1ZGlvX3J1bGUucHJvdG8aFWJlYW5fdXNlcl9tb25l",
            "eS5wcm90byJhChFDb2F4U2xlZXBSdWxlc1JlcxILCgNyZXQYASABKBESPwoW",
            "Y29heF9zbGVlcF9hdWRpb19ydWxlcxgCIAMoCzIfLmNvbS5wcm90by5Db2F4",
            "U2xlZXBBdWRpb1J1bGVQQiJfChFDb2F4U2xlZXBJbmZvc1JlcxILCgNyZXQY",
            "ASABKBESPQoVdXNlcl9jb2F4X3NsZWVwX2luZm9zGAIgAygLMh4uY29tLnBy",
            "b3RvLlVzZXJDb2F4U2xlZXBJbmZvUEIiKwoXVW5sb2NrQ29heFNsZWVwQXVk",
            "aW9SZXESEAoIYXVkaW9faWQYASABKBEikAEKF1VubG9ja0NvYXhTbGVlcEF1",
            "ZGlvUmVzEgsKA3JldBgBIAEoERI8ChR1c2VyX2NvYXhfc2xlZXBfaW5mbxgC",
            "IAEoCzIeLmNvbS5wcm90by5Vc2VyQ29heFNsZWVwSW5mb1BCEioKCnVzZXJf",
            "bW9uZXkYAyABKAsyFi5jb20ucHJvdG8uVXNlck1vbmV5UEJCPAofbmV0Lmdh",
            "bGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIZQ29heFNsZWVwQ29udHJvbGxl",
            "clByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanUserCoaxSleepInfoReflection.Descriptor, global::Com.Proto.BeanCoaxSleepAudioRuleReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CoaxSleepRulesRes), global::Com.Proto.CoaxSleepRulesRes.Parser, new[]{ "Ret", "CoaxSleepAudioRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CoaxSleepInfosRes), global::Com.Proto.CoaxSleepInfosRes.Parser, new[]{ "Ret", "UserCoaxSleepInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UnlockCoaxSleepAudioReq), global::Com.Proto.UnlockCoaxSleepAudioReq.Parser, new[]{ "AudioId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.UnlockCoaxSleepAudioRes), global::Com.Proto.UnlockCoaxSleepAudioRes.Parser, new[]{ "Ret", "UserCoaxSleepInfo", "UserMoney" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CoaxSleepRulesRes : pb::IMessage<CoaxSleepRulesRes> {
    private static readonly pb::MessageParser<CoaxSleepRulesRes> _parser = new pb::MessageParser<CoaxSleepRulesRes>(() => new CoaxSleepRulesRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoaxSleepRulesRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCoaxSleepReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepRulesRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepRulesRes(CoaxSleepRulesRes other) : this() {
      ret_ = other.ret_;
      coaxSleepAudioRules_ = other.coaxSleepAudioRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepRulesRes Clone() {
      return new CoaxSleepRulesRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///返回状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "coax_sleep_audio_rules" field.</summary>
    public const int CoaxSleepAudioRulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.CoaxSleepAudioRulePB> _repeated_coaxSleepAudioRules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.CoaxSleepAudioRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CoaxSleepAudioRulePB> coaxSleepAudioRules_ = new pbc::RepeatedField<global::Com.Proto.CoaxSleepAudioRulePB>();
    /// <summary>
    ///哄睡音频规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CoaxSleepAudioRulePB> CoaxSleepAudioRules {
      get { return coaxSleepAudioRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoaxSleepRulesRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoaxSleepRulesRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!coaxSleepAudioRules_.Equals(other.coaxSleepAudioRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= coaxSleepAudioRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      coaxSleepAudioRules_.WriteTo(output, _repeated_coaxSleepAudioRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += coaxSleepAudioRules_.CalculateSize(_repeated_coaxSleepAudioRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoaxSleepRulesRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      coaxSleepAudioRules_.Add(other.coaxSleepAudioRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            coaxSleepAudioRules_.AddEntriesFrom(input, _repeated_coaxSleepAudioRules_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoaxSleepInfosRes : pb::IMessage<CoaxSleepInfosRes> {
    private static readonly pb::MessageParser<CoaxSleepInfosRes> _parser = new pb::MessageParser<CoaxSleepInfosRes>(() => new CoaxSleepInfosRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoaxSleepInfosRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCoaxSleepReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepInfosRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepInfosRes(CoaxSleepInfosRes other) : this() {
      ret_ = other.ret_;
      userCoaxSleepInfos_ = other.userCoaxSleepInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepInfosRes Clone() {
      return new CoaxSleepInfosRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///返回状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_coax_sleep_infos" field.</summary>
    public const int UserCoaxSleepInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserCoaxSleepInfoPB> _repeated_userCoaxSleepInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserCoaxSleepInfoPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserCoaxSleepInfoPB> userCoaxSleepInfos_ = new pbc::RepeatedField<global::Com.Proto.UserCoaxSleepInfoPB>();
    /// <summary>
    ///玩家用户哄睡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserCoaxSleepInfoPB> UserCoaxSleepInfos {
      get { return userCoaxSleepInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoaxSleepInfosRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoaxSleepInfosRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userCoaxSleepInfos_.Equals(other.userCoaxSleepInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userCoaxSleepInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userCoaxSleepInfos_.WriteTo(output, _repeated_userCoaxSleepInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userCoaxSleepInfos_.CalculateSize(_repeated_userCoaxSleepInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoaxSleepInfosRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userCoaxSleepInfos_.Add(other.userCoaxSleepInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userCoaxSleepInfos_.AddEntriesFrom(input, _repeated_userCoaxSleepInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用月卡体验卡
  /// </summary>
  public sealed partial class UnlockCoaxSleepAudioReq : pb::IMessage<UnlockCoaxSleepAudioReq> {
    private static readonly pb::MessageParser<UnlockCoaxSleepAudioReq> _parser = new pb::MessageParser<UnlockCoaxSleepAudioReq>(() => new UnlockCoaxSleepAudioReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockCoaxSleepAudioReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCoaxSleepReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockCoaxSleepAudioReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockCoaxSleepAudioReq(UnlockCoaxSleepAudioReq other) : this() {
      audioId_ = other.audioId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockCoaxSleepAudioReq Clone() {
      return new UnlockCoaxSleepAudioReq(this);
    }

    /// <summary>Field number for the "audio_id" field.</summary>
    public const int AudioIdFieldNumber = 1;
    private int audioId_;
    /// <summary>
    ///解锁音频id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioId {
      get { return audioId_; }
      set {
        audioId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockCoaxSleepAudioReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockCoaxSleepAudioReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioId != other.AudioId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AudioId != 0) hash ^= AudioId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AudioId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AudioId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AudioId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AudioId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockCoaxSleepAudioReq other) {
      if (other == null) {
        return;
      }
      if (other.AudioId != 0) {
        AudioId = other.AudioId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AudioId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用月卡体验卡
  /// </summary>
  public sealed partial class UnlockCoaxSleepAudioRes : pb::IMessage<UnlockCoaxSleepAudioRes> {
    private static readonly pb::MessageParser<UnlockCoaxSleepAudioRes> _parser = new pb::MessageParser<UnlockCoaxSleepAudioRes>(() => new UnlockCoaxSleepAudioRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockCoaxSleepAudioRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCoaxSleepReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockCoaxSleepAudioRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockCoaxSleepAudioRes(UnlockCoaxSleepAudioRes other) : this() {
      ret_ = other.ret_;
      UserCoaxSleepInfo = other.userCoaxSleepInfo_ != null ? other.UserCoaxSleepInfo.Clone() : null;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockCoaxSleepAudioRes Clone() {
      return new UnlockCoaxSleepAudioRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_coax_sleep_info" field.</summary>
    public const int UserCoaxSleepInfoFieldNumber = 2;
    private global::Com.Proto.UserCoaxSleepInfoPB userCoaxSleepInfo_;
    /// <summary>
    ///玩家用户哄睡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserCoaxSleepInfoPB UserCoaxSleepInfo {
      get { return userCoaxSleepInfo_; }
      set {
        userCoaxSleepInfo_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private global::Com.Proto.UserMoneyPB userMoney_;
    /// <summary>
    ///金钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockCoaxSleepAudioRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockCoaxSleepAudioRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserCoaxSleepInfo, other.UserCoaxSleepInfo)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userCoaxSleepInfo_ != null) hash ^= UserCoaxSleepInfo.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userCoaxSleepInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserCoaxSleepInfo);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userCoaxSleepInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCoaxSleepInfo);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockCoaxSleepAudioRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userCoaxSleepInfo_ != null) {
        if (userCoaxSleepInfo_ == null) {
          userCoaxSleepInfo_ = new global::Com.Proto.UserCoaxSleepInfoPB();
        }
        UserCoaxSleepInfo.MergeFrom(other.UserCoaxSleepInfo);
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userCoaxSleepInfo_ == null) {
              userCoaxSleepInfo_ = new global::Com.Proto.UserCoaxSleepInfoPB();
            }
            input.ReadMessage(userCoaxSleepInfo_);
            break;
          }
          case 26: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
