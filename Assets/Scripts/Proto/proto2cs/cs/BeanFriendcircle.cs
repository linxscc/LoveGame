// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_friendcircle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_friendcircle.proto</summary>
  public static partial class BeanFriendcircleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_friendcircle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanFriendcircleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdiZWFuX2ZyaWVuZGNpcmNsZS5wcm90bxIJY29tLnByb3RvGgpiYXNlLnBy",
            "b3RvIsQBChJGcmllbmRDaXJjbGVSdWxlUEISEAoIc2NlbmVfaWQYASABKBES",
            "EAoIcmVwbHlfaWQYAiABKBESEgoKc2NlbmVfbmFtZRgDIAEoCRINCgV0aXRs",
            "ZRgEIAEoCRIMCgR0eXBlGAUgASgREg4KBnBpY19pZBgGIAEoERIPCgdidG5f",
            "dHh0GAcgASgJEg8KB2NvbnRlbnQYCCABKAkSEgoKc2VsZWN0X2lkcxgJIAMo",
            "ERITCgtjb21tZW50X2lkcxgKIAMoEUI1Ch9uZXQuZ2FsYXNwb3J0cy5iaWdz",
            "dGFyLnByb3RvY29sQhJGcmllbmRDaXJjbGVQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.FriendCircleRulePB), global::Com.Proto.FriendCircleRulePB.Parser, new[]{ "SceneId", "ReplyId", "SceneName", "Title", "Type", "PicId", "BtnTxt", "Content", "SelectIds", "CommentIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///FriendCircleRulePB FriendCircleRule 朋友圈
  /// </summary>
  public sealed partial class FriendCircleRulePB : pb::IMessage<FriendCircleRulePB> {
    private static readonly pb::MessageParser<FriendCircleRulePB> _parser = new pb::MessageParser<FriendCircleRulePB>(() => new FriendCircleRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendCircleRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanFriendcircleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendCircleRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendCircleRulePB(FriendCircleRulePB other) : this() {
      sceneId_ = other.sceneId_;
      replyId_ = other.replyId_;
      sceneName_ = other.sceneName_;
      title_ = other.title_;
      type_ = other.type_;
      picId_ = other.picId_;
      btnTxt_ = other.btnTxt_;
      content_ = other.content_;
      selectIds_ = other.selectIds_.Clone();
      commentIds_ = other.commentIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendCircleRulePB Clone() {
      return new FriendCircleRulePB(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    /// <summary>
    ///情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "reply_id" field.</summary>
    public const int ReplyIdFieldNumber = 2;
    private int replyId_;
    /// <summary>
    ///回复ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplyId {
      get { return replyId_; }
      set {
        replyId_ = value;
      }
    }

    /// <summary>Field number for the "scene_name" field.</summary>
    public const int SceneNameFieldNumber = 3;
    private string sceneName_ = "";
    /// <summary>
    ///情景名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    /// <summary>
    ///标题文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    ///人物类型（玩家0，林尹默1，李赫2，谭飞3，方以乔4，其他5）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pic_id" field.</summary>
    public const int PicIdFieldNumber = 6;
    private int picId_;
    /// <summary>
    ///图片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PicId {
      get { return picId_; }
      set {
        picId_ = value;
      }
    }

    /// <summary>Field number for the "btn_txt" field.</summary>
    public const int BtnTxtFieldNumber = 7;
    private string btnTxt_ = "";
    /// <summary>
    ///按钮文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BtnTxt {
      get { return btnTxt_; }
      set {
        btnTxt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private string content_ = "";
    /// <summary>
    ///回复文本文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "select_ids" field.</summary>
    public const int SelectIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_selectIds_codec
        = pb::FieldCodec.ForSInt32(74);
    private readonly pbc::RepeatedField<int> selectIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家选项列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SelectIds {
      get { return selectIds_; }
    }

    /// <summary>Field number for the "comment_ids" field.</summary>
    public const int CommentIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_commentIds_codec
        = pb::FieldCodec.ForSInt32(82);
    private readonly pbc::RepeatedField<int> commentIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///NPC回复列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CommentIds {
      get { return commentIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendCircleRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendCircleRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (ReplyId != other.ReplyId) return false;
      if (SceneName != other.SceneName) return false;
      if (Title != other.Title) return false;
      if (Type != other.Type) return false;
      if (PicId != other.PicId) return false;
      if (BtnTxt != other.BtnTxt) return false;
      if (Content != other.Content) return false;
      if(!selectIds_.Equals(other.selectIds_)) return false;
      if(!commentIds_.Equals(other.commentIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ReplyId != 0) hash ^= ReplyId.GetHashCode();
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PicId != 0) hash ^= PicId.GetHashCode();
      if (BtnTxt.Length != 0) hash ^= BtnTxt.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= selectIds_.GetHashCode();
      hash ^= commentIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SceneId);
      }
      if (ReplyId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(ReplyId);
      }
      if (SceneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SceneName);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Type);
      }
      if (PicId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(PicId);
      }
      if (BtnTxt.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BtnTxt);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Content);
      }
      selectIds_.WriteTo(output, _repeated_selectIds_codec);
      commentIds_.WriteTo(output, _repeated_commentIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SceneId);
      }
      if (ReplyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ReplyId);
      }
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type);
      }
      if (PicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PicId);
      }
      if (BtnTxt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BtnTxt);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += selectIds_.CalculateSize(_repeated_selectIds_codec);
      size += commentIds_.CalculateSize(_repeated_commentIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendCircleRulePB other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.ReplyId != 0) {
        ReplyId = other.ReplyId;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PicId != 0) {
        PicId = other.PicId;
      }
      if (other.BtnTxt.Length != 0) {
        BtnTxt = other.BtnTxt;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      selectIds_.Add(other.selectIds_);
      commentIds_.Add(other.commentIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SceneId = input.ReadSInt32();
            break;
          }
          case 16: {
            ReplyId = input.ReadSInt32();
            break;
          }
          case 26: {
            SceneName = input.ReadString();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 40: {
            Type = input.ReadSInt32();
            break;
          }
          case 48: {
            PicId = input.ReadSInt32();
            break;
          }
          case 58: {
            BtnTxt = input.ReadString();
            break;
          }
          case 66: {
            Content = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            selectIds_.AddEntriesFrom(input, _repeated_selectIds_codec);
            break;
          }
          case 82:
          case 80: {
            commentIds_.AddEntriesFrom(input, _repeated_commentIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
