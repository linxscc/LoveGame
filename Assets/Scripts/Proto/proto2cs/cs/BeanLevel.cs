// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_level.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_level.proto</summary>
  public static partial class BeanLevelReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_level.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanLevelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBiZWFuX2xldmVsLnByb3RvEgljb20ucHJvdG8aCmJhc2UucHJvdG8aEGJl",
            "YW5fYXdhcmQucHJvdG8aFmJlYW5fbGV2ZWxfZXh0cmEucHJvdG8ipwYKB0xl",
            "dmVsUEISEAoIbGV2ZWxfaWQYASABKBESFwoPYmVmb3JlX2xldmVsX2lkGAIg",
            "ASgREhYKDmFmdGVyX2xldmVsX2lkGAMgASgREhoKBHR5cGUYBCABKA4yDC5M",
            "ZXZlbFR5cGVQQhIdCglhYmlsaXRpZXMYBSADKA4yCi5BYmlsaXR5UEISMQoI",
            "aXRlbV9tYXgYBiADKAsyHy5jb20ucHJvdG8uTGV2ZWxQQi5JdGVtTWF4RW50",
            "cnkSMQoIZmFuc19tYXgYByADKAsyHy5jb20ucHJvdG8uTGV2ZWxQQi5GYW5z",
            "TWF4RW50cnkSCwoDbWF4GAggASgREhAKCGV2ZW50X2lkGAkgAygREjcKC3N0",
            "YXJfc291cmNlGAogAygLMiIuY29tLnByb3RvLkxldmVsUEIuU3RhclNvdXJj",
            "ZUVudHJ5EiIKBmF3YXJkcxgLIAMoCzISLmNvbS5wcm90by5Bd2FyZFBCEh4K",
            "CWdhbWVfdHlwZRgMIAEoDjILLkdhbWVUeXBlUEISFQoNbGV2ZWxfaW5mb19p",
            "ZBgNIAEoERIVCg1jaGFwdGVyX2dyb3VwGA4gASgREhIKCmxldmVsX21hcmsY",
            "DyABKAkSNQoKbGV2ZWxfcGxvdBgQIAMoCzIhLmNvbS5wcm90by5MZXZlbFBC",
            "LkxldmVsUGxvdEVudHJ5EhgKEGxldmVsX2Nvb3JkaW5hdGUYESADKBESFgoO",
            "bGV2ZWxfYmFja2Ryb3AYEiADKAkSLAoLbGV2ZWxfZXh0cmEYEyABKAsyFy5j",
            "b20ucHJvdG8uTGV2ZWxFeHRyYVBCGi4KDEl0ZW1NYXhFbnRyeRILCgNrZXkY",
            "ASABKBESDQoFdmFsdWUYAiABKBE6AjgBGi4KDEZhbnNNYXhFbnRyeRILCgNr",
            "ZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBGjEKD1N0YXJTb3VyY2VFbnRy",
            "eRILCgNrZXkYASABKBESDQoFdmFsdWUYAiABKBE6AjgBGjAKDkxldmVsUGxv",
            "dEVudHJ5EgsKA2tleRgBIAEoERINCgV2YWx1ZRgCIAEoEToCOAFCLgofbmV0",
            "LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEILTGV2ZWxQcm90b3NiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, global::Com.Proto.BeanLevelExtraReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.LevelPB), global::Com.Proto.LevelPB.Parser, new[]{ "LevelId", "BeforeLevelId", "AfterLevelId", "Type", "Abilities", "ItemMax", "FansMax", "Max", "EventId", "StarSource", "Awards", "GameType", "LevelInfoId", "ChapterGroup", "LevelMark", "LevelPlot", "LevelCoordinate", "LevelBackdrop", "LevelExtra" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///LevelPB Level
  /// </summary>
  public sealed partial class LevelPB : pb::IMessage<LevelPB> {
    private static readonly pb::MessageParser<LevelPB> _parser = new pb::MessageParser<LevelPB>(() => new LevelPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanLevelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelPB(LevelPB other) : this() {
      levelId_ = other.levelId_;
      beforeLevelId_ = other.beforeLevelId_;
      afterLevelId_ = other.afterLevelId_;
      type_ = other.type_;
      abilities_ = other.abilities_.Clone();
      itemMax_ = other.itemMax_.Clone();
      fansMax_ = other.fansMax_.Clone();
      max_ = other.max_;
      eventId_ = other.eventId_.Clone();
      starSource_ = other.starSource_.Clone();
      awards_ = other.awards_.Clone();
      gameType_ = other.gameType_;
      levelInfoId_ = other.levelInfoId_;
      chapterGroup_ = other.chapterGroup_;
      levelMark_ = other.levelMark_;
      levelPlot_ = other.levelPlot_.Clone();
      levelCoordinate_ = other.levelCoordinate_.Clone();
      levelBackdrop_ = other.levelBackdrop_.Clone();
      LevelExtra = other.levelExtra_ != null ? other.LevelExtra.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelPB Clone() {
      return new LevelPB(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "before_level_id" field.</summary>
    public const int BeforeLevelIdFieldNumber = 2;
    private int beforeLevelId_;
    /// <summary>
    ///前置关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeLevelId {
      get { return beforeLevelId_; }
      set {
        beforeLevelId_ = value;
      }
    }

    /// <summary>Field number for the "after_level_id" field.</summary>
    public const int AfterLevelIdFieldNumber = 3;
    private int afterLevelId_;
    /// <summary>
    ///后置关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterLevelId {
      get { return afterLevelId_; }
      set {
        afterLevelId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::LevelTypePB type_ = 0;
    /// <summary>
    ///关卡类型(0数值，1剧情)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LevelTypePB Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AbilityPB> _repeated_abilities_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::AbilityPB) x);
    private readonly pbc::RepeatedField<global::AbilityPB> abilities_ = new pbc::RepeatedField<global::AbilityPB>();
    /// <summary>
    ///能力标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AbilityPB> Abilities {
      get { return abilities_; }
    }

    /// <summary>Field number for the "item_max" field.</summary>
    public const int ItemMaxFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_itemMax_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 50);
    private readonly pbc::MapField<int, int> itemMax_ = new pbc::MapField<int, int>();
    /// <summary>
    ///道具上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ItemMax {
      get { return itemMax_; }
    }

    /// <summary>Field number for the "fans_max" field.</summary>
    public const int FansMaxFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_fansMax_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 58);
    private readonly pbc::MapField<int, int> fansMax_ = new pbc::MapField<int, int>();
    /// <summary>
    ///粉丝上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FansMax {
      get { return fansMax_; }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 8;
    private int max_;
    /// <summary>
    ///当天可挑战次数上线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_eventId_codec
        = pb::FieldCodec.ForSInt32(74);
    private readonly pbc::RepeatedField<int> eventId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///触发情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EventId {
      get { return eventId_; }
    }

    /// <summary>Field number for the "star_source" field.</summary>
    public const int StarSourceFieldNumber = 10;
    private static readonly pbc::MapField<int, int>.Codec _map_starSource_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 82);
    private readonly pbc::MapField<int, int> starSource_ = new pbc::MapField<int, int>();
    /// <summary>
    ///星级-分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> StarSource {
      get { return starSource_; }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(90, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 12;
    private global::GameTypePB gameType_ = 0;
    /// <summary>
    ///比赛类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameTypePB GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "level_info_id" field.</summary>
    public const int LevelInfoIdFieldNumber = 13;
    private int levelInfoId_;
    /// <summary>
    ///关卡信息ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelInfoId {
      get { return levelInfoId_; }
      set {
        levelInfoId_ = value;
      }
    }

    /// <summary>Field number for the "chapter_group" field.</summary>
    public const int ChapterGroupFieldNumber = 14;
    private int chapterGroup_;
    /// <summary>
    ///章节分组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterGroup {
      get { return chapterGroup_; }
      set {
        chapterGroup_ = value;
      }
    }

    /// <summary>Field number for the "level_mark" field.</summary>
    public const int LevelMarkFieldNumber = 15;
    private string levelMark_ = "";
    /// <summary>
    ///章节标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelMark {
      get { return levelMark_; }
      set {
        levelMark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_plot" field.</summary>
    public const int LevelPlotFieldNumber = 16;
    private static readonly pbc::MapField<int, int>.Codec _map_levelPlot_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 130);
    private readonly pbc::MapField<int, int> levelPlot_ = new pbc::MapField<int, int>();
    /// <summary>
    ///关卡剧情id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> LevelPlot {
      get { return levelPlot_; }
    }

    /// <summary>Field number for the "level_coordinate" field.</summary>
    public const int LevelCoordinateFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_levelCoordinate_codec
        = pb::FieldCodec.ForSInt32(138);
    private readonly pbc::RepeatedField<int> levelCoordinate_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///关卡坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelCoordinate {
      get { return levelCoordinate_; }
    }

    /// <summary>Field number for the "level_backdrop" field.</summary>
    public const int LevelBackdropFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_levelBackdrop_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> levelBackdrop_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///关卡背景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelBackdrop {
      get { return levelBackdrop_; }
    }

    /// <summary>Field number for the "level_extra" field.</summary>
    public const int LevelExtraFieldNumber = 19;
    private global::Com.Proto.LevelExtraPB levelExtra_;
    /// <summary>
    ///关卡额外要求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.LevelExtraPB LevelExtra {
      get { return levelExtra_; }
      set {
        levelExtra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if (BeforeLevelId != other.BeforeLevelId) return false;
      if (AfterLevelId != other.AfterLevelId) return false;
      if (Type != other.Type) return false;
      if(!abilities_.Equals(other.abilities_)) return false;
      if (!ItemMax.Equals(other.ItemMax)) return false;
      if (!FansMax.Equals(other.FansMax)) return false;
      if (Max != other.Max) return false;
      if(!eventId_.Equals(other.eventId_)) return false;
      if (!StarSource.Equals(other.StarSource)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (GameType != other.GameType) return false;
      if (LevelInfoId != other.LevelInfoId) return false;
      if (ChapterGroup != other.ChapterGroup) return false;
      if (LevelMark != other.LevelMark) return false;
      if (!LevelPlot.Equals(other.LevelPlot)) return false;
      if(!levelCoordinate_.Equals(other.levelCoordinate_)) return false;
      if(!levelBackdrop_.Equals(other.levelBackdrop_)) return false;
      if (!object.Equals(LevelExtra, other.LevelExtra)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (BeforeLevelId != 0) hash ^= BeforeLevelId.GetHashCode();
      if (AfterLevelId != 0) hash ^= AfterLevelId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= abilities_.GetHashCode();
      hash ^= ItemMax.GetHashCode();
      hash ^= FansMax.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      hash ^= eventId_.GetHashCode();
      hash ^= StarSource.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (LevelInfoId != 0) hash ^= LevelInfoId.GetHashCode();
      if (ChapterGroup != 0) hash ^= ChapterGroup.GetHashCode();
      if (LevelMark.Length != 0) hash ^= LevelMark.GetHashCode();
      hash ^= LevelPlot.GetHashCode();
      hash ^= levelCoordinate_.GetHashCode();
      hash ^= levelBackdrop_.GetHashCode();
      if (levelExtra_ != null) hash ^= LevelExtra.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      if (BeforeLevelId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(BeforeLevelId);
      }
      if (AfterLevelId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(AfterLevelId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      abilities_.WriteTo(output, _repeated_abilities_codec);
      itemMax_.WriteTo(output, _map_itemMax_codec);
      fansMax_.WriteTo(output, _map_fansMax_codec);
      if (Max != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Max);
      }
      eventId_.WriteTo(output, _repeated_eventId_codec);
      starSource_.WriteTo(output, _map_starSource_codec);
      awards_.WriteTo(output, _repeated_awards_codec);
      if (GameType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) GameType);
      }
      if (LevelInfoId != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(LevelInfoId);
      }
      if (ChapterGroup != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(ChapterGroup);
      }
      if (LevelMark.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(LevelMark);
      }
      levelPlot_.WriteTo(output, _map_levelPlot_codec);
      levelCoordinate_.WriteTo(output, _repeated_levelCoordinate_codec);
      levelBackdrop_.WriteTo(output, _repeated_levelBackdrop_codec);
      if (levelExtra_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(LevelExtra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (BeforeLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BeforeLevelId);
      }
      if (AfterLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AfterLevelId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += abilities_.CalculateSize(_repeated_abilities_codec);
      size += itemMax_.CalculateSize(_map_itemMax_codec);
      size += fansMax_.CalculateSize(_map_fansMax_codec);
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Max);
      }
      size += eventId_.CalculateSize(_repeated_eventId_codec);
      size += starSource_.CalculateSize(_map_starSource_codec);
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameType);
      }
      if (LevelInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelInfoId);
      }
      if (ChapterGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChapterGroup);
      }
      if (LevelMark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelMark);
      }
      size += levelPlot_.CalculateSize(_map_levelPlot_codec);
      size += levelCoordinate_.CalculateSize(_repeated_levelCoordinate_codec);
      size += levelBackdrop_.CalculateSize(_repeated_levelBackdrop_codec);
      if (levelExtra_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LevelExtra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelPB other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.BeforeLevelId != 0) {
        BeforeLevelId = other.BeforeLevelId;
      }
      if (other.AfterLevelId != 0) {
        AfterLevelId = other.AfterLevelId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      abilities_.Add(other.abilities_);
      itemMax_.Add(other.itemMax_);
      fansMax_.Add(other.fansMax_);
      if (other.Max != 0) {
        Max = other.Max;
      }
      eventId_.Add(other.eventId_);
      starSource_.Add(other.starSource_);
      awards_.Add(other.awards_);
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.LevelInfoId != 0) {
        LevelInfoId = other.LevelInfoId;
      }
      if (other.ChapterGroup != 0) {
        ChapterGroup = other.ChapterGroup;
      }
      if (other.LevelMark.Length != 0) {
        LevelMark = other.LevelMark;
      }
      levelPlot_.Add(other.levelPlot_);
      levelCoordinate_.Add(other.levelCoordinate_);
      levelBackdrop_.Add(other.levelBackdrop_);
      if (other.levelExtra_ != null) {
        if (levelExtra_ == null) {
          levelExtra_ = new global::Com.Proto.LevelExtraPB();
        }
        LevelExtra.MergeFrom(other.LevelExtra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 16: {
            BeforeLevelId = input.ReadSInt32();
            break;
          }
          case 24: {
            AfterLevelId = input.ReadSInt32();
            break;
          }
          case 32: {
            type_ = (global::LevelTypePB) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            abilities_.AddEntriesFrom(input, _repeated_abilities_codec);
            break;
          }
          case 50: {
            itemMax_.AddEntriesFrom(input, _map_itemMax_codec);
            break;
          }
          case 58: {
            fansMax_.AddEntriesFrom(input, _map_fansMax_codec);
            break;
          }
          case 64: {
            Max = input.ReadSInt32();
            break;
          }
          case 74:
          case 72: {
            eventId_.AddEntriesFrom(input, _repeated_eventId_codec);
            break;
          }
          case 82: {
            starSource_.AddEntriesFrom(input, _map_starSource_codec);
            break;
          }
          case 90: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 96: {
            gameType_ = (global::GameTypePB) input.ReadEnum();
            break;
          }
          case 104: {
            LevelInfoId = input.ReadSInt32();
            break;
          }
          case 112: {
            ChapterGroup = input.ReadSInt32();
            break;
          }
          case 122: {
            LevelMark = input.ReadString();
            break;
          }
          case 130: {
            levelPlot_.AddEntriesFrom(input, _map_levelPlot_codec);
            break;
          }
          case 138:
          case 136: {
            levelCoordinate_.AddEntriesFrom(input, _repeated_levelCoordinate_codec);
            break;
          }
          case 146: {
            levelBackdrop_.AddEntriesFrom(input, _repeated_levelBackdrop_codec);
            break;
          }
          case 154: {
            if (levelExtra_ == null) {
              levelExtra_ = new global::Com.Proto.LevelExtraPB();
            }
            input.ReadMessage(levelExtra_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
