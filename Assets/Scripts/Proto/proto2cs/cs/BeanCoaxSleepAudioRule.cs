// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_coax_sleep_audio_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_coax_sleep_audio_rule.proto</summary>
  public static partial class BeanCoaxSleepAudioRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_coax_sleep_audio_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanCoaxSleepAudioRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBiZWFuX2NvYXhfc2xlZXBfYXVkaW9fcnVsZS5wcm90bxIJY29tLnByb3Rv",
            "GgpiYXNlLnByb3RvGhtiZWFuX2NvYXhfdW5sb2NrX2dvYWwucHJvdG8iuAEK",
            "FENvYXhTbGVlcEF1ZGlvUnVsZVBCEhAKCGF1ZGlvX2lkGAEgASgREhkKBnBs",
            "YXllchgCIAEoDjIJLlBsYXllclBCEhIKCmF1ZGlvX25hbWUYAyABKAkSEgoK",
            "YXVkaW9fZGVzYxgEIAEoCRI2ChFjb2F4X3VubG9ja19nb2FscxgFIAMoCzIb",
            "LmNvbS5wcm90by5Db2F4VW5sb2NrUnVsZVBCEhMKC3VubG9ja19kZXNjGAYg",
            "ASgJQjsKH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIucHJvdG9jb2xCGENvYXhT",
            "bGVlcEF1ZGlvUnVsZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanCoaxUnlockGoalReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.CoaxSleepAudioRulePB), global::Com.Proto.CoaxSleepAudioRulePB.Parser, new[]{ "AudioId", "Player", "AudioName", "AudioDesc", "CoaxUnlockGoals", "UnlockDesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///CoaxSleepAudioRulePB CoaxSleepAudioRule
  /// </summary>
  public sealed partial class CoaxSleepAudioRulePB : pb::IMessage<CoaxSleepAudioRulePB> {
    private static readonly pb::MessageParser<CoaxSleepAudioRulePB> _parser = new pb::MessageParser<CoaxSleepAudioRulePB>(() => new CoaxSleepAudioRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoaxSleepAudioRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanCoaxSleepAudioRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepAudioRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepAudioRulePB(CoaxSleepAudioRulePB other) : this() {
      audioId_ = other.audioId_;
      player_ = other.player_;
      audioName_ = other.audioName_;
      audioDesc_ = other.audioDesc_;
      coaxUnlockGoals_ = other.coaxUnlockGoals_.Clone();
      unlockDesc_ = other.unlockDesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoaxSleepAudioRulePB Clone() {
      return new CoaxSleepAudioRulePB(this);
    }

    /// <summary>Field number for the "audio_id" field.</summary>
    public const int AudioIdFieldNumber = 1;
    private int audioId_;
    /// <summary>
    ///音频id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioId {
      get { return audioId_; }
      set {
        audioId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::PlayerPB player_ = 0;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerPB Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "audio_name" field.</summary>
    public const int AudioNameFieldNumber = 3;
    private string audioName_ = "";
    /// <summary>
    ///音频名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioName {
      get { return audioName_; }
      set {
        audioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "audio_desc" field.</summary>
    public const int AudioDescFieldNumber = 4;
    private string audioDesc_ = "";
    /// <summary>
    ///音频描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioDesc {
      get { return audioDesc_; }
      set {
        audioDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coax_unlock_goals" field.</summary>
    public const int CoaxUnlockGoalsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.CoaxUnlockRulePB> _repeated_coaxUnlockGoals_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.CoaxUnlockRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.CoaxUnlockRulePB> coaxUnlockGoals_ = new pbc::RepeatedField<global::Com.Proto.CoaxUnlockRulePB>();
    /// <summary>
    ///解锁要求 所有数组里面条件都是或的关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.CoaxUnlockRulePB> CoaxUnlockGoals {
      get { return coaxUnlockGoals_; }
    }

    /// <summary>Field number for the "unlock_desc" field.</summary>
    public const int UnlockDescFieldNumber = 6;
    private string unlockDesc_ = "";
    /// <summary>
    ///解锁描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnlockDesc {
      get { return unlockDesc_; }
      set {
        unlockDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoaxSleepAudioRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoaxSleepAudioRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioId != other.AudioId) return false;
      if (Player != other.Player) return false;
      if (AudioName != other.AudioName) return false;
      if (AudioDesc != other.AudioDesc) return false;
      if(!coaxUnlockGoals_.Equals(other.coaxUnlockGoals_)) return false;
      if (UnlockDesc != other.UnlockDesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AudioId != 0) hash ^= AudioId.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (AudioName.Length != 0) hash ^= AudioName.GetHashCode();
      if (AudioDesc.Length != 0) hash ^= AudioDesc.GetHashCode();
      hash ^= coaxUnlockGoals_.GetHashCode();
      if (UnlockDesc.Length != 0) hash ^= UnlockDesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AudioId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AudioId);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (AudioName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AudioName);
      }
      if (AudioDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AudioDesc);
      }
      coaxUnlockGoals_.WriteTo(output, _repeated_coaxUnlockGoals_codec);
      if (UnlockDesc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UnlockDesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AudioId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AudioId);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (AudioName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioName);
      }
      if (AudioDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioDesc);
      }
      size += coaxUnlockGoals_.CalculateSize(_repeated_coaxUnlockGoals_codec);
      if (UnlockDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnlockDesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoaxSleepAudioRulePB other) {
      if (other == null) {
        return;
      }
      if (other.AudioId != 0) {
        AudioId = other.AudioId;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.AudioName.Length != 0) {
        AudioName = other.AudioName;
      }
      if (other.AudioDesc.Length != 0) {
        AudioDesc = other.AudioDesc;
      }
      coaxUnlockGoals_.Add(other.coaxUnlockGoals_);
      if (other.UnlockDesc.Length != 0) {
        UnlockDesc = other.UnlockDesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AudioId = input.ReadSInt32();
            break;
          }
          case 16: {
            player_ = (global::PlayerPB) input.ReadEnum();
            break;
          }
          case 26: {
            AudioName = input.ReadString();
            break;
          }
          case 34: {
            AudioDesc = input.ReadString();
            break;
          }
          case 42: {
            coaxUnlockGoals_.AddEntriesFrom(input, _repeated_coaxUnlockGoals_codec);
            break;
          }
          case 50: {
            UnlockDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
