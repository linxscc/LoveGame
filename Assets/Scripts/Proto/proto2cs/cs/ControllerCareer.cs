// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_career.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_career.proto</summary>
  public static partial class ControllerCareerReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_career.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerCareerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdjb250cm9sbGVyX2NhcmVlci5wcm90bxIJY29tLnByb3RvGgpiYXNlLnBy",
            "b3RvGhBiZWFuX2xldmVsLnByb3RvGhViZWFuX3VzZXJfbGV2ZWwucHJvdG8a",
            "FmJlYW5fZ2FtZV9yZXN1bHQucHJvdG8aGmJlYW5fbGV2ZWxfaW5mb19ydWxl",
            "LnByb3RvGhpiZWFuX2xldmVsX3Bsb3RfcnVsZS5wcm90bxodYmVhbl9sZXZl",
            "bF9jb21tZW50X3J1bGUucHJvdG8aImJlYW5fY2hhbGxlbmdlX2NhcmRfbnVt",
            "X3J1bGUucHJvdG8aFWJlYW5fdXNlcl9wb3dlci5wcm90bxoVYmVhbl91c2Vy",
            "X21vbmV5LnByb3RvGhRiZWFuX3VzZXJfaXRlbS5wcm90bxoZYmVhbl9sZXZl",
            "bF9idXlfcnVsZS5wcm90bxoQYmVhbl9hd2FyZC5wcm90byLAAgoITGV2ZWxS",
            "ZXMSCwoDcmV0GAEgASgREiIKBmxldmVscxgCIAMoCzISLmNvbS5wcm90by5M",
            "ZXZlbFBCEi4KCnBsb3RfcnVsZXMYAyADKAsyGi5jb20ucHJvdG8uTGV2ZWxQ",
            "bG90UnVsZVBCEjQKDWNvbW1lbnRfcnVsZXMYBCADKAsyHS5jb20ucHJvdG8u",
            "TGV2ZWxDb21tZW50UnVsZVBCEi4KCmluZm9fcnVsZXMYBSADKAsyGi5jb20u",
            "cHJvdG8uTGV2ZWxJbmZvUnVsZVBCEjkKDmNhcmRfbnVtX3J1bGVzGAYgAygL",
            "MiEuY29tLnByb3RvLkNoYWxsZW5nZUNhcmROdW1SdWxlUEISMgoPbGV2ZWxf",
            "YnV5X3J1bGVzGAcgAygLMhkuY29tLnByb3RvLkxldmVsQnV5UnVsZVBCIkYK",
            "Ck15TGV2ZWxSZXMSCwoDcmV0GAEgASgREisKC3VzZXJfbGV2ZWxzGAIgAygL",
            "MhYuY29tLnByb3RvLlVzZXJMZXZlbFBCIvEBCgxDaGFsbGVuZ2VSZXESEAoI",
            "bGV2ZWxfaWQYASABKBESEAoIY2FyZF9pZHMYAiADKBESMQoFaXRlbXMYAyAD",
            "KAsyIi5jb20ucHJvdG8uQ2hhbGxlbmdlUmVxLkl0ZW1zRW50cnkSLwoEZmFu",
            "cxgEIAMoCzIhLmNvbS5wcm90by5DaGFsbGVuZ2VSZXEuRmFuc0VudHJ5GiwK",
            "Ckl0ZW1zRW50cnkSCwoDa2V5GAEgASgREg0KBXZhbHVlGAIgASgROgI4ARor",
            "CglGYW5zRW50cnkSCwoDa2V5GAEgASgREg0KBXZhbHVlGAIgASgROgI4ASKe",
            "AQoMQ2hhbGxlbmdlUmVzEgsKA3JldBgBIAEoERIrCgpnYW1lUmVzdWx0GAIg",
            "ASgLMhcuY29tLnByb3RvLkdhbWVSZXN1bHRQQhIqCgp1c2VyX3Bvd2VyGAMg",
            "ASgLMhYuY29tLnByb3RvLlVzZXJQb3dlclBCEigKCXVzZXJfSXRlbRgEIAMo",
            "CzIVLmNvbS5wcm90by5Vc2VySXRlbVBCIikKCFN3ZWVwUmVxEhAKCGxldmVs",
            "X2lkGAEgASgREgsKA251bRgCIAEoESKcAQoIU3dlZXBSZXMSCwoDcmV0GAEg",
            "ASgREisKCmdhbWVSZXN1bHQYAiADKAsyFy5jb20ucHJvdG8uR2FtZVJlc3Vs",
            "dFBCEioKCnVzZXJfcG93ZXIYAyABKAsyFi5jb20ucHJvdG8uVXNlclBvd2Vy",
            "UEISKgoKdXNlcl9sZXZlbBgEIAEoCzIWLmNvbS5wcm90by5Vc2VyTGV2ZWxQ",
            "QiIfCgtCdXlDb3VudFJlcRIQCghsZXZlbF9pZBgBIAEoESJyCgtCdXlDb3Vu",
            "dFJlcxILCgNyZXQYASABKBESKgoKdXNlcl9sZXZlbBgCIAEoCzIWLmNvbS5w",
            "cm90by5Vc2VyTGV2ZWxQQhIqCgp1c2VyX21vbmV5GAMgASgLMhYuY29tLnBy",
            "b3RvLlVzZXJNb25leVBCIikKFUdldEZpcnN0UGFzc0F3YXJkc1JlcRIQCghs",
            "ZXZlbF9pZBgBIAEoESJ0ChVHZXRGaXJzdFBhc3NBd2FyZHNSZXMSCwoDcmV0",
            "GAEgASgREioKCnVzZXJfbGV2ZWwYAiABKAsyFi5jb20ucHJvdG8uVXNlckxl",
            "dmVsUEISIgoGYXdhcmRzGAMgAygLMhIuY29tLnByb3RvLkF3YXJkUEJCOQof",
            "bmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIWQ2FyZWVyQ29udHJv",
            "bGxlclByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanLevelReflection.Descriptor, global::Com.Proto.BeanUserLevelReflection.Descriptor, global::Com.Proto.BeanGameResultReflection.Descriptor, global::Com.Proto.BeanLevelInfoRuleReflection.Descriptor, global::Com.Proto.BeanLevelPlotRuleReflection.Descriptor, global::Com.Proto.BeanLevelCommentRuleReflection.Descriptor, global::Com.Proto.BeanChallengeCardNumRuleReflection.Descriptor, global::Com.Proto.BeanUserPowerReflection.Descriptor, global::Com.Proto.BeanUserMoneyReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, global::Com.Proto.BeanLevelBuyRuleReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.LevelRes), global::Com.Proto.LevelRes.Parser, new[]{ "Ret", "Levels", "PlotRules", "CommentRules", "InfoRules", "CardNumRules", "LevelBuyRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyLevelRes), global::Com.Proto.MyLevelRes.Parser, new[]{ "Ret", "UserLevels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChallengeReq), global::Com.Proto.ChallengeReq.Parser, new[]{ "LevelId", "CardIds", "Items", "Fans" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ChallengeRes), global::Com.Proto.ChallengeRes.Parser, new[]{ "Ret", "GameResult", "UserPower", "UserItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SweepReq), global::Com.Proto.SweepReq.Parser, new[]{ "LevelId", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.SweepRes), global::Com.Proto.SweepRes.Parser, new[]{ "Ret", "GameResult", "UserPower", "UserLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BuyCountReq), global::Com.Proto.BuyCountReq.Parser, new[]{ "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.BuyCountRes), global::Com.Proto.BuyCountRes.Parser, new[]{ "Ret", "UserLevel", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GetFirstPassAwardsReq), global::Com.Proto.GetFirstPassAwardsReq.Parser, new[]{ "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.GetFirstPassAwardsRes), global::Com.Proto.GetFirstPassAwardsRes.Parser, new[]{ "Ret", "UserLevel", "Awards" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LevelRes : pb::IMessage<LevelRes> {
    private static readonly pb::MessageParser<LevelRes> _parser = new pb::MessageParser<LevelRes>(() => new LevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelRes(LevelRes other) : this() {
      ret_ = other.ret_;
      levels_ = other.levels_.Clone();
      plotRules_ = other.plotRules_.Clone();
      commentRules_ = other.commentRules_.Clone();
      infoRules_ = other.infoRules_.Clone();
      cardNumRules_ = other.cardNumRules_.Clone();
      levelBuyRules_ = other.levelBuyRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelRes Clone() {
      return new LevelRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "levels" field.</summary>
    public const int LevelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.LevelPB> _repeated_levels_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.LevelPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.LevelPB> levels_ = new pbc::RepeatedField<global::Com.Proto.LevelPB>();
    /// <summary>
    ///关卡表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.LevelPB> Levels {
      get { return levels_; }
    }

    /// <summary>Field number for the "plot_rules" field.</summary>
    public const int PlotRulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.LevelPlotRulePB> _repeated_plotRules_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.LevelPlotRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.LevelPlotRulePB> plotRules_ = new pbc::RepeatedField<global::Com.Proto.LevelPlotRulePB>();
    /// <summary>
    ///关卡剧情文案规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.LevelPlotRulePB> PlotRules {
      get { return plotRules_; }
    }

    /// <summary>Field number for the "comment_rules" field.</summary>
    public const int CommentRulesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.LevelCommentRulePB> _repeated_commentRules_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.LevelCommentRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.LevelCommentRulePB> commentRules_ = new pbc::RepeatedField<global::Com.Proto.LevelCommentRulePB>();
    /// <summary>
    ///关卡评论规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.LevelCommentRulePB> CommentRules {
      get { return commentRules_; }
    }

    /// <summary>Field number for the "info_rules" field.</summary>
    public const int InfoRulesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Proto.LevelInfoRulePB> _repeated_infoRules_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Proto.LevelInfoRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.LevelInfoRulePB> infoRules_ = new pbc::RepeatedField<global::Com.Proto.LevelInfoRulePB>();
    /// <summary>
    ///关卡信息表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.LevelInfoRulePB> InfoRules {
      get { return infoRules_; }
    }

    /// <summary>Field number for the "card_num_rules" field.</summary>
    public const int CardNumRulesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Proto.ChallengeCardNumRulePB> _repeated_cardNumRules_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Proto.ChallengeCardNumRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.ChallengeCardNumRulePB> cardNumRules_ = new pbc::RepeatedField<global::Com.Proto.ChallengeCardNumRulePB>();
    /// <summary>
    ///挑战开放卡牌数量规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.ChallengeCardNumRulePB> CardNumRules {
      get { return cardNumRules_; }
    }

    /// <summary>Field number for the "level_buy_rules" field.</summary>
    public const int LevelBuyRulesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Proto.LevelBuyRulePB> _repeated_levelBuyRules_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Proto.LevelBuyRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.LevelBuyRulePB> levelBuyRules_ = new pbc::RepeatedField<global::Com.Proto.LevelBuyRulePB>();
    /// <summary>
    ///三次扫荡购买规则
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.LevelBuyRulePB> LevelBuyRules {
      get { return levelBuyRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!levels_.Equals(other.levels_)) return false;
      if(!plotRules_.Equals(other.plotRules_)) return false;
      if(!commentRules_.Equals(other.commentRules_)) return false;
      if(!infoRules_.Equals(other.infoRules_)) return false;
      if(!cardNumRules_.Equals(other.cardNumRules_)) return false;
      if(!levelBuyRules_.Equals(other.levelBuyRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= levels_.GetHashCode();
      hash ^= plotRules_.GetHashCode();
      hash ^= commentRules_.GetHashCode();
      hash ^= infoRules_.GetHashCode();
      hash ^= cardNumRules_.GetHashCode();
      hash ^= levelBuyRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      levels_.WriteTo(output, _repeated_levels_codec);
      plotRules_.WriteTo(output, _repeated_plotRules_codec);
      commentRules_.WriteTo(output, _repeated_commentRules_codec);
      infoRules_.WriteTo(output, _repeated_infoRules_codec);
      cardNumRules_.WriteTo(output, _repeated_cardNumRules_codec);
      levelBuyRules_.WriteTo(output, _repeated_levelBuyRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += levels_.CalculateSize(_repeated_levels_codec);
      size += plotRules_.CalculateSize(_repeated_plotRules_codec);
      size += commentRules_.CalculateSize(_repeated_commentRules_codec);
      size += infoRules_.CalculateSize(_repeated_infoRules_codec);
      size += cardNumRules_.CalculateSize(_repeated_cardNumRules_codec);
      size += levelBuyRules_.CalculateSize(_repeated_levelBuyRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      levels_.Add(other.levels_);
      plotRules_.Add(other.plotRules_);
      commentRules_.Add(other.commentRules_);
      infoRules_.Add(other.infoRules_);
      cardNumRules_.Add(other.cardNumRules_);
      levelBuyRules_.Add(other.levelBuyRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            levels_.AddEntriesFrom(input, _repeated_levels_codec);
            break;
          }
          case 26: {
            plotRules_.AddEntriesFrom(input, _repeated_plotRules_codec);
            break;
          }
          case 34: {
            commentRules_.AddEntriesFrom(input, _repeated_commentRules_codec);
            break;
          }
          case 42: {
            infoRules_.AddEntriesFrom(input, _repeated_infoRules_codec);
            break;
          }
          case 50: {
            cardNumRules_.AddEntriesFrom(input, _repeated_cardNumRules_codec);
            break;
          }
          case 58: {
            levelBuyRules_.AddEntriesFrom(input, _repeated_levelBuyRules_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyLevelRes : pb::IMessage<MyLevelRes> {
    private static readonly pb::MessageParser<MyLevelRes> _parser = new pb::MessageParser<MyLevelRes>(() => new MyLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyLevelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyLevelRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyLevelRes(MyLevelRes other) : this() {
      ret_ = other.ret_;
      userLevels_ = other.userLevels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyLevelRes Clone() {
      return new MyLevelRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_levels" field.</summary>
    public const int UserLevelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserLevelPB> _repeated_userLevels_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserLevelPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserLevelPB> userLevels_ = new pbc::RepeatedField<global::Com.Proto.UserLevelPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserLevelPB> UserLevels {
      get { return userLevels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyLevelRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyLevelRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userLevels_.Equals(other.userLevels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userLevels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userLevels_.WriteTo(output, _repeated_userLevels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userLevels_.CalculateSize(_repeated_userLevels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyLevelRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userLevels_.Add(other.userLevels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userLevels_.AddEntriesFrom(input, _repeated_userLevels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChallengeReq : pb::IMessage<ChallengeReq> {
    private static readonly pb::MessageParser<ChallengeReq> _parser = new pb::MessageParser<ChallengeReq>(() => new ChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeReq(ChallengeReq other) : this() {
      levelId_ = other.levelId_;
      cardIds_ = other.cardIds_.Clone();
      items_ = other.items_.Clone();
      fans_ = other.fans_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeReq Clone() {
      return new ChallengeReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "card_ids" field.</summary>
    public const int CardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cardIds_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> cardIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardIds {
      get { return cardIds_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_items_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 26);
    private readonly pbc::MapField<int, int> items_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "fans" field.</summary>
    public const int FansFieldNumber = 4;
    private static readonly pbc::MapField<int, int>.Codec _map_fans_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForSInt32(8), pb::FieldCodec.ForSInt32(16), 34);
    private readonly pbc::MapField<int, int> fans_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Fans {
      get { return fans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      if (!Items.Equals(other.Items)) return false;
      if (!Fans.Equals(other.Fans)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      hash ^= Items.GetHashCode();
      hash ^= Fans.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      items_.WriteTo(output, _map_items_codec);
      fans_.WriteTo(output, _map_fans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      size += items_.CalculateSize(_map_items_codec);
      size += fans_.CalculateSize(_map_fans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      cardIds_.Add(other.cardIds_);
      items_.Add(other.items_);
      fans_.Add(other.fans_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 18:
          case 16: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
          case 34: {
            fans_.AddEntriesFrom(input, _map_fans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChallengeRes : pb::IMessage<ChallengeRes> {
    private static readonly pb::MessageParser<ChallengeRes> _parser = new pb::MessageParser<ChallengeRes>(() => new ChallengeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeRes(ChallengeRes other) : this() {
      ret_ = other.ret_;
      GameResult = other.gameResult_ != null ? other.GameResult.Clone() : null;
      UserPower = other.userPower_ != null ? other.UserPower.Clone() : null;
      userItem_ = other.userItem_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeRes Clone() {
      return new ChallengeRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "gameResult" field.</summary>
    public const int GameResultFieldNumber = 2;
    private global::Com.Proto.GameResultPB gameResult_;
    /// <summary>
    ///比赛结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.GameResultPB GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    /// <summary>Field number for the "user_power" field.</summary>
    public const int UserPowerFieldNumber = 3;
    private global::Com.Proto.UserPowerPB userPower_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserPowerPB UserPower {
      get { return userPower_; }
      set {
        userPower_ = value;
      }
    }

    /// <summary>Field number for the "user_Item" field.</summary>
    public const int UserItemFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItem_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItem_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    /// <summary>
    ///道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItem {
      get { return userItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(GameResult, other.GameResult)) return false;
      if (!object.Equals(UserPower, other.UserPower)) return false;
      if(!userItem_.Equals(other.userItem_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (gameResult_ != null) hash ^= GameResult.GetHashCode();
      if (userPower_ != null) hash ^= UserPower.GetHashCode();
      hash ^= userItem_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (gameResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameResult);
      }
      if (userPower_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserPower);
      }
      userItem_.WriteTo(output, _repeated_userItem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPower);
      }
      size += userItem_.CalculateSize(_repeated_userItem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.gameResult_ != null) {
        if (gameResult_ == null) {
          gameResult_ = new global::Com.Proto.GameResultPB();
        }
        GameResult.MergeFrom(other.GameResult);
      }
      if (other.userPower_ != null) {
        if (userPower_ == null) {
          userPower_ = new global::Com.Proto.UserPowerPB();
        }
        UserPower.MergeFrom(other.UserPower);
      }
      userItem_.Add(other.userItem_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (gameResult_ == null) {
              gameResult_ = new global::Com.Proto.GameResultPB();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 26: {
            if (userPower_ == null) {
              userPower_ = new global::Com.Proto.UserPowerPB();
            }
            input.ReadMessage(userPower_);
            break;
          }
          case 34: {
            userItem_.AddEntriesFrom(input, _repeated_userItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SweepReq : pb::IMessage<SweepReq> {
    private static readonly pb::MessageParser<SweepReq> _parser = new pb::MessageParser<SweepReq>(() => new SweepReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SweepReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepReq(SweepReq other) : this() {
      levelId_ = other.levelId_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepReq Clone() {
      return new SweepReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SweepReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SweepReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SweepReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
          case 16: {
            Num = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SweepRes : pb::IMessage<SweepRes> {
    private static readonly pb::MessageParser<SweepRes> _parser = new pb::MessageParser<SweepRes>(() => new SweepRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SweepRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepRes(SweepRes other) : this() {
      ret_ = other.ret_;
      gameResult_ = other.gameResult_.Clone();
      UserPower = other.userPower_ != null ? other.UserPower.Clone() : null;
      UserLevel = other.userLevel_ != null ? other.UserLevel.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SweepRes Clone() {
      return new SweepRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "gameResult" field.</summary>
    public const int GameResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.GameResultPB> _repeated_gameResult_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.GameResultPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.GameResultPB> gameResult_ = new pbc::RepeatedField<global::Com.Proto.GameResultPB>();
    /// <summary>
    ///比赛结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.GameResultPB> GameResult {
      get { return gameResult_; }
    }

    /// <summary>Field number for the "user_power" field.</summary>
    public const int UserPowerFieldNumber = 3;
    private global::Com.Proto.UserPowerPB userPower_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserPowerPB UserPower {
      get { return userPower_; }
      set {
        userPower_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 4;
    private global::Com.Proto.UserLevelPB userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserLevelPB UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SweepRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SweepRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!gameResult_.Equals(other.gameResult_)) return false;
      if (!object.Equals(UserPower, other.UserPower)) return false;
      if (!object.Equals(UserLevel, other.UserLevel)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= gameResult_.GetHashCode();
      if (userPower_ != null) hash ^= UserPower.GetHashCode();
      if (userLevel_ != null) hash ^= UserLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      gameResult_.WriteTo(output, _repeated_gameResult_codec);
      if (userPower_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserPower);
      }
      if (userLevel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += gameResult_.CalculateSize(_repeated_gameResult_codec);
      if (userPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPower);
      }
      if (userLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SweepRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      gameResult_.Add(other.gameResult_);
      if (other.userPower_ != null) {
        if (userPower_ == null) {
          userPower_ = new global::Com.Proto.UserPowerPB();
        }
        UserPower.MergeFrom(other.UserPower);
      }
      if (other.userLevel_ != null) {
        if (userLevel_ == null) {
          userLevel_ = new global::Com.Proto.UserLevelPB();
        }
        UserLevel.MergeFrom(other.UserLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            gameResult_.AddEntriesFrom(input, _repeated_gameResult_codec);
            break;
          }
          case 26: {
            if (userPower_ == null) {
              userPower_ = new global::Com.Proto.UserPowerPB();
            }
            input.ReadMessage(userPower_);
            break;
          }
          case 34: {
            if (userLevel_ == null) {
              userLevel_ = new global::Com.Proto.UserLevelPB();
            }
            input.ReadMessage(userLevel_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 三次挑战购买  careerC/buyCount
  /// </summary>
  public sealed partial class BuyCountReq : pb::IMessage<BuyCountReq> {
    private static readonly pb::MessageParser<BuyCountReq> _parser = new pb::MessageParser<BuyCountReq>(() => new BuyCountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyCountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCountReq(BuyCountReq other) : this() {
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCountReq Clone() {
      return new BuyCountReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyCountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyCountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyCountReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuyCountRes : pb::IMessage<BuyCountRes> {
    private static readonly pb::MessageParser<BuyCountRes> _parser = new pb::MessageParser<BuyCountRes>(() => new BuyCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyCountRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCountRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCountRes(BuyCountRes other) : this() {
      ret_ = other.ret_;
      UserLevel = other.userLevel_ != null ? other.UserLevel.Clone() : null;
      UserMoney = other.userMoney_ != null ? other.UserMoney.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyCountRes Clone() {
      return new BuyCountRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 2;
    private global::Com.Proto.UserLevelPB userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserLevelPB UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_money" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private global::Com.Proto.UserMoneyPB userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserMoneyPB UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyCountRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyCountRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserLevel, other.UserLevel)) return false;
      if (!object.Equals(UserMoney, other.UserMoney)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userLevel_ != null) hash ^= UserLevel.GetHashCode();
      if (userMoney_ != null) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userLevel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserLevel);
      }
      if (userMoney_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevel);
      }
      if (userMoney_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyCountRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userLevel_ != null) {
        if (userLevel_ == null) {
          userLevel_ = new global::Com.Proto.UserLevelPB();
        }
        UserLevel.MergeFrom(other.UserLevel);
      }
      if (other.userMoney_ != null) {
        if (userMoney_ == null) {
          userMoney_ = new global::Com.Proto.UserMoneyPB();
        }
        UserMoney.MergeFrom(other.UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userLevel_ == null) {
              userLevel_ = new global::Com.Proto.UserLevelPB();
            }
            input.ReadMessage(userLevel_);
            break;
          }
          case 26: {
            if (userMoney_ == null) {
              userMoney_ = new global::Com.Proto.UserMoneyPB();
            }
            input.ReadMessage(userMoney_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 领取首通奖励  careerC/getFirstPassAwards
  /// </summary>
  public sealed partial class GetFirstPassAwardsReq : pb::IMessage<GetFirstPassAwardsReq> {
    private static readonly pb::MessageParser<GetFirstPassAwardsReq> _parser = new pb::MessageParser<GetFirstPassAwardsReq>(() => new GetFirstPassAwardsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFirstPassAwardsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFirstPassAwardsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFirstPassAwardsReq(GetFirstPassAwardsReq other) : this() {
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFirstPassAwardsReq Clone() {
      return new GetFirstPassAwardsReq(this);
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private int levelId_;
    /// <summary>
    ///关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFirstPassAwardsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFirstPassAwardsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFirstPassAwardsReq other) {
      if (other == null) {
        return;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFirstPassAwardsRes : pb::IMessage<GetFirstPassAwardsRes> {
    private static readonly pb::MessageParser<GetFirstPassAwardsRes> _parser = new pb::MessageParser<GetFirstPassAwardsRes>(() => new GetFirstPassAwardsRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFirstPassAwardsRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerCareerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFirstPassAwardsRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFirstPassAwardsRes(GetFirstPassAwardsRes other) : this() {
      ret_ = other.ret_;
      UserLevel = other.userLevel_ != null ? other.UserLevel.Clone() : null;
      awards_ = other.awards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFirstPassAwardsRes Clone() {
      return new GetFirstPassAwardsRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///响应码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 2;
    private global::Com.Proto.UserLevelPB userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserLevelPB UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFirstPassAwardsRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFirstPassAwardsRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserLevel, other.UserLevel)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userLevel_ != null) hash ^= UserLevel.GetHashCode();
      hash ^= awards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userLevel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserLevel);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevel);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFirstPassAwardsRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userLevel_ != null) {
        if (userLevel_ == null) {
          userLevel_ = new global::Com.Proto.UserLevelPB();
        }
        UserLevel.MergeFrom(other.UserLevel);
      }
      awards_.Add(other.awards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userLevel_ == null) {
              userLevel_ = new global::Com.Proto.UserLevelPB();
            }
            input.ReadMessage(userLevel_);
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
