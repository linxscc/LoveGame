// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto.Server {

  /// <summary>Holder for reflection information generated from server_api.proto</summary>
  public static partial class ServerApiReflection {

    #region Descriptor
    /// <summary>File descriptor for server_api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBzZXJ2ZXJfYXBpLnByb3RvEhBjb20ucHJvdG8uc2VydmVyGhFzZXJ2ZXJf",
            "YmFzZS5wcm90byJYChFHYW1lU2VydmVySW5mb1JlcRIMCgRnYW1lGAEgASgR",
            "EhEKCXNlcnZlcl9pZBgCIAEoCRIPCgdjaGFubmVsGAMgASgJEhEKCWFnZ3Jl",
            "Z2F0ZRgEIAEoESKtAQoRR2FtZVNlcnZlckluZm9SZXMSDwoHY2hhbm5lbBgB",
            "IAEoCRIRCglzZXJ2ZXJfaWQYAiABKAkSDAoEbmFtZRgDIAEoCRIMCgRhZGRy",
            "GAQgASgJEgwKBHBvcnQYBSABKBESDAoEZGVzYxgGIAEoCRIRCglhZ2dyZWdh",
            "dGUYByABKBESDgoGc3RhdHVzGAggASgREgwKBHNvcnQYCSABKBESCwoDcmV0",
            "GAogASgRQh5CCUFwaVByb3Rvc6oCEENvbS5Qcm90by5TZXJ2ZXJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Proto.Server.ServerBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.GameServerInfoReq), global::Com.Proto.Server.GameServerInfoReq.Parser, new[]{ "Game", "ServerId", "Channel", "Aggregate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.Server.GameServerInfoRes), global::Com.Proto.Server.GameServerInfoRes.Parser, new[]{ "Channel", "ServerId", "Name", "Addr", "Port", "Desc", "Aggregate", "Status", "Sort", "Ret" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///游戏服务器请求
  /// </summary>
  public sealed partial class GameServerInfoReq : pb::IMessage<GameServerInfoReq> {
    private static readonly pb::MessageParser<GameServerInfoReq> _parser = new pb::MessageParser<GameServerInfoReq>(() => new GameServerInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoReq(GameServerInfoReq other) : this() {
      game_ = other.game_;
      serverId_ = other.serverId_;
      channel_ = other.channel_;
      aggregate_ = other.aggregate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoReq Clone() {
      return new GameServerInfoReq(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private int game_;
    /// <summary>
    ///游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private string serverId_ = "";
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 4;
    private int aggregate_;
    /// <summary>
    ///集群
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Aggregate {
      get { return aggregate_; }
      set {
        aggregate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Game != other.Game) return false;
      if (ServerId != other.ServerId) return false;
      if (Channel != other.Channel) return false;
      if (Aggregate != other.Aggregate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Game != 0) hash ^= Game.GetHashCode();
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Aggregate != 0) hash ^= Aggregate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Game != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Game);
      }
      if (ServerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerId);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Channel);
      }
      if (Aggregate != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Aggregate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Game);
      }
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Aggregate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Aggregate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Aggregate != 0) {
        Aggregate = other.Aggregate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Game = input.ReadSInt32();
            break;
          }
          case 18: {
            ServerId = input.ReadString();
            break;
          }
          case 26: {
            Channel = input.ReadString();
            break;
          }
          case 32: {
            Aggregate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器回包
  /// </summary>
  public sealed partial class GameServerInfoRes : pb::IMessage<GameServerInfoRes> {
    private static readonly pb::MessageParser<GameServerInfoRes> _parser = new pb::MessageParser<GameServerInfoRes>(() => new GameServerInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfoRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.Server.ServerApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoRes(GameServerInfoRes other) : this() {
      channel_ = other.channel_;
      serverId_ = other.serverId_;
      name_ = other.name_;
      addr_ = other.addr_;
      port_ = other.port_;
      desc_ = other.desc_;
      aggregate_ = other.aggregate_;
      status_ = other.status_;
      sort_ = other.sort_;
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoRes Clone() {
      return new GameServerInfoRes(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private string channel_ = "";
    /// <summary>
    ///渠道标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private string serverId_ = "";
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///服务器的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 4;
    private string addr_ = "";
    /// <summary>
    ///服务器地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    /// <summary>
    /// 服务器的端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    /// <summary>
    ///服务器的描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 7;
    private int aggregate_;
    /// <summary>
    ///集群
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Aggregate {
      get { return aggregate_; }
      set {
        aggregate_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 9;
    private int sort_;
    /// <summary>
    ///排序，越大越前
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 10;
    private int ret_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfoRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfoRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      if (Addr != other.Addr) return false;
      if (Port != other.Port) return false;
      if (Desc != other.Desc) return false;
      if (Aggregate != other.Aggregate) return false;
      if (Status != other.Status) return false;
      if (Sort != other.Sort) return false;
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Aggregate != 0) hash ^= Aggregate.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Channel);
      }
      if (ServerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Addr);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Port);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (Aggregate != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(Aggregate);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(Status);
      }
      if (Sort != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Sort);
      }
      if (Ret != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Port);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Aggregate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Aggregate);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Status);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Sort);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfoRes other) {
      if (other == null) {
        return;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.ServerId.Length != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Aggregate != 0) {
        Aggregate = other.Aggregate;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Channel = input.ReadString();
            break;
          }
          case 18: {
            ServerId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Addr = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadSInt32();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 56: {
            Aggregate = input.ReadSInt32();
            break;
          }
          case 64: {
            Status = input.ReadSInt32();
            break;
          }
          case 72: {
            Sort = input.ReadSInt32();
            break;
          }
          case 80: {
            Ret = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
