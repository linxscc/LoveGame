// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_month_sign_rule.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_month_sign_rule.proto</summary>
  public static partial class BeanMonthSignRuleReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_month_sign_rule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanMonthSignRuleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpiZWFuX21vbnRoX3NpZ25fcnVsZS5wcm90bxIJY29tLnByb3RvGgpiYXNl",
            "LnByb3RvGhBiZWFuX2F3YXJkLnByb3RvIlcKD01vbnRoU2lnblJ1bGVQQhIM",
            "CgRkYXRlGAEgASgREiIKBmF3YXJkcxgCIAMoCzISLmNvbS5wcm90by5Bd2Fy",
            "ZFBCEhIKCnZpcF9kb3VibGUYAyABKBEiMAoSTW9udGhTaWduQnV5UnVsZVBC",
            "Eg0KBWNvdW50GAEgASgREgsKA2dlbRgCIAEoESJrChRNb250aFNpZ25FeHRy",
            "YVJ1bGVQQhIMCgR5ZWFyGAEgASgREg0KBW1vbnRoGAIgASgREiIKBmF3YXJk",
            "cxgDIAMoCzISLmNvbS5wcm90by5Bd2FyZFBCEhIKCnRvdGFsX2RhdGUYBCAB",
            "KBFCNgofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEITTW9udGhT",
            "aWduUnVsZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanAwardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MonthSignRulePB), global::Com.Proto.MonthSignRulePB.Parser, new[]{ "Date", "Awards", "VipDouble" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MonthSignBuyRulePB), global::Com.Proto.MonthSignBuyRulePB.Parser, new[]{ "Count", "Gem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MonthSignExtraRulePB), global::Com.Proto.MonthSignExtraRulePB.Parser, new[]{ "Year", "Month", "Awards", "TotalDate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///MonthSignRulePB MonthSignRule
  /// </summary>
  public sealed partial class MonthSignRulePB : pb::IMessage<MonthSignRulePB> {
    private static readonly pb::MessageParser<MonthSignRulePB> _parser = new pb::MessageParser<MonthSignRulePB>(() => new MonthSignRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthSignRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMonthSignRuleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignRulePB(MonthSignRulePB other) : this() {
      date_ = other.date_;
      awards_ = other.awards_.Clone();
      vipDouble_ = other.vipDouble_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignRulePB Clone() {
      return new MonthSignRulePB(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private int date_;
    /// <summary>
    ///天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "vip_double" field.</summary>
    public const int VipDoubleFieldNumber = 3;
    private int vipDouble_;
    /// <summary>
    ///1双倍0否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipDouble {
      get { return vipDouble_; }
      set {
        vipDouble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonthSignRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonthSignRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (VipDouble != other.VipDouble) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Date != 0) hash ^= Date.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (VipDouble != 0) hash ^= VipDouble.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Date != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Date);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (VipDouble != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(VipDouble);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Date != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Date);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (VipDouble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VipDouble);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonthSignRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Date != 0) {
        Date = other.Date;
      }
      awards_.Add(other.awards_);
      if (other.VipDouble != 0) {
        VipDouble = other.VipDouble;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Date = input.ReadSInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 24: {
            VipDouble = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MonthSignBuyRulePB MonthSignBuyRule
  /// </summary>
  public sealed partial class MonthSignBuyRulePB : pb::IMessage<MonthSignBuyRulePB> {
    private static readonly pb::MessageParser<MonthSignBuyRulePB> _parser = new pb::MessageParser<MonthSignBuyRulePB>(() => new MonthSignBuyRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthSignBuyRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMonthSignRuleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignBuyRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignBuyRulePB(MonthSignBuyRulePB other) : this() {
      count_ = other.count_;
      gem_ = other.gem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignBuyRulePB Clone() {
      return new MonthSignBuyRulePB(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "gem" field.</summary>
    public const int GemFieldNumber = 2;
    private int gem_;
    /// <summary>
    ///花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gem {
      get { return gem_; }
      set {
        gem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonthSignBuyRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonthSignBuyRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Gem != other.Gem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Gem != 0) hash ^= Gem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Count);
      }
      if (Gem != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Count);
      }
      if (Gem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonthSignBuyRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Gem != 0) {
        Gem = other.Gem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadSInt32();
            break;
          }
          case 16: {
            Gem = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MonthSignExtraRulePB MonthSignExtraRule
  /// </summary>
  public sealed partial class MonthSignExtraRulePB : pb::IMessage<MonthSignExtraRulePB> {
    private static readonly pb::MessageParser<MonthSignExtraRulePB> _parser = new pb::MessageParser<MonthSignExtraRulePB>(() => new MonthSignExtraRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthSignExtraRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMonthSignRuleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignExtraRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignExtraRulePB(MonthSignExtraRulePB other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      awards_ = other.awards_.Clone();
      totalDate_ = other.totalDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonthSignExtraRulePB Clone() {
      return new MonthSignExtraRulePB(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    /// <summary>
    ///年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    /// <summary>
    ///月
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.AwardPB> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.AwardPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AwardPB> awards_ = new pbc::RepeatedField<global::Com.Proto.AwardPB>();
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AwardPB> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "total_date" field.</summary>
    public const int TotalDateFieldNumber = 4;
    private int totalDate_;
    /// <summary>
    ///需要签到天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDate {
      get { return totalDate_; }
      set {
        totalDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonthSignExtraRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonthSignExtraRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (TotalDate != other.TotalDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (TotalDate != 0) hash ^= TotalDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Month);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (TotalDate != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(TotalDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Month);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (TotalDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TotalDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonthSignExtraRulePB other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      awards_.Add(other.awards_);
      if (other.TotalDate != 0) {
        TotalDate = other.TotalDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadSInt32();
            break;
          }
          case 16: {
            Month = input.ReadSInt32();
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 32: {
            TotalDate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
