// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean_micro_bog.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from bean_micro_bog.proto</summary>
  public static partial class BeanMicroBogReflection {

    #region Descriptor
    /// <summary>File descriptor for bean_micro_bog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeanMicroBogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRiZWFuX21pY3JvX2JvZy5wcm90bxIJY29tLnByb3RvGgpiYXNlLnByb3Rv",
            "IvABCg9NaWNyb0Jsb2dSdWxlUEISEAoIc2NlbmVfaWQYASABKBESDwoHdGFs",
            "a19pZBgCIAEoERISCgpzY2VuZV9uYW1lGAMgASgJEg8KB2hlYWRfaWQYBCAB",
            "KBESDgoGcGljX2lkGAUgASgREgwKBHR5cGUYBiABKBESDwoHYmxvZ2dlchgH",
            "IAEoCRIPCgdidG5fdHh0GAggASgJEg8KB2NvbnRlbnQYCSABKAkSDwoHcmVh",
            "ZGluZxgKIAEoERIQCghjb21tZW50cxgLIAEoERINCgVsaWtlcxgMIAEoERIS",
            "CgpzZWxlY3RfaWRzGA0gAygRQjYKH25ldC5nYWxhc3BvcnRzLmJpZ3N0YXIu",
            "cHJvdG9jb2xCE01pY3JvQmxvZ1J1bGVQcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MicroBlogRulePB), global::Com.Proto.MicroBlogRulePB.Parser, new[]{ "SceneId", "TalkId", "SceneName", "HeadId", "PicId", "Type", "Blogger", "BtnTxt", "Content", "Reading", "Comments", "Likes", "SelectIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///MicroBlogRulePB MicroBlogRule  微博
  /// </summary>
  public sealed partial class MicroBlogRulePB : pb::IMessage<MicroBlogRulePB> {
    private static readonly pb::MessageParser<MicroBlogRulePB> _parser = new pb::MessageParser<MicroBlogRulePB>(() => new MicroBlogRulePB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MicroBlogRulePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.BeanMicroBogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MicroBlogRulePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MicroBlogRulePB(MicroBlogRulePB other) : this() {
      sceneId_ = other.sceneId_;
      talkId_ = other.talkId_;
      sceneName_ = other.sceneName_;
      headId_ = other.headId_;
      picId_ = other.picId_;
      type_ = other.type_;
      blogger_ = other.blogger_;
      btnTxt_ = other.btnTxt_;
      content_ = other.content_;
      reading_ = other.reading_;
      comments_ = other.comments_;
      likes_ = other.likes_;
      selectIds_ = other.selectIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MicroBlogRulePB Clone() {
      return new MicroBlogRulePB(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    /// <summary>
    ///情景ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "talk_id" field.</summary>
    public const int TalkIdFieldNumber = 2;
    private int talkId_;
    /// <summary>
    ///回复ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalkId {
      get { return talkId_; }
      set {
        talkId_ = value;
      }
    }

    /// <summary>Field number for the "scene_name" field.</summary>
    public const int SceneNameFieldNumber = 3;
    private string sceneName_ = "";
    /// <summary>
    ///情景名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 4;
    private int headId_;
    /// <summary>
    ///头像ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "pic_id" field.</summary>
    public const int PicIdFieldNumber = 5;
    private int picId_;
    /// <summary>
    ///图片ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PicId {
      get { return picId_; }
      set {
        picId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    ///人物类型（玩家0，林尹默1，李赫2，谭飞3，方以乔4）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blogger" field.</summary>
    public const int BloggerFieldNumber = 7;
    private string blogger_ = "";
    /// <summary>
    ///博主名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Blogger {
      get { return blogger_; }
      set {
        blogger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "btn_txt" field.</summary>
    public const int BtnTxtFieldNumber = 8;
    private string btnTxt_ = "";
    /// <summary>
    ///按钮文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BtnTxt {
      get { return btnTxt_; }
      set {
        btnTxt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 9;
    private string content_ = "";
    /// <summary>
    ///文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reading" field.</summary>
    public const int ReadingFieldNumber = 10;
    private int reading_;
    /// <summary>
    ///阅读数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reading {
      get { return reading_; }
      set {
        reading_ = value;
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 11;
    private int comments_;
    /// <summary>
    ///评论数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Comments {
      get { return comments_; }
      set {
        comments_ = value;
      }
    }

    /// <summary>Field number for the "likes" field.</summary>
    public const int LikesFieldNumber = 12;
    private int likes_;
    /// <summary>
    ///点赞数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Likes {
      get { return likes_; }
      set {
        likes_ = value;
      }
    }

    /// <summary>Field number for the "select_ids" field.</summary>
    public const int SelectIdsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_selectIds_codec
        = pb::FieldCodec.ForSInt32(106);
    private readonly pbc::RepeatedField<int> selectIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家选项列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SelectIds {
      get { return selectIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MicroBlogRulePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MicroBlogRulePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (TalkId != other.TalkId) return false;
      if (SceneName != other.SceneName) return false;
      if (HeadId != other.HeadId) return false;
      if (PicId != other.PicId) return false;
      if (Type != other.Type) return false;
      if (Blogger != other.Blogger) return false;
      if (BtnTxt != other.BtnTxt) return false;
      if (Content != other.Content) return false;
      if (Reading != other.Reading) return false;
      if (Comments != other.Comments) return false;
      if (Likes != other.Likes) return false;
      if(!selectIds_.Equals(other.selectIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (TalkId != 0) hash ^= TalkId.GetHashCode();
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      if (HeadId != 0) hash ^= HeadId.GetHashCode();
      if (PicId != 0) hash ^= PicId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Blogger.Length != 0) hash ^= Blogger.GetHashCode();
      if (BtnTxt.Length != 0) hash ^= BtnTxt.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Reading != 0) hash ^= Reading.GetHashCode();
      if (Comments != 0) hash ^= Comments.GetHashCode();
      if (Likes != 0) hash ^= Likes.GetHashCode();
      hash ^= selectIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(SceneId);
      }
      if (TalkId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TalkId);
      }
      if (SceneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SceneName);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(HeadId);
      }
      if (PicId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(PicId);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Type);
      }
      if (Blogger.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Blogger);
      }
      if (BtnTxt.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BtnTxt);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Content);
      }
      if (Reading != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Reading);
      }
      if (Comments != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(Comments);
      }
      if (Likes != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(Likes);
      }
      selectIds_.WriteTo(output, _repeated_selectIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SceneId);
      }
      if (TalkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TalkId);
      }
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HeadId);
      }
      if (PicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PicId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Type);
      }
      if (Blogger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Blogger);
      }
      if (BtnTxt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BtnTxt);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Reading != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Reading);
      }
      if (Comments != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Comments);
      }
      if (Likes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Likes);
      }
      size += selectIds_.CalculateSize(_repeated_selectIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MicroBlogRulePB other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.TalkId != 0) {
        TalkId = other.TalkId;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      if (other.HeadId != 0) {
        HeadId = other.HeadId;
      }
      if (other.PicId != 0) {
        PicId = other.PicId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Blogger.Length != 0) {
        Blogger = other.Blogger;
      }
      if (other.BtnTxt.Length != 0) {
        BtnTxt = other.BtnTxt;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Reading != 0) {
        Reading = other.Reading;
      }
      if (other.Comments != 0) {
        Comments = other.Comments;
      }
      if (other.Likes != 0) {
        Likes = other.Likes;
      }
      selectIds_.Add(other.selectIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SceneId = input.ReadSInt32();
            break;
          }
          case 16: {
            TalkId = input.ReadSInt32();
            break;
          }
          case 26: {
            SceneName = input.ReadString();
            break;
          }
          case 32: {
            HeadId = input.ReadSInt32();
            break;
          }
          case 40: {
            PicId = input.ReadSInt32();
            break;
          }
          case 48: {
            Type = input.ReadSInt32();
            break;
          }
          case 58: {
            Blogger = input.ReadString();
            break;
          }
          case 66: {
            BtnTxt = input.ReadString();
            break;
          }
          case 74: {
            Content = input.ReadString();
            break;
          }
          case 80: {
            Reading = input.ReadSInt32();
            break;
          }
          case 88: {
            Comments = input.ReadSInt32();
            break;
          }
          case 96: {
            Likes = input.ReadSInt32();
            break;
          }
          case 106:
          case 104: {
            selectIds_.AddEntriesFrom(input, _repeated_selectIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
