// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_appointment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Proto {

  /// <summary>Holder for reflection information generated from controller_appointment.proto</summary>
  public static partial class ControllerAppointmentReflection {

    #region Descriptor
    /// <summary>File descriptor for controller_appointment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerAppointmentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxjb250cm9sbGVyX2FwcG9pbnRtZW50LnByb3RvEgljb20ucHJvdG8aCmJh",
            "c2UucHJvdG8aD2JlYW5fY2FyZC5wcm90bxobYmVhbl9hcHBvaW50bWVudF9y",
            "dWxlLnByb3RvGhtiZWFuX3VzZXJfYXBwb2ludG1lbnQucHJvdG8aFGJlYW5f",
            "dXNlcl9jYXJkLnByb3RvGhRiZWFuX3VzZXJfaXRlbS5wcm90bxoXYmVhbl91",
            "c2VyX2VsZW1lbnQucHJvdG8iWgoSQXBwb2ludG1lbnRSdWxlUmVzEgsKA3Jl",
            "dBgBIAEoERI3ChFhcHBvaW50bWVudF9ydWxlcxgCIAMoCzIcLmNvbS5wcm90",
            "by5BcHBvaW50bWVudFJ1bGVQQiIoChBNeUFwcG9pbnRtZW50UmVxEhQKDGlz",
            "T3Blbk1vZHVsZRgBIAEoESJYChBNeUFwcG9pbnRtZW50UmVzEgsKA3JldBgB",
            "IAEoERI3ChF1c2VyX2FwcG9pbnRtZW50cxgCIAMoCzIcLmNvbS5wcm90by5V",
            "c2VyQXBwb2ludG1lbnRQQiIjCglBY3RpdmVSZXESFgoOYXBwb2ludG1lbnRf",
            "aWQYASABKBEiUQoJQWN0aXZlUmVzEgsKA3JldBgBIAEoERI3ChF1c2VyX2Fw",
            "cG9pbnRtZW50cxgCIAEoCzIcLmNvbS5wcm90by5Vc2VyQXBwb2ludG1lbnRQ",
            "QiIzCgtPcGVuR2F0ZVJlcRIWCg5hcHBvaW50bWVudF9pZBgBIAEoERIMCgRn",
            "YXRlGAIgASgRIn4KC09wZW5HYXRlUmVzEgsKA3JldBgBIAEoERI3ChF1c2Vy",
            "X2FwcG9pbnRtZW50cxgCIAEoCzIcLmNvbS5wcm90by5Vc2VyQXBwb2ludG1l",
            "bnRQQhIpCgp1c2VyX2l0ZW1zGAMgAygLMhUuY29tLnByb3RvLlVzZXJJdGVt",
            "UEIiMwoLUGFzc0dhdGVSZXESFgoOYXBwb2ludG1lbnRfaWQYASABKBESDAoE",
            "Z2F0ZRgCIAEoESJTCgtQYXNzR2F0ZVJlcxILCgNyZXQYASABKBESNwoRdXNl",
            "cl9hcHBvaW50bWVudHMYAiABKAsyHC5jb20ucHJvdG8uVXNlckFwcG9pbnRt",
            "ZW50UEIiNgoOUGhvdG9OaWNrVXBSZXESFgoOYXBwb2ludG1lbnRfaWQYASAB",
            "KBESDAoEZ2F0ZRgCIAEoESIdCg5QaG90b05pY2tVcFJlcxILCgNyZXQYASAB",
            "KBFCPgofbmV0LmdhbGFzcG9ydHMuYmlnc3Rhci5wcm90b2NvbEIbQXBwb2lu",
            "dG1lbnRDb250cm9sbGVyUHJvdG9zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BaseReflection.Descriptor, global::Com.Proto.BeanCardReflection.Descriptor, global::Com.Proto.BeanAppointmentRuleReflection.Descriptor, global::Com.Proto.BeanUserAppointmentReflection.Descriptor, global::Com.Proto.BeanUserCardReflection.Descriptor, global::Com.Proto.BeanUserItemReflection.Descriptor, global::Com.Proto.BeanUserElementReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.AppointmentRuleRes), global::Com.Proto.AppointmentRuleRes.Parser, new[]{ "Ret", "AppointmentRules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyAppointmentReq), global::Com.Proto.MyAppointmentReq.Parser, new[]{ "IsOpenModule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.MyAppointmentRes), global::Com.Proto.MyAppointmentRes.Parser, new[]{ "Ret", "UserAppointments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActiveReq), global::Com.Proto.ActiveReq.Parser, new[]{ "AppointmentId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.ActiveRes), global::Com.Proto.ActiveRes.Parser, new[]{ "Ret", "UserAppointments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.OpenGateReq), global::Com.Proto.OpenGateReq.Parser, new[]{ "AppointmentId", "Gate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.OpenGateRes), global::Com.Proto.OpenGateRes.Parser, new[]{ "Ret", "UserAppointments", "UserItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PassGateReq), global::Com.Proto.PassGateReq.Parser, new[]{ "AppointmentId", "Gate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PassGateRes), global::Com.Proto.PassGateRes.Parser, new[]{ "Ret", "UserAppointments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PhotoNickUpReq), global::Com.Proto.PhotoNickUpReq.Parser, new[]{ "AppointmentId", "Gate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Proto.PhotoNickUpRes), global::Com.Proto.PhotoNickUpRes.Parser, new[]{ "Ret" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///规则  appointmentC/rules
  /// </summary>
  public sealed partial class AppointmentRuleRes : pb::IMessage<AppointmentRuleRes> {
    private static readonly pb::MessageParser<AppointmentRuleRes> _parser = new pb::MessageParser<AppointmentRuleRes>(() => new AppointmentRuleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppointmentRuleRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppointmentRuleRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppointmentRuleRes(AppointmentRuleRes other) : this() {
      ret_ = other.ret_;
      appointmentRules_ = other.appointmentRules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppointmentRuleRes Clone() {
      return new AppointmentRuleRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "appointment_rules" field.</summary>
    public const int AppointmentRulesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.AppointmentRulePB> _repeated_appointmentRules_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.AppointmentRulePB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.AppointmentRulePB> appointmentRules_ = new pbc::RepeatedField<global::Com.Proto.AppointmentRulePB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.AppointmentRulePB> AppointmentRules {
      get { return appointmentRules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppointmentRuleRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppointmentRuleRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!appointmentRules_.Equals(other.appointmentRules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= appointmentRules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      appointmentRules_.WriteTo(output, _repeated_appointmentRules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += appointmentRules_.CalculateSize(_repeated_appointmentRules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppointmentRuleRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      appointmentRules_.Add(other.appointmentRules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            appointmentRules_.AddEntriesFrom(input, _repeated_appointmentRules_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户约会数据 appointmentC/userAppointments
  /// </summary>
  public sealed partial class MyAppointmentReq : pb::IMessage<MyAppointmentReq> {
    private static readonly pb::MessageParser<MyAppointmentReq> _parser = new pb::MessageParser<MyAppointmentReq>(() => new MyAppointmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyAppointmentReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyAppointmentReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyAppointmentReq(MyAppointmentReq other) : this() {
      isOpenModule_ = other.isOpenModule_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyAppointmentReq Clone() {
      return new MyAppointmentReq(this);
    }

    /// <summary>Field number for the "isOpenModule" field.</summary>
    public const int IsOpenModuleFieldNumber = 1;
    private int isOpenModule_;
    /// <summary>
    ///0不消除小红点；1打开模块，消除小红点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsOpenModule {
      get { return isOpenModule_; }
      set {
        isOpenModule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyAppointmentReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyAppointmentReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpenModule != other.IsOpenModule) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpenModule != 0) hash ^= IsOpenModule.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsOpenModule != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(IsOpenModule);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpenModule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IsOpenModule);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyAppointmentReq other) {
      if (other == null) {
        return;
      }
      if (other.IsOpenModule != 0) {
        IsOpenModule = other.IsOpenModule;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsOpenModule = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MyAppointmentRes : pb::IMessage<MyAppointmentRes> {
    private static readonly pb::MessageParser<MyAppointmentRes> _parser = new pb::MessageParser<MyAppointmentRes>(() => new MyAppointmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyAppointmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyAppointmentRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyAppointmentRes(MyAppointmentRes other) : this() {
      ret_ = other.ret_;
      userAppointments_ = other.userAppointments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyAppointmentRes Clone() {
      return new MyAppointmentRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_appointments" field.</summary>
    public const int UserAppointmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Proto.UserAppointmentPB> _repeated_userAppointments_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Proto.UserAppointmentPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserAppointmentPB> userAppointments_ = new pbc::RepeatedField<global::Com.Proto.UserAppointmentPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserAppointmentPB> UserAppointments {
      get { return userAppointments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyAppointmentRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyAppointmentRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!userAppointments_.Equals(other.userAppointments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= userAppointments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      userAppointments_.WriteTo(output, _repeated_userAppointments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      size += userAppointments_.CalculateSize(_repeated_userAppointments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyAppointmentRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      userAppointments_.Add(other.userAppointments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            userAppointments_.AddEntriesFrom(input, _repeated_userAppointments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///激活约会 appointmentC/active
  /// </summary>
  public sealed partial class ActiveReq : pb::IMessage<ActiveReq> {
    private static readonly pb::MessageParser<ActiveReq> _parser = new pb::MessageParser<ActiveReq>(() => new ActiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveReq(ActiveReq other) : this() {
      appointmentId_ = other.appointmentId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveReq Clone() {
      return new ActiveReq(this);
    }

    /// <summary>Field number for the "appointment_id" field.</summary>
    public const int AppointmentIdFieldNumber = 1;
    private int appointmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppointmentId {
      get { return appointmentId_; }
      set {
        appointmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppointmentId != other.AppointmentId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppointmentId != 0) hash ^= AppointmentId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppointmentId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AppointmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppointmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AppointmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveReq other) {
      if (other == null) {
        return;
      }
      if (other.AppointmentId != 0) {
        AppointmentId = other.AppointmentId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppointmentId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveRes : pb::IMessage<ActiveRes> {
    private static readonly pb::MessageParser<ActiveRes> _parser = new pb::MessageParser<ActiveRes>(() => new ActiveRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveRes(ActiveRes other) : this() {
      ret_ = other.ret_;
      UserAppointments = other.userAppointments_ != null ? other.UserAppointments.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveRes Clone() {
      return new ActiveRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_appointments" field.</summary>
    public const int UserAppointmentsFieldNumber = 2;
    private global::Com.Proto.UserAppointmentPB userAppointments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserAppointmentPB UserAppointments {
      get { return userAppointments_; }
      set {
        userAppointments_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserAppointments, other.UserAppointments)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userAppointments_ != null) hash ^= UserAppointments.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userAppointments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAppointments);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userAppointments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppointments);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userAppointments_ != null) {
        if (userAppointments_ == null) {
          userAppointments_ = new global::Com.Proto.UserAppointmentPB();
        }
        UserAppointments.MergeFrom(other.UserAppointments);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userAppointments_ == null) {
              userAppointments_ = new global::Com.Proto.UserAppointmentPB();
            }
            input.ReadMessage(userAppointments_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///解锁约会关卡 appointmentC/openGate
  /// </summary>
  public sealed partial class OpenGateReq : pb::IMessage<OpenGateReq> {
    private static readonly pb::MessageParser<OpenGateReq> _parser = new pb::MessageParser<OpenGateReq>(() => new OpenGateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenGateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenGateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenGateReq(OpenGateReq other) : this() {
      appointmentId_ = other.appointmentId_;
      gate_ = other.gate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenGateReq Clone() {
      return new OpenGateReq(this);
    }

    /// <summary>Field number for the "appointment_id" field.</summary>
    public const int AppointmentIdFieldNumber = 1;
    private int appointmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppointmentId {
      get { return appointmentId_; }
      set {
        appointmentId_ = value;
      }
    }

    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 2;
    private int gate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gate {
      get { return gate_; }
      set {
        gate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenGateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenGateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppointmentId != other.AppointmentId) return false;
      if (Gate != other.Gate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppointmentId != 0) hash ^= AppointmentId.GetHashCode();
      if (Gate != 0) hash ^= Gate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppointmentId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AppointmentId);
      }
      if (Gate != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppointmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AppointmentId);
      }
      if (Gate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenGateReq other) {
      if (other == null) {
        return;
      }
      if (other.AppointmentId != 0) {
        AppointmentId = other.AppointmentId;
      }
      if (other.Gate != 0) {
        Gate = other.Gate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppointmentId = input.ReadSInt32();
            break;
          }
          case 16: {
            Gate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenGateRes : pb::IMessage<OpenGateRes> {
    private static readonly pb::MessageParser<OpenGateRes> _parser = new pb::MessageParser<OpenGateRes>(() => new OpenGateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenGateRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenGateRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenGateRes(OpenGateRes other) : this() {
      ret_ = other.ret_;
      UserAppointments = other.userAppointments_ != null ? other.UserAppointments.Clone() : null;
      userItems_ = other.userItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenGateRes Clone() {
      return new OpenGateRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_appointments" field.</summary>
    public const int UserAppointmentsFieldNumber = 2;
    private global::Com.Proto.UserAppointmentPB userAppointments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserAppointmentPB UserAppointments {
      get { return userAppointments_; }
      set {
        userAppointments_ = value;
      }
    }

    /// <summary>Field number for the "user_items" field.</summary>
    public const int UserItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Proto.UserItemPB> _repeated_userItems_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Proto.UserItemPB.Parser);
    private readonly pbc::RepeatedField<global::Com.Proto.UserItemPB> userItems_ = new pbc::RepeatedField<global::Com.Proto.UserItemPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Proto.UserItemPB> UserItems {
      get { return userItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenGateRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenGateRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserAppointments, other.UserAppointments)) return false;
      if(!userItems_.Equals(other.userItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userAppointments_ != null) hash ^= UserAppointments.GetHashCode();
      hash ^= userItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userAppointments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAppointments);
      }
      userItems_.WriteTo(output, _repeated_userItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userAppointments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppointments);
      }
      size += userItems_.CalculateSize(_repeated_userItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenGateRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userAppointments_ != null) {
        if (userAppointments_ == null) {
          userAppointments_ = new global::Com.Proto.UserAppointmentPB();
        }
        UserAppointments.MergeFrom(other.UserAppointments);
      }
      userItems_.Add(other.userItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userAppointments_ == null) {
              userAppointments_ = new global::Com.Proto.UserAppointmentPB();
            }
            input.ReadMessage(userAppointments_);
            break;
          }
          case 26: {
            userItems_.AddEntriesFrom(input, _repeated_userItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通关关卡 appointmentC/passGate
  /// </summary>
  public sealed partial class PassGateReq : pb::IMessage<PassGateReq> {
    private static readonly pb::MessageParser<PassGateReq> _parser = new pb::MessageParser<PassGateReq>(() => new PassGateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassGateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGateReq(PassGateReq other) : this() {
      appointmentId_ = other.appointmentId_;
      gate_ = other.gate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGateReq Clone() {
      return new PassGateReq(this);
    }

    /// <summary>Field number for the "appointment_id" field.</summary>
    public const int AppointmentIdFieldNumber = 1;
    private int appointmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppointmentId {
      get { return appointmentId_; }
      set {
        appointmentId_ = value;
      }
    }

    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 2;
    private int gate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gate {
      get { return gate_; }
      set {
        gate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassGateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassGateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppointmentId != other.AppointmentId) return false;
      if (Gate != other.Gate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppointmentId != 0) hash ^= AppointmentId.GetHashCode();
      if (Gate != 0) hash ^= Gate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppointmentId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AppointmentId);
      }
      if (Gate != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppointmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AppointmentId);
      }
      if (Gate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassGateReq other) {
      if (other == null) {
        return;
      }
      if (other.AppointmentId != 0) {
        AppointmentId = other.AppointmentId;
      }
      if (other.Gate != 0) {
        Gate = other.Gate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppointmentId = input.ReadSInt32();
            break;
          }
          case 16: {
            Gate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassGateRes : pb::IMessage<PassGateRes> {
    private static readonly pb::MessageParser<PassGateRes> _parser = new pb::MessageParser<PassGateRes>(() => new PassGateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassGateRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGateRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGateRes(PassGateRes other) : this() {
      ret_ = other.ret_;
      UserAppointments = other.userAppointments_ != null ? other.UserAppointments.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGateRes Clone() {
      return new PassGateRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "user_appointments" field.</summary>
    public const int UserAppointmentsFieldNumber = 2;
    private global::Com.Proto.UserAppointmentPB userAppointments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Proto.UserAppointmentPB UserAppointments {
      get { return userAppointments_; }
      set {
        userAppointments_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassGateRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassGateRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(UserAppointments, other.UserAppointments)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (userAppointments_ != null) hash ^= UserAppointments.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
      if (userAppointments_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAppointments);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      if (userAppointments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppointments);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassGateRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.userAppointments_ != null) {
        if (userAppointments_ == null) {
          userAppointments_ = new global::Com.Proto.UserAppointmentPB();
        }
        UserAppointments.MergeFrom(other.UserAppointments);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
          case 18: {
            if (userAppointments_ == null) {
              userAppointments_ = new global::Com.Proto.UserAppointmentPB();
            }
            input.ReadMessage(userAppointments_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拍立得钉起来 appointmentC/photoNickUp
  /// </summary>
  public sealed partial class PhotoNickUpReq : pb::IMessage<PhotoNickUpReq> {
    private static readonly pb::MessageParser<PhotoNickUpReq> _parser = new pb::MessageParser<PhotoNickUpReq>(() => new PhotoNickUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoNickUpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoNickUpReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoNickUpReq(PhotoNickUpReq other) : this() {
      appointmentId_ = other.appointmentId_;
      gate_ = other.gate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoNickUpReq Clone() {
      return new PhotoNickUpReq(this);
    }

    /// <summary>Field number for the "appointment_id" field.</summary>
    public const int AppointmentIdFieldNumber = 1;
    private int appointmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppointmentId {
      get { return appointmentId_; }
      set {
        appointmentId_ = value;
      }
    }

    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 2;
    private int gate_;
    /// <summary>
    ///哪一关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gate {
      get { return gate_; }
      set {
        gate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoNickUpReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoNickUpReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppointmentId != other.AppointmentId) return false;
      if (Gate != other.Gate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppointmentId != 0) hash ^= AppointmentId.GetHashCode();
      if (Gate != 0) hash ^= Gate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppointmentId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(AppointmentId);
      }
      if (Gate != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Gate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppointmentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AppointmentId);
      }
      if (Gate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoNickUpReq other) {
      if (other == null) {
        return;
      }
      if (other.AppointmentId != 0) {
        AppointmentId = other.AppointmentId;
      }
      if (other.Gate != 0) {
        Gate = other.Gate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AppointmentId = input.ReadSInt32();
            break;
          }
          case 16: {
            Gate = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoNickUpRes : pb::IMessage<PhotoNickUpRes> {
    private static readonly pb::MessageParser<PhotoNickUpRes> _parser = new pb::MessageParser<PhotoNickUpRes>(() => new PhotoNickUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoNickUpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Proto.ControllerAppointmentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoNickUpRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoNickUpRes(PhotoNickUpRes other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoNickUpRes Clone() {
      return new PhotoNickUpRes(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoNickUpRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoNickUpRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoNickUpRes other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
